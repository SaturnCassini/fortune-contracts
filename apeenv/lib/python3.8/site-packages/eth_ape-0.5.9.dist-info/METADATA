Metadata-Version: 2.1
Name: eth-ape
Version: 0.5.9
Summary: Ape Ethereum Framework
Home-page: https://apeworx.io
Author: ApeWorX Ltd.
Author-email: admin@apeworx.io
License: Apache-2.0
Project-URL: Documentation, https://docs.apeworx.io/ape/
Project-URL: Funding, https://gitcoin.co/grants/5958/ape-maintenance-fund
Project-URL: Source, https://github.com/ApeWorX/ape
Project-URL: Tracker, https://github.com/ApeWorX/ape/issues
Project-URL: Twitter, https://twitter.com/ApeFramework
Keywords: ethereum
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: MacOS
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.8,<3.11
Description-Content-Type: text/markdown
Requires-Dist: click (<9,>=8.1.3)
Requires-Dist: ijson (<4,>=3.1.4)
Requires-Dist: importlib-metadata
Requires-Dist: ipython (<9,>=8.5.0)
Requires-Dist: packaging (<21,>=20.9)
Requires-Dist: pandas (<2,>=1.3.0)
Requires-Dist: pluggy (<2,>=1.0.0)
Requires-Dist: pydantic (<2,>=1.9.2)
Requires-Dist: PyGithub (<2,>=1.54)
Requires-Dist: pytest (<8.0,>=6.0)
Requires-Dist: python-dateutil (<3,>=2.8.2)
Requires-Dist: pyyaml (<7,>=6.0)
Requires-Dist: requests (<3,>=2.28.1)
Requires-Dist: rich (<13,>=12.5.1)
Requires-Dist: SQLAlchemy (>=1.4.35)
Requires-Dist: tqdm (<5.0,>=4.62.3)
Requires-Dist: traitlets (>=5.3.0)
Requires-Dist: watchdog (<3.0,>=2.1.9)
Requires-Dist: eth-abi (<4,>=3.0.1)
Requires-Dist: eth-account (<0.8,>=0.7)
Requires-Dist: eth-typing (<4,>=3.1)
Requires-Dist: eth-utils (<3,>=2.0.0)
Requires-Dist: hexbytes (<1,>=0.2.3)
Requires-Dist: py-geth (<4,>=3.8.0)
Requires-Dist: web3[tester] (==6.0.0b7)
Requires-Dist: eip712 (<0.2,>=0.1.4)
Requires-Dist: ethpm-types (<0.4,>=0.3.15)
Requires-Dist: evm-trace (>=0.1.0a14)
Requires-Dist: backports.cached-property ; python_version < "3.8"
Provides-Extra: dev
Requires-Dist: pytest-xdist ; extra == 'dev'
Requires-Dist: pytest-cov ; extra == 'dev'
Requires-Dist: pytest-mock ; extra == 'dev'
Requires-Dist: hypothesis (<7.0,>=6.2.0) ; extra == 'dev'
Requires-Dist: hypothesis-jsonschema (==0.19.0) ; extra == 'dev'
Requires-Dist: black (<23,>=22.12.0) ; extra == 'dev'
Requires-Dist: mypy (>=0.991) ; extra == 'dev'
Requires-Dist: types-PyYAML ; extra == 'dev'
Requires-Dist: types-requests ; extra == 'dev'
Requires-Dist: types-setuptools ; extra == 'dev'
Requires-Dist: pandas-stubs (==1.2.0.62) ; extra == 'dev'
Requires-Dist: types-SQLAlchemy (>=1.4.49) ; extra == 'dev'
Requires-Dist: flake8 (<6,>=5.0.4) ; extra == 'dev'
Requires-Dist: flake8-breakpoint (<2,>=1.1.0) ; extra == 'dev'
Requires-Dist: flake8-print (<5,>=4.0.0) ; extra == 'dev'
Requires-Dist: isort (<6,>=5.10.1) ; extra == 'dev'
Requires-Dist: mdformat (>=0.7.16) ; extra == 'dev'
Requires-Dist: mdformat-gfm (>=0.3.5) ; extra == 'dev'
Requires-Dist: mdformat-frontmatter (>=0.4.1) ; extra == 'dev'
Requires-Dist: myst-parser (<0.18,>=0.17.0) ; extra == 'dev'
Requires-Dist: sphinx-click (<4.0,>=3.1.0) ; extra == 'dev'
Requires-Dist: Sphinx (<5.0,>=4.4.0) ; extra == 'dev'
Requires-Dist: sphinx-rtd-theme (<2,>=1.0.0) ; extra == 'dev'
Requires-Dist: sphinxcontrib-napoleon (>=0.7) ; extra == 'dev'
Requires-Dist: setuptools ; extra == 'dev'
Requires-Dist: wheel ; extra == 'dev'
Requires-Dist: twine (==3.8.0) ; extra == 'dev'
Requires-Dist: commitizen (<2.20,>=2.19) ; extra == 'dev'
Requires-Dist: pre-commit ; extra == 'dev'
Requires-Dist: pytest-watch ; extra == 'dev'
Requires-Dist: ipdb ; extra == 'dev'
Provides-Extra: doc
Requires-Dist: myst-parser (<0.18,>=0.17.0) ; extra == 'doc'
Requires-Dist: sphinx-click (<4.0,>=3.1.0) ; extra == 'doc'
Requires-Dist: Sphinx (<5.0,>=4.4.0) ; extra == 'doc'
Requires-Dist: sphinx-rtd-theme (<2,>=1.0.0) ; extra == 'doc'
Requires-Dist: sphinxcontrib-napoleon (>=0.7) ; extra == 'doc'
Provides-Extra: lint
Requires-Dist: black (<23,>=22.12.0) ; extra == 'lint'
Requires-Dist: mypy (>=0.991) ; extra == 'lint'
Requires-Dist: types-PyYAML ; extra == 'lint'
Requires-Dist: types-requests ; extra == 'lint'
Requires-Dist: types-setuptools ; extra == 'lint'
Requires-Dist: pandas-stubs (==1.2.0.62) ; extra == 'lint'
Requires-Dist: types-SQLAlchemy (>=1.4.49) ; extra == 'lint'
Requires-Dist: flake8 (<6,>=5.0.4) ; extra == 'lint'
Requires-Dist: flake8-breakpoint (<2,>=1.1.0) ; extra == 'lint'
Requires-Dist: flake8-print (<5,>=4.0.0) ; extra == 'lint'
Requires-Dist: isort (<6,>=5.10.1) ; extra == 'lint'
Requires-Dist: mdformat (>=0.7.16) ; extra == 'lint'
Requires-Dist: mdformat-gfm (>=0.3.5) ; extra == 'lint'
Requires-Dist: mdformat-frontmatter (>=0.4.1) ; extra == 'lint'
Provides-Extra: recommended-plugins
Requires-Dist: ape-alchemy ; extra == 'recommended-plugins'
Requires-Dist: ape-ens ; extra == 'recommended-plugins'
Requires-Dist: ape-etherscan ; extra == 'recommended-plugins'
Requires-Dist: ape-foundry ; extra == 'recommended-plugins'
Requires-Dist: ape-hardhat ; extra == 'recommended-plugins'
Requires-Dist: ape-infura ; extra == 'recommended-plugins'
Requires-Dist: ape-ledger ; extra == 'recommended-plugins'
Requires-Dist: ape-solidity ; extra == 'recommended-plugins'
Requires-Dist: ape-template ; extra == 'recommended-plugins'
Requires-Dist: ape-tokens ; extra == 'recommended-plugins'
Requires-Dist: ape-trezor ; extra == 'recommended-plugins'
Requires-Dist: ape-vyper ; extra == 'recommended-plugins'
Provides-Extra: release
Requires-Dist: setuptools ; extra == 'release'
Requires-Dist: wheel ; extra == 'release'
Requires-Dist: twine (==3.8.0) ; extra == 'release'
Provides-Extra: test
Requires-Dist: pytest-xdist ; extra == 'test'
Requires-Dist: pytest-cov ; extra == 'test'
Requires-Dist: pytest-mock ; extra == 'test'
Requires-Dist: hypothesis (<7.0,>=6.2.0) ; extra == 'test'
Requires-Dist: hypothesis-jsonschema (==0.19.0) ; extra == 'test'

# Overview

**Ape Framework** is an easy-to-use Web3 development tool.
Users can compile, test, and interact with smart contracts all in one command line session.
With our **modular plugin system**, Ape supports multiple contract languages and chains.

Ape is built by [ApeWorX LTD](https://www.apeworx.io/).

Join our [ApeWorX Discord server](https://discord.gg/apeworx) to stay up to date on new releases, plugins and tutorials.

If you want to just get started, jump down to the [Playing with Ape](#playing-with-ape)

## Documentation

Read our [technical documentation](https://docs.apeworx.io/ape/stable/) to get a deeper understanding of our open source Framework.

Read our [academic platform](https://academy.apeworx.io/) will help you master Ape Framework with tutorials and challenges.

## Prerequisite

In the latest release, Ape requires:

- Linux or macOS
- Python 3.8 or later
- **Windows**: Install Windows Subsystem Linux [(WSL)](https://docs.microsoft.com/en-us/windows/wsl/install) with Python 3.8 or later

Check your python version in a terminal with `python3 --version`

## Installation

There are three ways to install ape: `pipx`, `pip`, or `Docker`.

### Considerations for Installing:

- We advise installing in a [virtualenv](https://pypi.org/project/virtualenv/) or [venv](https://docs.python.org/3/library/venv.html) to avoid interfering with *OS-level site packages*.

- We advise installing **`ape`** with recommended plugins `pip install eth-ape'[recommended-plugins]'`

- We advise for **macOS** users to install virtual env via [homebrew](https://formulae.brew.sh/formula/virtualenv)

### via `pipx` or `pip`

1. Install `pipx` via their [installation instructions](https://pypa.github.io/pipx/) or `pip` via their [installation instructions](https://pip.pypa.io/en/stable/cli/pip_install/)

2. Install **`ape`** via `pipx install eth-ape` or `pip install eth-ape`

### via `docker`

Ape can also run in a docker contianer.

Please visit our [Dockerhub](https://hub.docker.com/repository/docker/apeworx/ape) for more details on using Ape with Docker.

```bash
docker run \
--volume $HOME/.ape:/root/.ape \
--volume $HOME/.vvm:/root/.vvm \
--volume $HOME/.solcx:/root/.solcx \
--volume $PWD:/root/project \
--workdir /root/project \
apeworx/ape compile
```

**Docker Uninstall Process:** You will need to remove files generated by docker

```bash
sudo rm -rf **\~/.solcx**
sudo rm -rf **\~/.vvm**
```

## Playing with Ape

After you installed Ape, you can run `ape --version` to make sure it works and it is the latest version.

There are two ways to interact with Ape:

- [CLI Reference](https://docs.apeworx.io/ape/latest/index.html)

- [Python Reference](https://docs.apeworx.io/ape/latest/index.html)

Ape is both a CLI tool and a Python SDK.

The CLI tool contains all the Ape commands and the Python SDK contains the classes and types needed to compose scripts, console actions, and tests.

## **Ape Modular Plugin System:**

Our [list of plugins](https://www.apeworx.io/#plugins) is the best way to have the most interoperable experience with Web3.

**NOTE**: If a plugin does not originate from the [ApeWorX GitHub Organization](https://github.com/ApeWorX?q=ape&type=all), you will get a warning about installing 3rd-party plugins.

Install 3rd party plugins at your own risk.

Additionally, plugins that come bundled with **`ape`** in the core installation cannot be removed and are part of the **`ape`** core software.

## Projects

When using Ape, you generally will work with a project.

```bash
ape init
```

For more in-depth information about smart-contract projects using the Ape framework, see the [projects guide](https://docs.apeworx.io/ape/stable/userguides/projects.html).

- Learn more about **installing** plugins from following this [installing user guide](https://docs.apeworx.io/ape/stable/userguides/installing_plugins.html).

- Learn more about **developing** your own plugins from this [developing user guide](docs/userguides/developing_plugins.md).

### Accounts

In Ape, you will need accounts to make transactions.
You can import or generate accounts using the core `accounts` plugin:

```bash
ape accounts import acc0   # Will prompt for a private key
ape accounts generate acc1
```

List all your accounts with the `list` command.

```bash
ape accounts list
```

Learn more about accounts in Ape by following the [accounts guide](https://docs.apeworx.io/ape/stable/userguides/accounts.html).

### Plugins

Add any plugins you may need, such as `vyper`.

```bash
ape plugins list -a
ape plugins install vyper
ape plugins list -a
```

### Compiling

You can compile contracts within the `contracts/` directory of your project.
The `--size` option will display you the size of the contract.

```bash
ape compile --size
```

Learn more about compiling in Ape by following the [compile guide](https://docs.apeworx.io/ape/stable/userguides/compile.html).

### Testing

Use Ape to test your smart-contract projects.
Provide the same arguments to `pytest` as you would to the `ape test` command.

For example:

```bash
ape test -k test_only_one_thing
```

Visit the [testing guide](https://docs.apeworx.io/ape/stable/userguides/testing.html) to learn more about testing using Ape.

### Console

Ape provides an `IPython` interactive console with useful pre-defined locals to interact with your project.
To interact with a deployed contract in a local environment, start by opening the console:

```bash
ape console --network ethereum:mainnet:infura
```

Visit [Ape Console](https://docs.apeworx.io/ape/stable/commands/console.html) to learn how to use Ape Console.

### Scripts

If you want to run specific files in a `scripts/` directory, you can do it using the `ape run` command.

```bash
# This command will run a file named deploy in the scripts/ directory
$ ape run deploy
```

Learn more about scripting using Ape by following the [scripting guide](https://docs.apeworx.io/ape/stable/userguides/scripts.html).

### Logging

To enable debug logging, run your command with the `--verbosity` flag using `DEBUG` as the value:

```bash
ape --verbosity DEBUG run
```

### Networks

You can work with registered networks, providers, and blockchain ecosystems (like Ethereum):

```python
from ape import networks
with networks.ethereum.mainnet.use_provider("infura"):
    ...  # Work with the infura provider here
```

To learn more about networks in Ape, see [this guide](https://docs.apeworx.io/ape/stable/commands/networks.html).


