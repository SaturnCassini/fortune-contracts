Metadata-Version: 2.1
Name: ape-alchemy
Version: 0.5.4
Summary: ape-alchemy: Alchemy Provider plugins for Ethereum-based networks
Home-page: https://github.com/ApeWorX/ape-alchemy
Author: ApeWorX Ltd.
Author-email: admin@apeworx.io
License: Apache-2.0
Keywords: ethereum
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Natural Language :: English
Classifier: Operating System :: MacOS
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.8,<3.11
Description-Content-Type: text/markdown
Requires-Dist: eth-ape (<0.6,>=0.5.2)
Requires-Dist: web3
Requires-Dist: requests
Provides-Extra: dev
Requires-Dist: ape-arbitrum ; extra == 'dev'
Requires-Dist: ape-optimism ; extra == 'dev'
Requires-Dist: ape-polygon ; extra == 'dev'
Requires-Dist: pytest (>=6.0) ; extra == 'dev'
Requires-Dist: pytest-xdist ; extra == 'dev'
Requires-Dist: pytest-cov ; extra == 'dev'
Requires-Dist: pytest-mock ; extra == 'dev'
Requires-Dist: hypothesis (<7.0,>=6.2.0) ; extra == 'dev'
Requires-Dist: black (>=22.10.0) ; extra == 'dev'
Requires-Dist: mypy (>=0.991) ; extra == 'dev'
Requires-Dist: types-requests ; extra == 'dev'
Requires-Dist: types-setuptools ; extra == 'dev'
Requires-Dist: flake8 (>=5.0.4) ; extra == 'dev'
Requires-Dist: flake8-breakpoint (>=1.1.0) ; extra == 'dev'
Requires-Dist: flake8-print (>=4.0.0) ; extra == 'dev'
Requires-Dist: isort (>=5.10.1) ; extra == 'dev'
Requires-Dist: myst-parser (<0.18,>=0.17.0) ; extra == 'dev'
Requires-Dist: sphinx-click (<4.0,>=3.1.0) ; extra == 'dev'
Requires-Dist: Sphinx (<5.0,>=4.4.0) ; extra == 'dev'
Requires-Dist: sphinx-rtd-theme (<2,>=1.0.0) ; extra == 'dev'
Requires-Dist: sphinxcontrib-napoleon (>=0.7) ; extra == 'dev'
Requires-Dist: setuptools ; extra == 'dev'
Requires-Dist: wheel ; extra == 'dev'
Requires-Dist: twine ; extra == 'dev'
Requires-Dist: commitizen ; extra == 'dev'
Requires-Dist: pre-commit ; extra == 'dev'
Requires-Dist: pytest-watch ; extra == 'dev'
Requires-Dist: IPython ; extra == 'dev'
Requires-Dist: ipdb ; extra == 'dev'
Provides-Extra: doc
Requires-Dist: myst-parser (<0.18,>=0.17.0) ; extra == 'doc'
Requires-Dist: sphinx-click (<4.0,>=3.1.0) ; extra == 'doc'
Requires-Dist: Sphinx (<5.0,>=4.4.0) ; extra == 'doc'
Requires-Dist: sphinx-rtd-theme (<2,>=1.0.0) ; extra == 'doc'
Requires-Dist: sphinxcontrib-napoleon (>=0.7) ; extra == 'doc'
Provides-Extra: lint
Requires-Dist: black (>=22.10.0) ; extra == 'lint'
Requires-Dist: mypy (>=0.991) ; extra == 'lint'
Requires-Dist: types-requests ; extra == 'lint'
Requires-Dist: types-setuptools ; extra == 'lint'
Requires-Dist: flake8 (>=5.0.4) ; extra == 'lint'
Requires-Dist: flake8-breakpoint (>=1.1.0) ; extra == 'lint'
Requires-Dist: flake8-print (>=4.0.0) ; extra == 'lint'
Requires-Dist: isort (>=5.10.1) ; extra == 'lint'
Provides-Extra: release
Requires-Dist: setuptools ; extra == 'release'
Requires-Dist: wheel ; extra == 'release'
Requires-Dist: twine ; extra == 'release'
Provides-Extra: test
Requires-Dist: ape-arbitrum ; extra == 'test'
Requires-Dist: ape-optimism ; extra == 'test'
Requires-Dist: ape-polygon ; extra == 'test'
Requires-Dist: pytest (>=6.0) ; extra == 'test'
Requires-Dist: pytest-xdist ; extra == 'test'
Requires-Dist: pytest-cov ; extra == 'test'
Requires-Dist: pytest-mock ; extra == 'test'
Requires-Dist: hypothesis (<7.0,>=6.2.0) ; extra == 'test'

# Quick Start

Use the [Alchemy](https://alchemy.com/?r=jk3NDM0MTIwODIzM) provider plugin to interact with blockchains via APIs.
The `ape-alchemy` plugin supports the following ecosystems:

* Ethereum
* Arbitrum
* Optimism
* Polygon

## Dependencies

* [python3](https://www.python.org/downloads) version 3.8 or greater, python3-dev

## Installation

### via `pip`

You can install the latest release via [`pip`](https://pypi.org/project/pip/):

```bash
pip install ape-alchemy
```

### via `setuptools`

You can clone the repository and use [`setuptools`](https://github.com/pypa/setuptools) for the most up-to-date version:

```bash
git clone https://github.com/ApeWorX/ape-alchemy.git
cd ape-alchemy
python3 setup.py install
```

## Quick Usage

First, make sure you have one of the following environment variables set (it doesn't matter which one):

* `WEB3_ALCHEMY_PROJECT_ID`
* `WEB3_ALCHEMY_API_KEY`
* `WEB3_<ecosystem>_<network>_ALCHEMY_PROJECT_ID`
* `WEB3_<ecosystem>_<network>_ALCHEMY_PROJECT_ID`

For example, to use both Arbitrum and Ethereum in the same session, you could set both `WEB3_ARBITRUM_MAINNET_ALCHEMY_PROJECT_ID` and `WEB3_ETHEREUM_MAINNET_ALCHEMY_PROJECT_ID`.

**NOTE**: If using non-Ethereum networks, take care to install the correct plugins, such as `ape-arbitrum`, `ape-optimism`, etc:

```bash
ape plugins install arbitrum
```

Then, either in your current terminal session or in your root RC file (e.g. `.bashrc`), add the following:

```bash
export WEB3_ALCHEMY_PROJECT_ID=MY_API_TOKEN=<value-of-secret-key>
```

To use the Alchemy provider plugin in most commands, set it via the `--network` option:

```bash
ape console --network ethereum:goerli:alchemy
```

To connect to Alchemy from a Python script, use the `networks` top-level manager:

```python
from ape import networks

with networks.parse_network_choice("ethereum:mainnet:alchemy") as provider:
    ...
```

### Transaction Traces

If you are using a paid tier of Alchemy, you have access to both Geth and Parity style traces.
Parity traces are faster and thus are the ones uses in Ethereum receipts' `show_trace()` method:

```python
from ape import networks

alchemy = networks.provider  # Assuming connected to Alchemy
txn_hash = "0x053cba5c12172654d894f66d5670bab6215517a94189a9ffc09bc40a589ec04d"
receipt = alchemy.get_transaction(txn_hash)
receipt.show_trace()  # Prints the Transaction trace
```

To access the raw `CallTree`, do:

```python
from ape import networks

alchemy = networks.provider  # Assuming connected to Alchemy
txn_hash = "0x053cba5c12172654d894f66d5670bab6215517a94189a9ffc09bc40a589ec04d"
call_tree = alchemy.get_call_tree(txn_hash)
```

To learn more about transaction traces, view [Ape's transaction guide](https://docs.apeworx.io/ape/stable/userguides/transactions.html#traces).

**NOTE**: If you require the Geth style traces, you still have access to them via the `get_transaction_trace()` method and utilities from the `evm-trace` library:

```python
from evm_trace import CallType, get_calltree_from_geth_trace

from ape import networks

alchemy = networks.provider  # Assuming connected to Alchemy
txn_hash = "0x053cba5c12172654d894f66d5670bab6215517a94189a9ffc09bc40a589ec04d"
receipt = alchemy.get_transaction(txn_hash)
root_node_kwargs = {
    "gas_cost": receipt.gas_used,
    "gas_limit": receipt.gas_limit,
    "address": receipt.receiver,
    "calldata": receipt.data,
    "value": receipt.value,
    "call_type": CallType.CALL,
    "failed": receipt.failed,
}
trace_frame_iter = alchemy.get_transaction_trace(txn_hash)
call_tree = get_calltree_from_geth_trace(trace_frame_iter)
```


