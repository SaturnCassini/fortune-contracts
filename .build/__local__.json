{"contractTypes":{"fortune":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":true,"name":"receiver","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"receiver","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"MintFortune","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"legend","type":"address"},{"indexed":false,"name":"value","type":"string"},{"components":[{"name":"cardNumber","type":"uint256"},{"name":"tributeAmount","type":"uint256"},{"name":"dateMinted","type":"uint256"},{"name":"randomness","type":"uint256"}],"indexed":false,"name":"fortune","type":"tuple"}],"name":"BurnFortune","type":"event"},{"inputs":[{"name":"_name","type":"string"},{"name":"_symbol","type":"string"},{"name":"_initial_supply","type":"uint256"},{"name":"legendsAddress","type":"address"},{"name":"tributeFee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"name":"_owner","type":"address"}],"name":"fortuneBalance","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"to","type":"address"}],"name":"mintFortune","outputs":[{"name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"burnFortune","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"legend","type":"address"}],"name":"currentCardIdFrom","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLegendBalance","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFortuneChestBalance","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentOwner","outputs":[{"name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"name":"new_owner","type":"address"}],"name":"setOwner","outputs":[{"name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rugPull","outputs":[{"name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawFees","outputs":[{"name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"percentage","type":"uint256"}],"name":"setTributeFee","outputs":[{"name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getTributeFee","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"circulatingSupply","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mintCount","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fortuneContract","outputs":[{"name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tributeBalance","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tributeFee","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feesBalance","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"stateMutability":"view","type":"function"}],"contractName":"fortune","deploymentBytecode":{"bytecode":"0x602061111e600039600051604060208261111e01600039600051116111195760208161111e016000396000518060405260208201818161111e01606039505050602061113e600039600051602060208261111e01600039600051116111195760208161111e016000396000518060a0526020820160208161111e0160003960005160c052505050602061117e6000396000518060a01c6111195760e052346111195760405180600055600081601f0160051c600281116111195780156100d957905b8060051b6060015181600101556001018181186100c1575b50505060a0518060035560c05160045550602061115e600039600051600933602052600052604060002055602061115e60003960005160055560e05160065533601055602061119e600039600051600e553360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602061115e600039600051610100526020610100a3610fa361017561000039610fa3610000f36003361161000c57610e94565b60003560e01c634a92d6ca81186102de5760243610610f91576004358060a01c610f9157604052600933602052600052604060002054156100a457601f6060527f4669727374206275726e20796f75722063757272656e7420666f7274756e650060805260605060605180608001601f826000031636823750506308c379a06020526020604052601f19601f6060510116604401603cfd5b6006546370a0823160605233608052602060606024607c845afa6100cd573d600060003e3d6000fd5b60203d10610f915760609050511561027f5742600b33602052600052604060002054620151808101818110610f915790501161021e5760055460018101818110610f915790506005556009336020526000526040600020805460018101818110610f9157905081555042600b33602052600052604060002055600d5434600e548060640360648111610f91579050808202811583838304141715610f915790509050606481049050808201828110610f915790509050600d5534600e54808202811583838304141715610f915790509050606481049050600f55600733602052600052604060002060085481553460018201554260028201554460038201555060085460018101818110610f91579050600855337f1e5a50cc96c9a55d13bed3550c9d90f8c7deeebe51c827f15123e3bd592649d1600160a052602060a0a2600160a052602060a06102dc566102dc565b601c60a0527f596f752063616e206f6e6c79206d696e74206f6e63652061206461790000000060c05260a05060a0518060c001601f826000031636823750506308c379a06060526020608052601f19601f60a0510116604401607cfd6102dc565b600c6060527f4e6f742061204c6567656e64000000000000000000000000000000000000000060805260605060605180608001601f826000031636823750506308c379a06020526020604052601f19601f6060510116604401603cfd5bf35b34610f915763503f21cc811861031e5760243610610f91576004358060a01c610f9157604052600960405160205260005260406000205460605260206060f35b63dd62ed3e81186103785760443610610f91576004358060a01c610f91576040526024358060a01c610f9157606052600a604051602052600052604060002080606051602052600052604060002090505460805260206080f35b63095ea7b381186103f75760443610610f91576004358060a01c610f9157604052602435600a336020526000526040600020806040516020526000526040600020905055604051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560243560605260206060a3600160605260206060f35b63a9059cbb811861043d5760443610610f91576004358060a01c610f915760e0523360405260e051606052602435608052610430610e9a565b6001610100526020610100f35b6323b872dd81186105575760643610610f91576004358060a01c610f915760e0526024358060a01c610f915761010052604435600a60e05160205260005260406000208033602052600052604060002090505410156104fa576016610120527f496e73756666696369656e7420616c6c6f77616e6365000000000000000000006101405261012050610120518061014001601f826000031636823750506308c379a060e052602061010052601f19601f61012051011660440160fcfd5b600a60e05160205260005260406000208033602052600052604060002090508054604435808203828111610f91579050905081555060e0516040526101005160605260443560805261054a610e9a565b6001610120526020610120f35b639160156381186109365760043610610f91576007336020526000526040600020805460405260018101546060526002810154608052600381015460a052506001600933602052600052604060002054101561060a57601f60c0527f596f7520646f6e742068617665206120666f7274756e6520746f206275726e0060e05260c05060c0518060e001601f826000031636823750506308c379a0608052602060a052601f19601f60c0510116604401609cfd5b60805161012c8101818110610f9157905042116106a357602c60c0527f57616974206174206c656173742035206d696e7574657320746f206275726e2060e0527f796f757220666f7274756e6500000000000000000000000000000000000000006101005260c05060c0518060e001601f826000031636823750506308c379a0608052602060a052601f19601f60c0510116604401609cfd5b60055460018103818111610f915790506005556009336020526000526040600020805460018103818111610f91579050815550606051606051600e548060640360648111610f91579050808202811583838304141715610f915790509050606481049050808203828111610f91579050905060c0524744808201828110610f915790509050608051808201828110610f91579050905060a051808201828110610f915790509050604051808201828110610f9157905090506108278106905060018116905061085257600d5460c051808203828111610f915790509050600d55600060006000600060c051336000f115610f9157337ffa59690ecd4b2307ff53436b582c8720d94cb29c78f067f99af89bfab290b51560a08061012052600460e0527f474f4f44000000000000000000000000000000000000000000000000000000006101005260e0816101200181518082526020830160208301815181525050508051806020830101601f82600003163682375050601f19601f82516020010116905090508101905060405161014052606051610160526080516101805260a0516101a052610120a2610934565b600d5460c051808203828111610f915790509050600d55600060006000600060c051336000f115610f9157337ffa59690ecd4b2307ff53436b582c8720d94cb29c78f067f99af89bfab290b51560a08061012052600360e0527f42414400000000000000000000000000000000000000000000000000000000006101005260e0816101200181518082526020830160208301815181525050508051806020830101601f82600003163682375050601f19601f82516020010116905090508101905060405161014052606051610160526080516101805260a0516101a052610120a25b005b63cba7426f81186109715760243610610f91576004358060a01c610f9157604052600760405160205260005260406000205460605260206060f35b63bc97b0f081186109c35760043610610f915760065460405260206040516370a0823160605233608052602060606024607c845afa6109b5573d600060003e3d6000fd5b60203d10610f915760609050f35b63261f563981186109e05760043610610f91574760405260206040f35b63b387ef9281186109ff5760043610610f915760105460405260206040f35b6313af40358118610aa95760243610610f91576004358060a01c610f91576040523360105418610f91573360105418610a4a57604051601055600160605260206060610aa756610aa7565b600d6060527f4e6f7420746865206f776e65720000000000000000000000000000000000000060805260605060605180608001601f826000031636823750506308c379a06020526020604052601f19601f6060510116604401603cfd5bf35b632190dfd08118610b5e5760043610610f91573360105418610f91574715610f91573360105418610aff576000600060006000476010546000f115610f91576000600d55600160405260206040610b5c56610b5c565b60166040527f4e6f742074686520636f6e7472616374204f776e65720000000000000000000060605260405060405180606001601f826000031636823750506308c379a06000526020602052601f19601f6040510116604401601cfd5bf35b63476343ee8118610c175760043610610f91573360105418610f9157600d5415610f91573360105418610bb8576000600060006000600f546010546000f115610f91576000600f55600160405260206040610c1556610c15565b60166040527f4e6f742074686520636f6e7472616374204f776e65720000000000000000000060605260405060405180606001601f826000031636823750506308c379a06000526020602052601f19601f6040510116604401601cfd5bf35b63e21a59cc8118610cbd5760243610610f91573360105418610f91573360105418610c5e57600a60043511610f9157600435600e55600160405260206040610cbb56610cbb565b60166040527f4e6f742074686520636f6e7472616374204f776e65720000000000000000000060605260405060405180606001601f826000031636823750506308c379a06000526020602052601f19601f6040510116604401601cfd5bf35b63f74948ab8118610cdc5760043610610f9157600e5460405260206040f35b6306fdde038118610d615760043610610f91576020806040528060400160005480825260208201600082601f0160051c60028111610f91578015610d3357905b80600101548160051b840152600101818118610d1c575b505050508051806020830101601f82600003163682375050601f19601f825160200101169050810190506040f35b6395d89b418118610db95760043610610f91576020806040528060400160035480825260208201600454815250508051806020830101601f82600003163682375050601f19601f825160200101169050810190506040f35b639358928b8118610dd85760043610610f915760055460405260206040f35b639659867e8118610df75760043610610f915760085460405260206040f35b636f37b17f8118610e165760043610610f9157600c5460405260206040f35b63789ced798118610e355760043610610f9157600d5460405260206040f35b639249c5898118610e545760043610610f9157600e5460405260206040f35b637518c9658118610e735760043610610f9157600f5460405260206040f35b638da5cb5b8118610e925760043610610f915760105460405260206040f35b505b60006000fd5b60805160096040516020526000526040600020541015610f1157601460a0527f496e73756666696369656e742062616c616e636500000000000000000000000060c05260a05060a0518060c001601f826000031636823750506308c379a06060526020608052601f19601f60a0510116604401607cfd5b600960405160205260005260406000208054608051808203828111610f915790509050815550600960605160205260005260406000208054608051808201828110610f9157905090508155506060516040517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60805160a052602060a0a3565b600080fda165767970657283000307000b005b600080fd"},"dev_messages":{},"devdoc":{"author":"0xcassini.eth","methods":{"allowance(address,address)":{"params":{"_owner":"The address which owns the funds","_spender":"The address which will spend the funds"},"returns":{"_0":"The amount of tokens still available for the spender"}},"approve(address,uint256)":{"details":"Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729","params":{"_spender":"The address which will spend the funds.","_value":"The amount of tokens to be spent."},"returns":{"_0":"Success boolean"}},"burnFortune()":{"details":"You could add an assert here to make sure the owner of the nft is the one who can burn"},"fortuneBalance(address)":{"params":{"_owner":"Address to query the balance of"},"returns":{"_0":"Token balance"}},"getFortuneChestBalance()":{"details":"This is not yet tested and should be used with caution","returns":{"_0":"ETH balance"}},"getLegendBalance()":{"details":"this is not yet tested and should be used with caution"},"getTributeFee()":{"returns":{"_0":"tribute fee"}},"mintFortune(address)":{"details":"You could add an assert here to make sure the owner of the nft is the one who can mint","params":{"to":"who receives the fortune"},"returns":{"_0":"True if the caller addres is a legend"}},"rugPull()":{"details":"this is not yet tested and should be used with caution","returns":{"_0":"Success boolean"}},"setOwner(address)":{"details":"You could add an assert here to make sure the owner of the nft is the one who can burn","params":{"new_owner":"The address that will be the new owner of the contract"},"returns":{"_0":"Success boolean"}},"setTributeFee(uint256)":{"details":"You could add an assert here to make sure the owner of the nft is the one who can burn","params":{"percentage":"The percentage of the tribute that will be taken"},"returns":{"_0":"Success boolean"}},"transfer(address,uint256)":{"details":"Vyper does not allow underflows, so attempting to transfer more tokens than an account has will revert","params":{"_to":"The address to transfer to","_value":"The amount to be transferred"},"returns":{"_0":"Success boolean"}},"transferFrom(address,address,uint256)":{"details":"Vyper does not allow underflows, so attempting to transfer more tokens than an account has will revert","params":{"_from":"The address which you want to send tokens from","_to":"The address which you want to transfer to","_value":"The amount of tokens to be transferred"},"returns":{"_0":"Success boolean"}},"withdrawFees()":{"details":"this is not yet tested and should be used with caution","returns":{"_0":"Success boolean"}}},"title":"Bare-bones Token implementation of the Fortune cards"},"pcmap":{"1002":[129,4,129,46],"1004":[129,4,129,46],"1005":[130,11,130,15],"1046":[148,13,148,26],"1048":[148,13,148,26],"1049":[157,19,157,29],"1053":[157,31,157,34],"1059":[157,36,157,42],"1068":[157,4,157,43],"1071":[157,4,157,43],"1072":[157,4,157,43],"1073":[158,11,158,15],"1116":[162,17,162,32],"1118":[162,17,162,32],"112":[188,43,188,76],"113":[188,43,188,76],"1130":[162,34,162,47],"1133":[162,34,162,47],"1134":[174,31,174,37],"1136":[172,11,172,55],"1137":[172,11,172,26],"1139":[172,27,172,32],"1142":[172,11,172,33],"1144":[172,11,172,33],"1145":[172,11,172,33],"1147":[172,11,172,33],"1148":[172,11,172,33],"115":[188,4,188,76],"1150":[172,11,172,33],"1152":[172,11,172,33],"1154":[172,34,172,44],"1166":[172,11,172,45],"1167":[172,11,172,45],"1168":[172,11,172,55],"1170":[172,4,172,81],"1171":[172,4,172,81],"1174":[172,4,172,81],"1180":[172,57,172,81],"1217":[172,57,172,81],"1218":[172,57,172,81],"1221":[172,4,172,81],"1274":[172,4,172,81],"1275":[173,4,173,19],"1277":[173,20,173,25],"1280":[173,4,173,26],"1282":[173,4,173,26],"1283":[173,4,173,26],"1285":[173,4,173,26],"1286":[173,4,173,26],"1288":[173,4,173,26],"1290":[173,4,173,26],"1292":[173,27,173,37],"1304":[173,4,173,38],"1305":[173,4,173,38],"1306":[173,4,173,48],"1307":[173,4,173,48],"1308":[174,31,174,37],"1312":[173,4,173,48],"1314":[173,4,173,48],"1321":[173,4,173,48],"1322":[173,4,173,48],"1323":[173,4,173,48],"1324":[173,4,173,48],"1325":[173,4,173,48],"1327":[173,4,173,48],"1328":[174,19,174,24],"1334":[174,26,174,29],"1341":[174,31,174,37],"1350":[174,4,174,38],"1353":[174,4,174,38],"1354":[174,4,174,38],"1355":[175,11,175,15],"1387":[218,34,218,50],"1389":[218,51,218,61],"1390":[218,34,218,62],"1392":[218,34,218,62],"1393":[218,34,218,62],"1395":[218,34,218,62],"1396":[218,34,218,62],"1398":[218,34,218,62],"1400":[218,34,218,62],"1401":[218,4,218,62],"1408":[218,4,218,62],"1416":[218,4,218,62],"1424":[218,4,218,62],"1430":[218,4,218,62],"1431":[219,40,219,41],"1433":[219,11,219,24],"1435":[219,25,219,35],"1436":[219,11,219,36],"1438":[219,11,219,36],"1439":[219,11,219,36],"1441":[219,11,219,36],"1442":[219,11,219,36],"1444":[219,11,219,36],"1446":[219,11,219,36],"1449":[219,4,219,76],"1450":[219,4,219,76],"1453":[219,4,219,76],"1458":[219,43,219,76],"1494":[219,43,219,76],"1495":[219,43,219,76],"1497":[219,4,219,76],"1546":[219,4,219,76],"1547":[220,29,220,54],"1549":[220,29,220,60],"1550":[220,57,220,60],"1553":[220,29,220,60],"1555":[220,29,220,60],"1562":[220,29,220,60],"1563":[220,29,220,60],"1564":[220,11,220,26],"1565":[220,11,220,60],"1566":[220,4,220,109],"1569":[220,4,220,109],"1574":[220,63,220,109],"1610":[220,63,220,109],"164":[188,4,188,76],"1647":[220,63,220,109],"1648":[220,63,220,109],"165":[189,7,189,27],"1650":[220,4,220,109],"167":[189,7,189,49],"1699":[220,4,220,109],"1700":[221,4,221,26],"1703":[221,30,221,31],"1714":[221,4,221,31],"1715":[221,4,221,31],"1716":[221,4,221,26],"1719":[222,4,222,17],"1721":[222,18,222,28],"1722":[222,4,222,29],"1724":[222,4,222,29],"1725":[222,4,222,29],"1727":[222,4,222,29],"1728":[222,4,222,29],"1730":[222,4,222,29],"1732":[222,4,222,29],"1735":[222,33,222,34],"1746":[222,4,222,34],"1747":[222,4,222,34],"1750":[222,4,222,34],"1751":[231,22,231,50],"1753":[231,22,231,114],"1754":[231,55,231,83],"1756":[231,55,231,107],"1757":[231,91,231,106],"176":[189,38,189,48],"1761":[231,87,231,90],"1764":[231,87,231,90],"1772":[231,87,231,106],"1773":[231,87,231,106],"1775":[231,55,231,107],"1779":[231,55,231,107],"1790":[231,55,231,107],"1791":[231,55,231,107],"1792":[231,55,231,107],"1793":[231,55,231,107],"1794":[231,110,231,113],"1796":[231,55,231,113],"1798":[231,55,231,113],"1799":[231,55,231,113],"1801":[231,22,231,114],"1803":[231,22,231,114],"1810":[231,22,231,114],"1811":[231,22,231,114],"1812":[231,22,231,114],"1813":[231,22,231,114],"1814":[231,4,231,114],"1816":[231,4,231,114],"1817":[232,10,232,22],"1818":[232,25,232,41],"1831":[232,10,232,41],"1832":[232,10,232,41],"1833":[232,44,232,69],"1837":[232,10,232,69],"1839":[232,10,232,69],"1846":[232,10,232,69],"1847":[232,10,232,69],"1848":[232,10,232,69],"1849":[232,10,232,69],"1850":[232,72,232,97],"1854":[232,10,232,97],"1856":[232,10,232,97],"1863":[232,10,232,97],"1864":[232,10,232,97],"1865":[232,10,232,97],"1866":[232,10,232,97],"1867":[232,100,232,125],"1871":[232,10,232,125],"1873":[232,10,232,125],"188":[189,7,189,49],"1880":[232,10,232,125],"1881":[232,10,232,125],"1882":[232,10,232,125],"1883":[232,10,232,125],"1884":[232,129,232,133],"1887":[232,8,232,133],"1888":[232,8,232,133],"1889":[232,8,232,133],"1890":[232,8,232,133],"1893":[232,7,232,138],"1894":[232,7,232,138],"1895":[232,7,232,138],"1896":[232,7,232,138],"1897":[232,4,241,58],"1900":[232,4,241,58],"1901":[234,8,234,27],"1904":[234,31,234,37],"1919":[234,8,234,37],"1920":[234,8,234,37],"1921":[234,8,234,27],"1932":[235,25,235,31],"1935":[235,13,235,23],"1939":[235,8,235,32],"1940":[235,8,235,32],"1943":[235,8,235,32],"1944":[236,24,236,34],"1945":[236,8,236,59],"1989":[236,36,236,42],"2026":[236,36,236,42],"2027":[236,36,236,42],"2122":[236,8,236,59],"2125":[236,8,236,59],"2129":[232,4,241,58],"2130":[232,4,241,58],"2131":[239,8,239,27],"2134":[239,31,239,37],"2149":[239,8,239,37],"2150":[239,8,239,37],"2151":[239,8,239,27],"216":[189,7,189,49],"2162":[240,25,240,31],"2165":[240,13,240,23],"2169":[240,8,240,32],"217":[189,7,189,49],"2170":[240,8,240,32],"2173":[240,8,240,32],"2174":[241,24,241,34],"2175":[241,8,241,58],"218":[189,7,189,53],"219":[189,7,189,53],"220":[189,4,209,28],"2219":[241,36,241,41],"223":[189,4,209,28],"224":[190,51,190,66],"225":[190,11,190,26],"2256":[241,36,241,41],"2257":[241,36,241,41],"227":[190,27,190,37],"228":[190,11,190,38],"230":[190,11,190,38],"231":[190,11,190,38],"233":[190,11,190,38],"234":[190,11,190,38],"2352":[241,8,241,58],"2355":[241,8,241,58],"236":[190,11,190,38],"238":[190,11,190,38],"2389":[245,22,245,36],"2391":[245,22,245,36],"2392":[250,11,250,27],"2394":[250,28,250,34],"2397":[250,11,250,35],"2399":[250,11,250,35],"240":[190,41,190,48],"2400":[250,11,250,35],"2402":[250,11,250,35],"2403":[250,11,250,35],"2405":[250,11,250,35],"2407":[250,11,250,35],"2437":[259,31,259,51],"2442":[259,4,259,51],"2445":[260,11,260,18],"2447":[260,11,260,40],"2456":[260,29,260,39],"2468":[260,11,260,40],"2496":[260,11,260,40],"2497":[260,11,260,40],"2519":[270,11,270,23],"253":[190,11,190,48],"254":[190,11,190,48],"2548":[280,11,280,21],"255":[190,11,190,66],"256":[190,8,207,23],"259":[190,8,207,23],"2590":[283,13,283,30],"2592":[283,13,283,30],"2593":[291,25,291,35],"2594":[291,11,291,21],"2596":[291,11,291,35],"2597":[291,11,291,35],"2598":[291,4,291,35],"260":[193,12,193,34],"2601":[291,4,291,35],"2602":[292,21,292,31],"2603":[292,7,292,17],"2605":[292,7,292,31],"2606":[292,7,292,31],"2607":[292,4,296,29],"2610":[292,4,296,29],"2611":[293,21,293,30],"2614":[293,8,293,18],"2617":[294,15,294,19],"263":[193,38,193,39],"2633":[292,4,296,29],"2634":[292,4,296,29],"2639":[296,14,296,29],"2675":[296,14,296,29],"2676":[296,14,296,29],"2678":[296,8,296,29],"2697":[296,8,296,29],"2705":[296,8,296,29],"2710":[296,8,296,29],"2726":[296,8,296,29],"274":[193,12,193,39],"2749":[306,25,306,35],"275":[193,12,193,39],"2750":[306,11,306,21],"2752":[306,11,306,35],"2753":[306,11,306,35],"2754":[306,4,306,35],"2757":[306,4,306,35],"2758":[307,11,307,23],"2759":[307,11,307,27],"276":[193,12,193,34],"2760":[307,4,307,27],"2763":[307,4,307,27],"2764":[308,21,308,31],"2765":[308,7,308,17],"2767":[308,7,308,31],"2768":[308,7,308,31],"2769":[308,4,313,38],"2772":[308,4,313,38],"2781":[309,25,309,37],"2782":[309,13,309,23],"2788":[309,8,309,38],"2789":[309,8,309,38],"279":[194,12,194,25],"2792":[309,8,309,38],"2793":[310,30,310,31],"2795":[310,8,310,27],"2798":[311,15,311,19],"281":[194,26,194,36],"2814":[308,4,313,38],"2815":[308,4,313,38],"282":[194,12,194,37],"2820":[313,14,313,38],"284":[194,12,194,37],"285":[194,12,194,37],"2856":[313,14,313,38],"2857":[313,14,313,38],"2859":[313,8,313,38],"287":[194,12,194,37],"2878":[313,8,313,38],"288":[194,12,194,37],"2886":[313,8,313,38],"2891":[313,8,313,38],"290":[194,12,194,37],"2907":[313,8,313,38],"292":[194,12,194,37],"2930":[323,25,323,35],"2931":[323,11,323,21],"2933":[323,11,323,35],"2934":[323,11,323,35],"2935":[323,4,323,35],"2938":[323,4,323,35],"2939":[324,11,324,30],"2941":[324,11,324,34],"2942":[324,11,324,34],"2943":[324,4,324,34],"2946":[324,4,324,34],"2947":[325,21,325,31],"2948":[325,7,325,17],"295":[194,41,194,42],"2950":[325,7,325,31],"2951":[325,7,325,31],"2952":[325,4,330,38],"2955":[325,4,330,38],"2964":[326,25,326,41],"2967":[326,13,326,23],"2973":[326,8,326,42],"2974":[326,8,326,42],"2977":[326,8,326,42],"2978":[327,27,327,28],"2980":[327,8,327,24],"2983":[328,15,328,19],"2999":[325,4,330,38],"3000":[325,4,330,38],"3005":[330,14,330,38],"3041":[330,14,330,38],"3042":[330,14,330,38],"3044":[330,8,330,38],"306":[194,12,194,42],"3063":[330,8,330,38],"307":[194,12,194,42],"3071":[330,8,330,38],"3076":[330,8,330,38],"3092":[330,8,330,38],"310":[194,12,194,42],"311":[195,42,195,57],"3115":[341,25,341,35],"3116":[341,11,341,21],"3118":[341,11,341,35],"3119":[341,11,341,35],"312":[195,12,195,27],"3120":[341,4,341,35],"3123":[341,4,341,35],"3124":[342,21,342,31],"3125":[342,7,342,17],"3127":[342,7,342,31],"3128":[342,7,342,31],"3129":[342,4,347,38],"3132":[342,4,347,38],"3133":[343,29,343,31],"3135":[344,26,344,36],"3137":[343,15,343,31],"3139":[343,8,343,31],"314":[195,28,195,38],"3142":[343,8,343,31],"3143":[344,26,344,36],"3146":[344,8,344,23],"3148":[344,8,344,36],"3149":[345,15,345,19],"315":[195,12,195,39],"3165":[342,4,347,38],"3166":[342,4,347,38],"317":[195,12,195,39],"3171":[347,14,347,38],"318":[195,12,195,39],"320":[195,12,195,39],"3207":[347,14,347,38],"3208":[347,14,347,38],"321":[195,12,195,39],"3210":[347,8,347,38],"3229":[347,8,347,38],"323":[195,12,195,39],"3237":[347,8,347,38],"3242":[347,8,347,38],"325":[195,12,195,39],"3258":[347,8,347,38],"327":[196,12,196,31],"3281":[356,11,356,26],"329":[196,12,196,74],"330":[196,35,196,44],"331":[196,52,196,67],"335":[196,48,196,51],"338":[196,48,196,51],"346":[196,48,196,67],"347":[196,48,196,67],"366":[196,35,196,68],"367":[196,35,196,68],"368":[196,71,196,74],"370":[196,35,196,74],"372":[196,35,196,74],"373":[196,35,196,74],"3738":[134,0,144,36],"3739":[141,35,141,41],"3742":[141,11,141,24],"3744":[141,25,141,30],"3747":[141,11,141,31],"3749":[141,11,141,31],"375":[196,12,196,74],"3750":[141,11,141,31],"3752":[141,11,141,31],"3753":[141,11,141,31],"3755":[141,11,141,31],"3757":[141,11,141,31],"3760":[141,4,141,65],"3761":[141,4,141,65],"3764":[141,4,141,65],"3769":[141,43,141,65],"377":[196,12,196,74],"3805":[141,43,141,65],"3806":[141,43,141,65],"3808":[141,4,141,65],"384":[196,12,196,74],"385":[196,12,196,74],"3857":[141,4,141,65],"3858":[142,4,142,17],"386":[196,12,196,74],"3860":[142,18,142,23],"3863":[142,4,142,24],"3865":[142,4,142,24],"3866":[142,4,142,24],"3868":[142,4,142,24],"3869":[142,4,142,24],"387":[196,12,196,74],"3871":[142,4,142,24],"3873":[142,4,142,24],"3876":[142,28,142,34],"388":[196,12,196,31],"3891":[142,4,142,34],"3892":[142,4,142,34],"3895":[142,4,142,34],"3896":[143,4,143,17],"3898":[143,18,143,21],"390":[196,12,196,74],"3901":[143,4,143,22],"3903":[143,4,143,22],"3904":[143,4,143,22],"3906":[143,4,143,22],"3907":[143,4,143,22],"3909":[143,4,143,22],"391":[197,31,197,40],"3911":[143,4,143,22],"3914":[143,26,143,32],"392":[197,43,197,58],"3929":[143,4,143,32],"3930":[143,4,143,32],"3933":[143,4,143,32],"3934":[144,24,144,27],"3936":[144,4,144,36],"3937":[144,17,144,22],"3939":[144,4,144,36],"3940":[144,4,144,36],"3973":[144,29,144,35],"3981":[144,4,144,36],"3983":[144,4,144,36],"413":[197,31,197,58],"414":[197,31,197,58],"415":[197,59,197,62],"417":[197,31,197,62],"419":[197,31,197,62],"420":[197,31,197,62],"421":[197,12,197,28],"423":[197,12,197,62],"424":[198,12,198,28],"426":[198,29,198,39],"427":[198,12,198,40],"429":[198,12,198,40],"430":[198,12,198,40],"432":[198,12,198,40],"433":[198,12,198,40],"435":[198,12,198,40],"437":[198,12,198,40],"438":[199,28,199,42],"441":[198,12,204,13],"443":[200,31,200,40],"446":[198,12,204,13],"449":[201,28,201,43],"452":[198,12,204,13],"455":[202,28,202,44],"458":[198,12,204,13],"461":[198,12,204,13],"462":[205,12,205,26],"465":[205,30,205,31],"476":[205,12,205,31],"477":[205,12,205,31],"478":[205,12,205,26],"481":[206,28,206,38],"482":[206,12,206,107],"49":[179,16,179,27],"51":[179,16,179,27],"515":[206,41,206,107],"52":[188,11,188,24],"522":[206,12,206,107],"524":[206,12,206,107],"525":[207,19,207,23],"54":[188,25,188,35],"541":[190,8,207,23],"542":[190,8,207,23],"547":[191,18,191,48],"55":[188,11,188,36],"57":[188,11,188,36],"58":[188,11,188,36],"583":[191,18,191,48],"584":[191,18,191,48],"586":[191,12,191,48],"60":[188,11,188,36],"605":[191,12,191,48],"61":[188,11,188,36],"613":[191,12,191,48],"618":[191,12,191,48],"63":[188,11,188,36],"634":[191,12,191,48],"638":[189,4,209,28],"639":[189,4,209,28],"644":[209,14,209,28],"65":[188,11,188,36],"66":[188,11,188,41],"67":[188,11,188,41],"68":[188,4,188,76],"680":[209,14,209,28],"681":[209,14,209,28],"683":[209,8,209,28],"702":[209,8,209,28],"71":[188,4,188,76],"710":[209,8,209,28],"715":[209,8,209,28],"731":[209,8,209,28],"76":[188,43,188,76],"770":[95,19,95,34],"772":[95,19,95,34],"773":[101,11,101,24],"775":[101,25,101,31],"778":[101,11,101,32],"780":[101,11,101,32],"781":[101,11,101,32],"783":[101,11,101,32],"784":[101,11,101,32],"786":[101,11,101,32],"788":[101,11,101,32],"829":[106,14,106,30],"831":[106,14,106,30],"843":[106,32,106,50],"845":[106,32,106,50],"846":[113,11,113,26],"848":[113,27,113,33],"851":[113,11,113,34],"853":[113,11,113,34],"854":[113,11,113,34],"856":[113,11,113,34],"857":[113,11,113,34],"859":[113,11,113,34],"861":[113,11,113,34],"863":[113,35,113,43],"877":[113,11,113,44],"878":[113,11,113,44],"919":[117,12,117,30],"921":[117,12,117,30],"922":[129,39,129,45],"925":[128,4,128,19],"927":[128,20,128,30],"928":[128,4,128,31],"930":[128,4,128,31],"931":[128,4,128,31],"933":[128,4,128,31],"934":[128,4,128,31],"936":[128,4,128,31],"938":[128,4,128,31],"940":[128,32,128,40],"954":[128,4,128,41],"955":[128,4,128,41],"956":[128,4,128,50],"957":[129,29,129,37],"959":[129,4,129,46],"960":[129,17,129,27],"961":[129,4,129,46],"994":[129,39,129,45]},"runtimeBytecode":{"bytecode":"0x6003361161000c57610e94565b60003560e01c634a92d6ca81186102de5760243610610f91576004358060a01c610f9157604052600933602052600052604060002054156100a457601f6060527f4669727374206275726e20796f75722063757272656e7420666f7274756e650060805260605060605180608001601f826000031636823750506308c379a06020526020604052601f19601f6060510116604401603cfd5b6006546370a0823160605233608052602060606024607c845afa6100cd573d600060003e3d6000fd5b60203d10610f915760609050511561027f5742600b33602052600052604060002054620151808101818110610f915790501161021e5760055460018101818110610f915790506005556009336020526000526040600020805460018101818110610f9157905081555042600b33602052600052604060002055600d5434600e548060640360648111610f91579050808202811583838304141715610f915790509050606481049050808201828110610f915790509050600d5534600e54808202811583838304141715610f915790509050606481049050600f55600733602052600052604060002060085481553460018201554260028201554460038201555060085460018101818110610f91579050600855337f1e5a50cc96c9a55d13bed3550c9d90f8c7deeebe51c827f15123e3bd592649d1600160a052602060a0a2600160a052602060a06102dc566102dc565b601c60a0527f596f752063616e206f6e6c79206d696e74206f6e63652061206461790000000060c05260a05060a0518060c001601f826000031636823750506308c379a06060526020608052601f19601f60a0510116604401607cfd6102dc565b600c6060527f4e6f742061204c6567656e64000000000000000000000000000000000000000060805260605060605180608001601f826000031636823750506308c379a06020526020604052601f19601f6060510116604401603cfd5bf35b34610f915763503f21cc811861031e5760243610610f91576004358060a01c610f9157604052600960405160205260005260406000205460605260206060f35b63dd62ed3e81186103785760443610610f91576004358060a01c610f91576040526024358060a01c610f9157606052600a604051602052600052604060002080606051602052600052604060002090505460805260206080f35b63095ea7b381186103f75760443610610f91576004358060a01c610f9157604052602435600a336020526000526040600020806040516020526000526040600020905055604051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560243560605260206060a3600160605260206060f35b63a9059cbb811861043d5760443610610f91576004358060a01c610f915760e0523360405260e051606052602435608052610430610e9a565b6001610100526020610100f35b6323b872dd81186105575760643610610f91576004358060a01c610f915760e0526024358060a01c610f915761010052604435600a60e05160205260005260406000208033602052600052604060002090505410156104fa576016610120527f496e73756666696369656e7420616c6c6f77616e6365000000000000000000006101405261012050610120518061014001601f826000031636823750506308c379a060e052602061010052601f19601f61012051011660440160fcfd5b600a60e05160205260005260406000208033602052600052604060002090508054604435808203828111610f91579050905081555060e0516040526101005160605260443560805261054a610e9a565b6001610120526020610120f35b639160156381186109365760043610610f91576007336020526000526040600020805460405260018101546060526002810154608052600381015460a052506001600933602052600052604060002054101561060a57601f60c0527f596f7520646f6e742068617665206120666f7274756e6520746f206275726e0060e05260c05060c0518060e001601f826000031636823750506308c379a0608052602060a052601f19601f60c0510116604401609cfd5b60805161012c8101818110610f9157905042116106a357602c60c0527f57616974206174206c656173742035206d696e7574657320746f206275726e2060e0527f796f757220666f7274756e6500000000000000000000000000000000000000006101005260c05060c0518060e001601f826000031636823750506308c379a0608052602060a052601f19601f60c0510116604401609cfd5b60055460018103818111610f915790506005556009336020526000526040600020805460018103818111610f91579050815550606051606051600e548060640360648111610f91579050808202811583838304141715610f915790509050606481049050808203828111610f91579050905060c0524744808201828110610f915790509050608051808201828110610f91579050905060a051808201828110610f915790509050604051808201828110610f9157905090506108278106905060018116905061085257600d5460c051808203828111610f915790509050600d55600060006000600060c051336000f115610f9157337ffa59690ecd4b2307ff53436b582c8720d94cb29c78f067f99af89bfab290b51560a08061012052600460e0527f474f4f44000000000000000000000000000000000000000000000000000000006101005260e0816101200181518082526020830160208301815181525050508051806020830101601f82600003163682375050601f19601f82516020010116905090508101905060405161014052606051610160526080516101805260a0516101a052610120a2610934565b600d5460c051808203828111610f915790509050600d55600060006000600060c051336000f115610f9157337ffa59690ecd4b2307ff53436b582c8720d94cb29c78f067f99af89bfab290b51560a08061012052600360e0527f42414400000000000000000000000000000000000000000000000000000000006101005260e0816101200181518082526020830160208301815181525050508051806020830101601f82600003163682375050601f19601f82516020010116905090508101905060405161014052606051610160526080516101805260a0516101a052610120a25b005b63cba7426f81186109715760243610610f91576004358060a01c610f9157604052600760405160205260005260406000205460605260206060f35b63bc97b0f081186109c35760043610610f915760065460405260206040516370a0823160605233608052602060606024607c845afa6109b5573d600060003e3d6000fd5b60203d10610f915760609050f35b63261f563981186109e05760043610610f91574760405260206040f35b63b387ef9281186109ff5760043610610f915760105460405260206040f35b6313af40358118610aa95760243610610f91576004358060a01c610f91576040523360105418610f91573360105418610a4a57604051601055600160605260206060610aa756610aa7565b600d6060527f4e6f7420746865206f776e65720000000000000000000000000000000000000060805260605060605180608001601f826000031636823750506308c379a06020526020604052601f19601f6060510116604401603cfd5bf35b632190dfd08118610b5e5760043610610f91573360105418610f91574715610f91573360105418610aff576000600060006000476010546000f115610f91576000600d55600160405260206040610b5c56610b5c565b60166040527f4e6f742074686520636f6e7472616374204f776e65720000000000000000000060605260405060405180606001601f826000031636823750506308c379a06000526020602052601f19601f6040510116604401601cfd5bf35b63476343ee8118610c175760043610610f91573360105418610f9157600d5415610f91573360105418610bb8576000600060006000600f546010546000f115610f91576000600f55600160405260206040610c1556610c15565b60166040527f4e6f742074686520636f6e7472616374204f776e65720000000000000000000060605260405060405180606001601f826000031636823750506308c379a06000526020602052601f19601f6040510116604401601cfd5bf35b63e21a59cc8118610cbd5760243610610f91573360105418610f91573360105418610c5e57600a60043511610f9157600435600e55600160405260206040610cbb56610cbb565b60166040527f4e6f742074686520636f6e7472616374204f776e65720000000000000000000060605260405060405180606001601f826000031636823750506308c379a06000526020602052601f19601f6040510116604401601cfd5bf35b63f74948ab8118610cdc5760043610610f9157600e5460405260206040f35b6306fdde038118610d615760043610610f91576020806040528060400160005480825260208201600082601f0160051c60028111610f91578015610d3357905b80600101548160051b840152600101818118610d1c575b505050508051806020830101601f82600003163682375050601f19601f825160200101169050810190506040f35b6395d89b418118610db95760043610610f91576020806040528060400160035480825260208201600454815250508051806020830101601f82600003163682375050601f19601f825160200101169050810190506040f35b639358928b8118610dd85760043610610f915760055460405260206040f35b639659867e8118610df75760043610610f915760085460405260206040f35b636f37b17f8118610e165760043610610f9157600c5460405260206040f35b63789ced798118610e355760043610610f9157600d5460405260206040f35b639249c5898118610e545760043610610f9157600e5460405260206040f35b637518c9658118610e735760043610610f9157600f5460405260206040f35b638da5cb5b8118610e925760043610610f915760105460405260206040f35b505b60006000fd5b60805160096040516020526000526040600020541015610f1157601460a0527f496e73756666696369656e742062616c616e636500000000000000000000000060c05260a05060a0518060c001601f826000031636823750506308c379a06060526020608052601f19601f60a0510116604401607cfd5b600960405160205260005260406000208054608051808203828111610f915790509050815550600960605160205260005260406000208054608051808201828110610f9157905090508155506060516040517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60805160a052602060a0a3565b600080fda165767970657283000307000b"},"sourceId":"fortune.vy","sourcemap":"-1:-1:0:-;;;;:::-;;:::-;:::-;;;;;;;;;:::-;;;;;:::-;;;;;;;:::-;6029:11;;6462:13;6476:10;6462:25;;;;;;;:30;;6455:72;:::-;-1:-1;;6494:33;-1:-1;;6494:33;;6455:72;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6455:72::-;6535:20;:42;-1:-1;;;6566:10;-1:-1;;;;;;6535:42;-1:-1;;;:::-;;;;;;;;:::-;;;;;:::-;;6535:42;;:46;;6532:1973;:::-;6676:15;6636;6652:10;6636:27;;;;;;;-1:-1;6666:7;-1:-1;;;;;;:::-;6636:37;;:55;6633:1769;:::-;6940:22;-1:-1;6966:1;-1:-1;;;;;;:::-;6940:27;;:22;-1:-1;7044:13;7058:10;7044:25;;;;;;;-1:-1;;7073:1;-1:-1;;;;;;:::-;7044:30;;-1:-1;;7044:30;7184:15;7154;7170:10;7154:27;;;;;;;-1:-1;7271:19;:62;7294:9;7311:15;-1:-1;;7307:3;-1:-1;7307:3;-1:-1;;;:::-;7307:19;;-1:-1;;;;;;;;;;;;;:::-;;;7294:33;;7330:3;7294:39;-1:-1;7294:39;;-1:-1;7271:62;-1:-1;7271:62;-1:-1;;;:::-;7271:62;;;;:19;:62;7410:9;7422:15;-1:-1;;;;;;;;;;;;;;:::-;;;7410:27;;7438:3;7410:31;-1:-1;7410:31;;7391:16;:50;7495:16;7512:10;7495:28;;;;;;;7622:14;-1:-1;7495:657;-1:-1;7735:9;-1:-1;7495:657;-1:-1;;7872:15;-1:-1;7495:657;-1:-1;;7995:16;-1:-1;7495:657;-1:-1;;7495:657;8165:14;-1:-1;8183:1;-1:-1;;;;;;:::-;8165:19;;:14;-1:-1;8299:10;8283:95;8312:66;-1:-1;;;8283:95;;8398:4;-1:-1;;;;;:::-;;6633:1769::-;:::-;-1:-1;;6758:30;-1:-1;;6758:30;;6752:36;-1:-1;;;;;;;;;;;;;;6752:36;-1:-1;;6752:36;-1:-1;;6752:36;-1:-1;;;;;;;;;;6752:36;-1:-1;6532:1973::-;:::-;-1:-1;;8491:14;-1:-1;;8491:14;;8485:20;-1:-1;;;;;;;;;;;;;;8485:20;-1:-1;;8485:20;-1:-1;;8485:20;-1:-1;;;;;;;;;;8485:20;-1:-1::-;;:::-;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;2859:15;;3054:13;3068:6;-1:-1;3054:21;;;;;;;-1:-1;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;3108:16;;-1:-1;;;;;;:::-;3126:18;;3446:15;3462:6;-1:-1;3446:23;;;;;;;-1:-1;3470:8;-1:-1;;;;;;;;3446:33;;-1:-1;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;3515:18;;4319:6;-1:-1;4233:15;4249:10;4233:27;;;;;;;-1:-1;4261:8;-1:-1;;;;;;;;4233:37;;:46;4309:8;4284:42;4297:10;4284:42;4319:6;-1:-1;;;;4284:42;;4338:4;-1:-1;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;4885:13;;5259:10;-1:-1;;5271:3;-1:-1;;;5276:6;-1:-1;;;;5244:39;:::i;:::-;5295:4;-1:-1;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;5340:15;;-1:-1;;;;;;:::-;5357:13;;5969:6;5818:44;:15;5834:5;-1:-1;5818:22;;;;;;;-1:-1;5841:10;-1:-1;;;;;;;5818:34;;:44;-1:-1;5811:77;;:::-;-1:-1;;5864:24;-1:-1;;5864:24;;5811:77;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5811:77::-;5893:15;5909:5;-1:-1;5893:22;;;;;;;-1:-1;5916:10;-1:-1;;;;;;;5893:34;;:44;;5969:6;-1:-1;;5893:44;-1:-1;5893:44;-1:-1;;;:::-;5893:44;;;;;-1:-1;5893:44;5957:5;-1:-1;;;5964:3;-1:-1;;;5969:6;-1:-1;;;;5942:34;:::i;:::-;5988:4;-1:-1;;;;;:::-;;;;;:::-;;;;;:::-;8905:16;8922:10;8905:28;;;;;;;8875:58;-1:-1;;;;8875:58;-1:-1;;;;;8875:58;-1:-1;;;;;8875:58;-1:-1;;;;8875:58;8974:1;8945:13;8959:10;8945:25;;;;;;;-1:-1;;8938:72;;:::-;-1:-1;;8977:33;-1:-1;;8977:33;;8938:72;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8938:72::-;9040:25;:31;9068:3;9040:31;-1:-1;9040:31;-1:-1;;;:::-;9040:31;;9022:15;:49;9015:105;:::-;-1:-1;;9074:46;-1:-1;;9074:46;-1:-1;;9074:46;;9015:105;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9015:105::-;9125:22;-1:-1;9151:1;-1:-1;;;;;;:::-;9125:27;;:22;-1:-1;9157:13;9171:10;9157:25;;;;;;;-1:-1;;9186:1;-1:-1;;;;;;:::-;9157:30;;-1:-1;;9157:30;9753:28;:92;9786:28;:52;9822:15;-1:-1;;9818:3;-1:-1;9818:3;-1:-1;;;:::-;9818:19;;-1:-1;9786:52;-1:-1;;;9786:52;-1:-1;;;;;;;:::-;9786:52;;;;9841:3;9786:58;-1:-1;9786:58;;-1:-1;9753:92;-1:-1;9753:92;-1:-1;;;:::-;9753:92;;;;9735:110;;9856:12;9871:16;-1:-1;;;;;;;:::-;;;9856:31;;9890:25;-1:-1;;9856:59;-1:-1;9856:59;-1:-1;;;:::-;9856:59;;;;9918:25;-1:-1;;9856:87;-1:-1;9856:87;-1:-1;;;:::-;9856:87;;;;9946:25;-1:-1;;9856:115;-1:-1;9856:115;-1:-1;;;:::-;9856:115;;;;9975:4;9854:125;;;;-1:-1;9853:131;;;;9850:897;:::-;10073:19;-1:-1;10096:6;-1:-1;;;;;;;;:::-;;;10073:29;;:19;-1:-1;;;;;10203:6;-1:-1;10191:10;-1:-1;;10186:24;;:::-;10302:10;10286:51;-1:-1;;;;;;10314:6;-1:-1;;10314:6;;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10286:51;;-1:-1;9850:897::-;:::-;10484:19;-1:-1;10507:6;-1:-1;;;;;;;;:::-;;;10484:29;;:19;-1:-1;;;;;10614:6;-1:-1;10602:10;-1:-1;;10597:24;;:::-;10713:10;10697:50;-1:-1;;;;;;10725:5;-1:-1;;10725:5;;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10697:50;;-1:-1::-;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;10842:14;;11040:16;11057:6;-1:-1;11040:24;;;;;;;-1:-1;;;;;;:::-;;;;;:::-;;;;;:::-;11304:20;-1:-1;;11277:47;-1:-1;11336:7;:29;-1:-1;;;11354:10;-1:-1;;;;;;11336:29;-1:-1;;;:::-;;;;;;;;:::-;;;;;:::-;;11336:29;;-1:-1;:::-;;;;;:::-;;;;;:::-;11615:12;-1:-1;;;;;:::-;;;;;:::-;;;;;:::-;11789:10;-1:-1;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;11829:17;;12226:10;12212;:24;;12205:31;:::-;12298:10;12284;:24;;12281:156;:::-;12339:9;-1:-1;12326:10;-1:-1;12393:4;-1:-1;;;;;:::-;;12281:156::-;:::-;-1:-1;;12422:15;-1:-1;;12422:15;;12416:21;-1:-1;;;;;;;;;;;;;;12416:21;-1:-1;;12416:21;-1:-1;;12416:21;-1:-1;;;;;;;;;;12416:21;-1:-1::-;;:::-;;;;;:::-;;;;;:::-;12721:10;12707;:24;;12700:31;:::-;12743:12;:16;12736:23;:::-;12781:10;12767;:24;;12764:168;:::-;-1:-1;;;;12818:12;12806:10;-1:-1;;;12801:30;;:::-;12862:1;12840:19;-1:-1;12879:4;-1:-1;;;;;:::-;;12764:168::-;:::-;-1:-1;;12908:24;-1:-1;;12908:24;;12902:30;-1:-1;;;;;;;;;;;;;;12902:30;-1:-1;;12902:30;-1:-1;;12902:30;-1:-1;;;;;;;;;;12902:30;-1:-1::-;;:::-;;;;;:::-;;;;;:::-;13166:10;13152;:24;;13145:31;:::-;13188:19;:23;;13181:30;:::-;13233:10;13219;:24;;13216:169;:::-;-1:-1;;;;13270:16;-1:-1;13258:10;-1:-1;;;13253:34;;:::-;13315:1;13296:16;-1:-1;13332:4;-1:-1;;;;;:::-;;13216:169::-;:::-;-1:-1;;13361:24;-1:-1;;13361:24;;13355:30;-1:-1;;;;;;;;;;;;;;13355:30;-1:-1;;13355:30;-1:-1;;13355:30;-1:-1;;;;;;;;;;13355:30;-1:-1::-;;:::-;;;;;:::-;;;;;:::-;13793:10;13779;:24;;13772:31;:::-;13860:10;13846;:24;;13843:278;:::-;13953:2;14027:10;13939:16;-1:-1;13932:23;:::-;14027:10;-1:-1;14009:15;:28;14068:4;-1:-1;;;;;:::-;;13843:278::-;:::-;-1:-1;;14097:24;-1:-1;;14097:24;;14091:30;-1:-1;;;;;;;;;;;;;;14091:30;-1:-1;;14091:30;-1:-1;;14091:30;-1:-1;;;;;;;;;;14091:30;-1:-1::-;;:::-;;;;;:::-;;;;;:::-;14327:15;-1:-1;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::-;;;;:::-;;:::-;;;;;;;;;;;;;;;;;:::-;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;:::-;;;;4355:493::-;4713:6;-1:-1;4689:13;4703:5;-1:-1;4689:20;;;;;;;-1:-1;;4682:61;;:::-;-1:-1;;4721:22;-1:-1;;4721:22;;4682:61;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4682:61::-;4748:13;4762:5;-1:-1;4748:20;;;;;;;-1:-1;;4772:6;-1:-1;;;;;;;;:::-;;;4748:30;;-1:-1;;4748:30;4783:13;4797:3;-1:-1;4783:18;;;;;;;-1:-1;;4805:6;-1:-1;;;;;;;;:::-;;;4783:28;;-1:-1;;4783:28;4836:3;4816:32;4829:5;4816:32;;4841:6;-1:-1;;;;4816:32;;-1:-1::-;:::-;;;","userdoc":{"methods":{"allowance(address,address)":{"notice":"Getter to check the amount of tokens that an owner allowed to a spender"},"approve(address,uint256)":{"notice":"Approve an address to spend the specified amount of tokens on behalf of msg.sender"},"burnFortune()":{"notice":"Burn a fortune from an specified address"},"currentCardIdFrom(address)":{"notice":"Getter to check the current cardNumber of an address This is useful because legends can only have one fortune at a time"},"currentOwner()":{"notice":"Getter to check the current owner of the fortune chest"},"fortuneBalance(address)":{"notice":"Getter to check the current balance of an address"},"getFortuneChestBalance()":{"notice":"Getter to check the current ETH balance of the fortune chest"},"getLegendBalance()":{"notice":"Getter to check the current balance of an address"},"getTributeFee()":{"notice":"Getter to check the current tribute fee"},"mintFortune(address)":{"notice":"Mint a fortune to an specified address which holds the nft"},"rugPull()":{"notice":"Withdraw all the ETH from the fortune chest"},"setOwner(address)":{"notice":"Setter to set the owner of the fortune chest"},"setTributeFee(uint256)":{"notice":"Setter to set the tribute fee"},"transfer(address,uint256)":{"notice":"Transfer tokens to a specified address"},"transferFrom(address,address,uint256)":{"notice":"Transfer tokens from one address to another"},"withdrawFees()":{"notice":"Withdraw all the fees from the fortune chest"}},"notice":"This is a bare-bones implementation of the Fortune cards It is not meant to be used in production, but rather as a starting point for the final implementation Owners of the Legends NFT can mint an unrevealed Fortune card as an ERC20 to any address, and pay an upfront tribute. The Fortune cards can be burned to generate an event of GOOD or BAD fortune. The event is a string of 4 characters, which can be used by the frontend to display a message, and for the game to build upon it later. The Fortune cards can be traded, but only the owner of the NFT can mint a new Fortune card. When the FORTUNE card is burnt, the burner can get back their initial tribute minus a fee. There is a withdraw function that can only be called by the owner of the contract. This is to allow the owner to withdraw the ETH tributes."}},"nft_mocked_contract":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"}],"name":"Burn","type":"event"},{"inputs":[{"name":"name","type":"string"},{"name":"symbol","type":"string"},{"name":"initialSupply","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"name":"to","type":"address"}],"name":"mintNFT","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"name":"cardOwner","type":"address"}],"name":"burnNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"legend","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"initialSupply","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"name":"arg0","type":"address"}],"name":"balances","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"supply","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"contractName":"nft_mocked_contract","deploymentBytecode":{"bytecode":"0x60206103be60003960005160406020826103be01600039600051116103b9576020816103be01600039600051806040526020820181816103be0160603950505060206103de60003960005160206020826103be01600039600051116103b9576020816103be016000396000518060a052602082016020816103be0160003960005160c052505050346103b95760405180600055600081601f0160051c600281116103b95780156100c357905b8060051b6060015181600101556001018181186100ab575b50505060a0518060035560c0516004555060206103fe6000396000516007556102c46100f4610000396102c4610000f36003361161000c576102ac565b60003560e01c6354ba0f27811861009357602436106102b2576004358060a01c6102b257604052600754600181018181106102b2579050600755600660405160205260005260406000208054600181018181106102b25790508155506040517f3c3284d117c92d0b1699230960384e794dcba184cc48ff114fe4fed20c9b056560006060a2005b346102b25763f83efec8811861011957602436106102b2576004358060a01c6102b257604052600754600181038181116102b2579050600755600660405160205260005260406000208054600181038181116102b25790508155506040517fe22de1457cb61fb61b60176bc4235a9abd19466126b46692bc14fc573f09924960006060a2005b6370a08231811861015457602436106102b2576004358060a01c6102b257604052600660405160205260005260406000205460605260206060f35b6306fdde0381186101d957600436106102b2576020806040528060400160005480825260208201600082601f0160051c600281116102b25780156101ab57905b80600101548160051b840152600101818118610194575b505050508051806020830101601f82600003163682375050601f19601f825160200101169050810190506040f35b6395d89b41811861023157600436106102b2576020806040528060400160035480825260208201600454815250508051806020830101601f82600003163682375050601f19601f825160200101169050810190506040f35b63378dc3dc811861025057600436106102b25760055460405260206040f35b6327e235e3811861028b57602436106102b2576004358060a01c6102b257604052600660405160205260005260406000205460605260206060f35b63047fc9aa81186102aa57600436106102b25760075460405260206040f35b505b60006000fd5b600080fda165767970657283000307000b005b600080fd"},"dev_messages":{},"devdoc":{"author":"0xcassini.eth","details":"This contract replicates the functionality of the ERC721 standard, but with a few differences. It is intended to be used for testing purposes only.","methods":{"__init__(string,string,uint256)":{"params":{"initialSupply":"The initial supply of the token","name":"The name of the token","symbol":"The symbol of the token"}},"balanceOf(address)":{"params":{"legend":"The address to get the balance of"}},"burnNFT(address)":{"params":{"cardOwner":"The address to burn the token from"}},"mintNFT(address)":{"params":{"to":"The address to mint the token to"}}},"title":"Mock Saturn Series ERC721 Token"},"pcmap":{"100":[44,4,44,26],"101":[44,4,44,26],"104":[44,4,44,26],"105":[45,15,45,16],"107":[45,4,45,16],"108":[45,4,45,16],"141":[45,4,45,16],"143":[45,4,45,16],"145":[45,4,45,16],"183":[48,12,48,30],"185":[48,12,48,30],"186":[53,4,53,15],"189":[53,19,53,20],"200":[53,4,53,20],"201":[53,4,53,20],"202":[53,4,53,15],"205":[54,4,54,17],"207":[54,18,54,27],"210":[54,4,54,28],"212":[54,4,54,28],"213":[54,4,54,28],"215":[54,4,54,28],"216":[54,4,54,28],"218":[54,4,54,28],"220":[54,4,54,28],"223":[54,32,54,33],"234":[54,4,54,33],"235":[54,4,54,33],"238":[54,4,54,33],"239":[55,13,55,22],"241":[55,4,55,23],"242":[55,4,55,23],"275":[55,4,55,23],"277":[55,4,55,23],"279":[55,4,55,23],"312":[59,14,59,29],"314":[59,14,59,29],"315":[64,11,64,24],"317":[64,25,64,31],"320":[64,11,64,32],"322":[64,11,64,32],"323":[64,11,64,32],"325":[64,11,64,32],"326":[64,11,64,32],"328":[64,11,64,32],"330":[64,11,64,32],"49":[38,12,38,23],"51":[38,12,38,23],"52":[43,4,43,15],"55":[43,19,43,20],"66":[43,4,43,20],"67":[43,4,43,20],"68":[43,4,43,15],"71":[44,4,44,17],"73":[44,18,44,20],"76":[44,4,44,21],"78":[44,4,44,21],"79":[44,4,44,21],"81":[44,4,44,21],"82":[44,4,44,21],"84":[44,4,44,21],"86":[44,4,44,21],"89":[44,25,44,26]},"runtimeBytecode":{"bytecode":"0x6003361161000c576102ac565b60003560e01c6354ba0f27811861009357602436106102b2576004358060a01c6102b257604052600754600181018181106102b2579050600755600660405160205260005260406000208054600181018181106102b25790508155506040517f3c3284d117c92d0b1699230960384e794dcba184cc48ff114fe4fed20c9b056560006060a2005b346102b25763f83efec8811861011957602436106102b2576004358060a01c6102b257604052600754600181038181116102b2579050600755600660405160205260005260406000208054600181038181116102b25790508155506040517fe22de1457cb61fb61b60176bc4235a9abd19466126b46692bc14fc573f09924960006060a2005b6370a08231811861015457602436106102b2576004358060a01c6102b257604052600660405160205260005260406000205460605260206060f35b6306fdde0381186101d957600436106102b2576020806040528060400160005480825260208201600082601f0160051c600281116102b25780156101ab57905b80600101548160051b840152600101818118610194575b505050508051806020830101601f82600003163682375050601f19601f825160200101169050810190506040f35b6395d89b41811861023157600436106102b2576020806040528060400160035480825260208201600454815250508051806020830101601f82600003163682375050601f19601f825160200101169050810190506040f35b63378dc3dc811861025057600436106102b25760055460405260206040f35b6327e235e3811861028b57602436106102b2576004358060a01c6102b257604052600660405160205260005260406000205460605260206060f35b63047fc9aa81186102aa57600436106102b25760075460405260206040f35b505b60006000fd5b600080fda165767970657283000307000b"},"sourceId":"nft_mocked_contract.vy","sourcemap":"-1:-1:0:-;;;;:::-;;:::-;:::-;;;;;;;;;:::-;;;;;:::-;;;;;;;:::-;866:11;;981;-1:-1;996:1;-1:-1;;;;;;:::-;981:16;;:11;-1:-1;1002:13;1016:2;-1:-1;1002:17;;;;;;;-1:-1;;1023:1;-1:-1;;;;;;:::-;1002:22;;-1:-1;;1002:22;1040:1;1029:12;;;;;-1:-1;:::-;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;1065:18;;1192:11;-1:-1;1207:1;-1:-1;;;;;;:::-;1192:16;;:11;-1:-1;1213:13;1227:9;-1:-1;1213:24;;;;;;;-1:-1;;1241:1;-1:-1;;;;;;:::-;1213:29;;-1:-1;;1213:29;1256:9;1247:19;;;;;-1:-1;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;1298:15;;1450:13;1464:6;-1:-1;1450:21;;;;;;;-1:-1;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::-;;;;:::-;;:::-;;;;;;;;;;;;;;;;;:::-;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;;;;;;;;;;;;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;:::-;;;;:::-;;;","userdoc":{"methods":{"__init__(string,string,uint256)":{"notice":"Initialize the contract"},"balanceOf(address)":{"notice":"Get the balance of a mocked NFT"},"burnNFT(address)":{"notice":"Burn a mocked NFT"},"mintNFT(address)":{"notice":"Mint a new mocked NFT"}}}}},"manifest":"ethpm/3","sources":{"fortune.vy":{"checksum":{"algorithm":"md5","hash":"0xb873326e9d80317b24666a859d79f326"},"content":"# @version ^0.3.7\n\n\"\"\"\n@title Bare-bones Token implementation of the Fortune cards\n@notice This is a bare-bones implementation of the Fortune cards\n        It is not meant to be used in production, but rather as a\n        starting point for the final implementation\n        \n        Owners of the Legends NFT can mint an unrevealed Fortune\n        card as an ERC20 to any address, and pay an upfront tribute.\n\n        The Fortune cards can be burned to generate an event of GOOD or BAD\n        fortune. The event is a string of 4 characters, which can be used\n        by the frontend to display a message, and for the game to build upon it later.\n    \n        The Fortune cards can be traded, but only the owner of the NFT can mint\n        a new Fortune card.\n\n        When the FORTUNE card is burnt, the burner can get back their initial tribute minus a fee.\n\n        There is a withdraw function that can only be called by the owner of the contract.\n        This is to allow the owner to withdraw the ETH tributes.\n\n@author 0xcassini.eth\n\"\"\"\n\n\ninterface LegendsContract:\n    def balanceOf(_owner: address) -> uint256: view\n\nevent Approval:\n    owner: indexed(address)\n    spender: indexed(address)\n    value: uint256\n\nevent Transfer:\n    sender: indexed(address)\n    receiver: indexed(address)\n    value: uint256\n\nevent MintFortune:\n    receiver: indexed(address)\n    value: uint256\n\nevent BurnFortune:\n    legend: indexed(address)\n    value: String[4]\n    fortune: FortuneCard\n\n# The Fortune card is an ERC20 token that is tied to the value of the tribute it was minted with\nstruct FortuneCard:\n    cardNumber: uint256\n    tributeAmount: uint256\n    dateMinted: uint256\n    randomness: uint256\n\nname: public(String[64])\nsymbol: public(String[32])\ncirculatingSupply: public(uint256)\nlegendsContract: LegendsContract\n\n# The mapping of the Fortune cards\n# The key is the address of the minter of the token\n# The value is the Fortune card's msg.value\nfortunesLog: HashMap[address, FortuneCard]\n\n# Used to keep track of the number of Fortune cards minted\nmintCount: public(uint256)\n\nbalances: HashMap[address, uint256]\nallowances: HashMap[address, HashMap[address, uint256]]\nlastMinted: HashMap[address, uint256]\n\nfortuneContract: public(address)\ntributeBalance: public(uint256)\ntributeFee: public(uint256)\nfeesBalance: public(uint256)\n\nowner: public(address)\n\n@external\ndef __init__(_name: String[64], _symbol: String[32], _initial_supply: uint256, legendsAddress: address, tributeFee: uint256):\n    self.name = _name\n    self.symbol = _symbol\n    self.balances[msg.sender] = _initial_supply\n    self.circulatingSupply = _initial_supply\n    self.legendsContract = LegendsContract(legendsAddress)\n    self.owner = msg.sender\n    self.tributeFee = tributeFee\n    log Transfer(empty(address), msg.sender, _initial_supply)\n    \n\n@view\n@external\ndef fortuneBalance(_owner: address) -> uint256:\n    \"\"\"\n    @notice Getter to check the current balance of an address\n    @param  _owner Address to query the balance of\n    @return Token balance\n    \"\"\"\n    return self.balances[_owner]\n\n\n@view\n@external\ndef allowance(_owner : address, _spender : address) -> uint256:\n    \"\"\"\n    @notice Getter to check the amount of tokens that an owner allowed to a spender\n    @param  _owner The address which owns the funds\n    @param  _spender The address which will spend the funds\n    @return The amount of tokens still available for the spender\n    \"\"\"\n    return self.allowances[_owner][_spender]\n\n@nonpayable\n@external\ndef approve(_spender : address, _value : uint256) -> bool:\n    \"\"\"\n    @notice Approve an address to spend the specified amount of tokens on behalf of msg.sender\n    @dev    Beware that changing an allowance with this method brings the risk that someone may use both the old\n            and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n            race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n            https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    @param  _spender The address which will spend the funds.\n    @param  _value The amount of tokens to be spent.\n    @return Success boolean\n    \"\"\"\n    self.allowances[msg.sender][_spender] = _value\n    log Approval(msg.sender, _spender, _value)\n    return True\n\n\n@internal\ndef _transfer(_from: address, _to: address, _value: uint256):\n    \"\"\"\n    @dev    Internal shared logic for transfer and transferFrom\n    @param  _from The address which you want to send tokens from\n    @param  _to The address which you want to transfer to\n    @param  _value The amount of tokens to be transferred\n    \"\"\"\n    assert self.balances[_from] >= _value, \"Insufficient balance\"\n    self.balances[_from] -= _value\n    self.balances[_to] += _value\n    log Transfer(_from, _to, _value)\n\n@nonpayable\n@external\ndef transfer(_to : address, _value : uint256) -> bool:\n    \"\"\"\n    @notice Transfer tokens to a specified address\n    @dev    Vyper does not allow underflows, so attempting to transfer more\n            tokens than an account has will revert\n    @param  _to The address to transfer to\n    @param  _value The amount to be transferred\n    @return Success boolean\n    \"\"\"\n    self._transfer(msg.sender, _to, _value)\n    return True\n\n@nonpayable\n@external\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:\n    \"\"\"\n    @notice Transfer tokens from one address to another\n    @dev    Vyper does not allow underflows, so attempting to transfer more\n            tokens than an account has will revert\n    @param  _from The address which you want to send tokens from\n    @param  _to The address which you want to transfer to\n    @param  _value The amount of tokens to be transferred\n    @return Success boolean\n    \"\"\"\n    assert self.allowances[_from][msg.sender] >= _value, \"Insufficient allowance\"\n    self.allowances[_from][msg.sender] -= _value\n    self._transfer(_from, _to, _value)\n    return True\n\n@payable\n@external\ndef mintFortune(to: address) -> bool:\n    \"\"\"\n    @notice Mint a fortune to an specified address which holds the nft\n    @dev    this is not yet tested and should be used with caution\n    @dev    You could add an assert here to make sure the owner of the nft is the one who can mint\n    @param  to who receives the fortune\n    @return True if the caller addres is a legend\n    \"\"\"\n    # Make sure the minter doesnt have a fortune already\n    assert self.balances[msg.sender] == 0, \"First burn your current fortune\"\n    if self.legendsContract.balanceOf(msg.sender) > 0:               # if the caller is a legend\n        if self.lastMinted[msg.sender] + 3600*24 > block.timestamp:  # and if less 24 hours passed since last mint\n            raise \"You can only mint once a day\"                     #     then raise error\n        else:                                                        # else mint the fortune...\n            self.circulatingSupply += 1                              #      increase circulating supply\n            self.balances[msg.sender] += 1                           #      add fortune to the minter hashmap\n            self.lastMinted[msg.sender] = block.timestamp            #      update last minted of the minter hashmap\n            self.tributeBalance += msg.value * (100-self.tributeFee) / 100  # add the tribute to the tribute balance   \n            self.feesBalance = msg.value * self.tributeFee/100     #      add the fees to feesBalance  \n            self.fortunesLog[msg.sender] = FortuneCard({             #      add the fortune to the log hashmap\n                cardNumber: self.mintCount,                          #      the mint count is the card number\n                tributeAmount: msg.value,                            #      the tribute is in ehter, equal to the amount in the msg.value  \n                dateMinted: block.timestamp,                         #      the date minted is the current block timestamp\n                randomness: block.prevrandao,                        #      <--- ! The randomness is the previous block randao, this helps MEV protection\n                }\n            )\n            self.mintCount += 1                                      #      increase the mint count                  \n            log MintFortune(msg.sender, 1)                           #      emit the event and log the mint\n            return True                                              #      return true\n    else:\n        raise \"Not a Legend\"                                         # if the caller is not a legend, raise error               \n\n@external\ndef burnFortune():\n    \"\"\"\n    @notice Burn a fortune from an specified address\n    @dev    this is not yet tested and should be used with caution\n    @dev    You could add an assert here to make sure the owner of the nft is the one who can burn\n    \"\"\"\n    currentFortune: FortuneCard = self.fortunesLog[msg.sender]\n    assert self.balances[msg.sender] >= 1, \"You dont have a fortune to burn\"\n    assert block.timestamp > currentFortune.dateMinted + 300 , \"Wait at least 5 minutes to burn your fortune\"\n    self.circulatingSupply -= 1\n    self.balances[msg.sender] -= 1\n\n    # Check if the fortune is good or bad\n    \n    # This is the randomness function that will decide if the fortune is good or bad\n    # It takes various internal properties of the contract and the block and adds them together to generate a random seed\n    # This seed also includes the block's prevrandao (see: -> https://eips.ethereum.org/EIPS/eip-4399#security-considerations)\n    # Then it divides by 2087 which is a prime number, and checks if the remainder is even or odd\n    # If even, the fortune is good, if odd, the fortune is bad\n    reward: uint256 = currentFortune.tributeAmount - ( currentFortune.tributeAmount * (100-self.tributeFee) / 100)\n    if (( self.balance + block.prevrandao + currentFortune.dateMinted + currentFortune.randomness + currentFortune.cardNumber) % 2087) % 2 == 0:\n        # If the fortune is good, the reward is the tribute minus the fee\n        self.tributeBalance -= reward                               # remove the reward from the tribute balance\n        send(msg.sender, reward)                                    # send the reward to the caller\n        log BurnFortune(msg.sender, 'GOOD', currentFortune)         # emit the event and log the good fortune burn\n    else:\n        # If the fortune is bad, the reward is the tribute minus the fee\n        self.tributeBalance -= reward                               # remove the reward from the tribute balance\n        send(msg.sender, reward)                                    # send the reward to the caller\n        log BurnFortune(msg.sender, 'BAD', currentFortune)          # emit the event and log the bad fortune burn\n\n@view\n@external\ndef currentCardIdFrom(legend:address)-> uint256:\n    \"\"\"\n    @notice Getter to check the current cardNumber of an address\n            This is useful because legends can only have one fortune at a time\n    \"\"\"\n    return self.fortunesLog[legend].cardNumber\n\n@view\n@external\ndef getLegendBalance() -> uint256:\n    \"\"\"\n    @notice Getter to check the current balance of an address\n    @dev    this is not yet tested and should be used with caution\n    \"\"\"\n    legends: LegendsContract = self.legendsContract\n    return legends.balanceOf(msg.sender)\n\n@view\n@external\ndef getFortuneChestBalance() -> uint256:\n    \"\"\"\n    @notice Getter to check the current ETH balance of the fortune chest\n    @dev    This is not yet tested and should be used with caution\n    @return ETH balance\n    \"\"\"\n    return self.balance\n\n# Admin functions\n\n@view\n@external\ndef currentOwner() -> address:\n    \"\"\"\n    @notice Getter to check the current owner of the fortune chest\n    \"\"\"\n    return self.owner \n    \n@external\ndef setOwner(new_owner:address) -> bool:\n    \"\"\"\n    @notice Setter to set the owner of the fortune chest\n    @dev    this is not yet tested and should be used with caution\n    @dev    You could add an assert here to make sure the owner of the nft is the one who can burn\n    @param  new_owner The address that will be the new owner of the contract\n    @return Success boolean\n    \"\"\"\n    assert self.owner == msg.sender     # make sure the caller is the owner\n    if self.owner == msg.sender:        \n        self.owner = new_owner          # set the new owner\n        return True\n    else:\n        raise \"Not the owner\"           # if the caller is not the owner, raise error\n\n\n@external\ndef rugPull() -> bool:\n    \"\"\"\n    @notice Withdraw all the ETH from the fortune chest\n    @dev    this is not yet tested and should be used with caution\n    @return Success boolean\n    \"\"\"\n    assert self.owner == msg.sender\n    assert self.balance > 0\n    if self.owner == msg.sender:\n        send(self.owner, self.balance)\n        self.tributeBalance = 0\n        return True\n    else:\n        raise \"Not the contract Owner\"\n\n\n@external\ndef withdrawFees() -> bool:\n    \"\"\"\n    @notice Withdraw all the fees from the fortune chest\n    @dev    this is not yet tested and should be used with caution\n    @return Success boolean\n    \"\"\"\n    assert self.owner == msg.sender\n    assert self.tributeBalance > 0\n    if self.owner == msg.sender:\n        send(self.owner, self.feesBalance)\n        self.feesBalance = 0\n        return True\n    else:\n        raise \"Not the contract Owner\"\n\n@external\ndef setTributeFee(percentage: uint256)-> bool:\n    \"\"\"\n    @notice Setter to set the tribute fee\n    @dev    this is not yet tested and should be used with caution\n    @dev    You could add an assert here to make sure the owner of the nft is the one who can burn\n    @param  percentage The percentage of the tribute that will be taken\n    @return Success boolean\n    \"\"\"\n    assert self.owner == msg.sender   # only the owner can set the fee\n    if self.owner == msg.sender:      # double check, only the owner can set the fee\n        assert percentage <= 10       # the fee cannot be more than 10% ever\n        self.tributeFee = percentage  # set the fee\n        return True\n    else:\n        raise \"Not the contract Owner\" # if somehow the caller is not the owner, raise error\n\n@view\n@external\ndef getTributeFee()-> uint256:\n    \"\"\"\n    @notice Getter to check the current tribute fee\n    @return tribute fee\n    \"\"\"\n    return self.tributeFee","imports":[],"references":[],"urls":[]},"nft_mocked_contract.vy":{"checksum":{"algorithm":"md5","hash":"0x449ae26f06f2d2a85dace74193f13ca1"},"content":"# @version ^0.3.7\n\"\"\"\n@title Mock Saturn Series ERC721 Token\n@dev This contract replicates the functionality of the ERC721 standard, but\n     with a few differences. It is intended to be used for testing purposes\n     only.\n@author 0xcassini.eth\n\"\"\"\n\nevent Mint:\n    to: indexed(address)\n\nevent Burn:\n    to: indexed(address)\n\nname: public(String[64])\nsymbol: public(String[32])\ninitialSupply: public(uint256)\nbalances: public(HashMap[address, uint256])\nsupply: public(uint256)\n\n@external\ndef __init__(name: String[64], symbol: String[32], initialSupply: uint256):\n    \"\"\"\n    @notice Initialize the contract\n    @param name The name of the token\n    @param symbol The symbol of the token\n    @param initialSupply The initial supply of the token\n    \"\"\"\n    self.name = name\n    self.symbol = symbol\n    self.supply = initialSupply\n\n\n\n@payable\n@external\ndef mintNFT(to: address):\n    \"\"\"\n    @notice Mint a new mocked NFT\n    @param to The address to mint the token to\n    \"\"\"\n    self.supply += 1\n    self.balances[to] += 1\n    log Mint(to)\n\n@external\ndef burnNFT(cardOwner: address):\n    \"\"\"\n    @notice Burn a mocked NFT\n    @param cardOwner The address to burn the token from\n    \"\"\"\n    self.supply -= 1\n    self.balances[cardOwner] -= 1\n    log Burn(cardOwner)\n\n@view\n@external\ndef balanceOf(legend: address) -> uint256:\n    \"\"\"\n    @notice Get the balance of a mocked NFT\n    @param legend The address to get the balance of\n    \"\"\"\n    return self.balances[legend]\n\n","imports":[],"references":[],"urls":[]}}}