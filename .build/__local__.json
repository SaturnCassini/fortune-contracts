{"contractTypes":{"fortune":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":true,"name":"receiver","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"receiver","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"MintFortune","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"legend","type":"address"},{"indexed":false,"name":"value","type":"string"},{"components":[{"name":"cardNumber","type":"uint256"},{"name":"tributeAmount","type":"uint256"},{"name":"dateMinted","type":"uint256"},{"name":"randomness","type":"uint256"}],"indexed":false,"name":"fortune","type":"tuple"}],"name":"BurnFortune","type":"event"},{"inputs":[{"name":"_name","type":"string"},{"name":"_symbol","type":"string"},{"name":"_initial_supply","type":"uint256"},{"name":"legendsAddress","type":"address"},{"name":"tributeFee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"name":"_owner","type":"address"}],"name":"fortuneBalance","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"to","type":"address"}],"name":"mintFortune","outputs":[{"name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"burnFortune","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"legend","type":"address"}],"name":"currentCardIdFrom","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLegendBalance","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFortuneChestBalance","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTributeFee","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentOwner","outputs":[{"name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"name":"new_owner","type":"address"}],"name":"setOwner","outputs":[{"name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rugPull","outputs":[{"name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawFees","outputs":[{"name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"percentage","type":"uint256"}],"name":"setTributeFee","outputs":[{"name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"circulatingSupply","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mintCount","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fortuneContract","outputs":[{"name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tributeBalance","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tributeFee","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feesBalance","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"stateMutability":"view","type":"function"}],"contractName":"fortune","deploymentBytecode":{"bytecode":"0x60206110f360003960005160406020826110f301600039600051116110ee576020816110f301600039600051806040526020820181816110f301606039505050602061111360003960005160206020826110f301600039600051116110ee576020816110f3016000396000518060a052602082016020816110f30160003960005160c05250505060206111536000396000518060a01c6110ee5760e052346110ee5760405180600055600081601f0160051c600281116110ee5780156100d957905b8060051b6060015181600101556001018181186100c1575b50505060a0518060035560c051600455506020611133600039600051600933602052600052604060002055602061113360003960005160055560e051600655336010556020611173600039600051600e553360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020611133600039600051610100526020610100a3610f7861017561000039610f78610000f36003361161000c57610e69565b60003560e01c634a92d6ca81186102ef5760243610610f66576004358060a01c610f6657604052600933602052600052604060002054156100a457601f6060527f4669727374206275726e20796f75722063757272656e7420666f7274756e650060805260605060605180608001601f826000031636823750506308c379a06020526020604052601f19601f6060510116604401603cfd5b6006546370a0823160605233608052602060606024607c845afa6100cd573d600060003e3d6000fd5b60203d10610f66576060905051156102905742600b33602052600052604060002054620151808101818110610f665790501161022f5760055460018101818110610f665790506005556009336020526000526040600020805460018101818110610f6657905081555042600b33602052600052604060002055600d5434600e548060640360648111610f66579050808202811583838304141715610f665790509050606481049050808201828110610f665790509050600d55600f5434600e54808202811583838304141715610f665790509050606481049050808201828110610f665790509050600f55600733602052600052604060002060085481553460018201554260028201554460038201555060085460018101818110610f66579050600855337f1e5a50cc96c9a55d13bed3550c9d90f8c7deeebe51c827f15123e3bd592649d1600160a052602060a0a2600160a052602060a06102ed566102ed565b601c60a0527f596f752063616e206f6e6c79206d696e74206f6e63652061206461790000000060c05260a05060a0518060c001601f826000031636823750506308c379a06060526020608052601f19601f60a0510116604401607cfd6102ed565b600c6060527f4e6f742061204c6567656e64000000000000000000000000000000000000000060805260605060605180608001601f826000031636823750506308c379a06020526020604052601f19601f6060510116604401603cfd5bf35b34610f665763503f21cc811861032f5760243610610f66576004358060a01c610f6657604052600960405160205260005260406000205460605260206060f35b63dd62ed3e81186103895760443610610f66576004358060a01c610f66576040526024358060a01c610f6657606052600a604051602052600052604060002080606051602052600052604060002090505460805260206080f35b63095ea7b381186104085760443610610f66576004358060a01c610f6657604052602435600a336020526000526040600020806040516020526000526040600020905055604051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560243560605260206060a3600160605260206060f35b63a9059cbb811861044e5760443610610f66576004358060a01c610f665760e0523360405260e051606052602435608052610441610e6f565b6001610100526020610100f35b6323b872dd81186105685760643610610f66576004358060a01c610f665760e0526024358060a01c610f665761010052604435600a60e051602052600052604060002080336020526000526040600020905054101561050b576016610120527f496e73756666696369656e7420616c6c6f77616e6365000000000000000000006101405261012050610120518061014001601f826000031636823750506308c379a060e052602061010052601f19601f61012051011660440160fcfd5b600a60e05160205260005260406000208033602052600052604060002090508054604435808203828111610f66579050905081555060e0516040526101005160605260443560805261055b610e6f565b6001610120526020610120f35b6391601563811861090b5760043610610f66576007336020526000526040600020805460405260018101546060526002810154608052600381015460a052506001600933602052600052604060002054101561061b57601f60c0527f596f7520646f6e742068617665206120666f7274756e6520746f206275726e0060e05260c05060c0518060e001601f826000031636823750506308c379a0608052602060a052601f19601f60c0510116604401609cfd5b60805161012c8101818110610f6657905042116106b457602c60c0527f57616974206174206c656173742035206d696e7574657320746f206275726e2060e0527f796f757220666f7274756e6500000000000000000000000000000000000000006101005260c05060c0518060e001601f826000031636823750506308c379a0608052602060a052601f19601f60c0510116604401609cfd5b60055460018103818111610f665790506005556009336020526000526040600020805460018103818111610f66579050815550606051600e548060640360648111610f66579050808202811583838304141715610f66579050905060648104905060c0524744808201828110610f665790509050608051808201828110610f66579050905060a051808201828110610f665790509050604051808201828110610f6657905090506108278106905060018116905061082757337ffa59690ecd4b2307ff53436b582c8720d94cb29c78f067f99af89bfab290b51560a08061012052600460e0527f474f4f44000000000000000000000000000000000000000000000000000000006101005260e0816101200181518082526020830160208301815181525050508051806020830101601f82600003163682375050601f19601f82516020010116905090508101905060405161014052606051610160526080516101805260a0516101a052610120a26108de565b337ffa59690ecd4b2307ff53436b582c8720d94cb29c78f067f99af89bfab290b51560a08061012052600360e0527f42414400000000000000000000000000000000000000000000000000000000006101005260e0816101200181518082526020830160208301815181525050508051806020830101601f82600003163682375050601f19601f82516020010116905090508101905060405161014052606051610160526080516101805260a0516101a052610120a25b600d5460c051808203828111610f665790509050600d55600060006000600060c051336000f115610f6657005b63cba7426f81186109465760243610610f66576004358060a01c610f6657604052600760405160205260005260406000205460605260206060f35b63bc97b0f081186109985760043610610f665760065460405260206040516370a0823160605233608052602060606024607c845afa61098a573d600060003e3d6000fd5b60203d10610f665760609050f35b63261f563981186109b55760043610610f66574760405260206040f35b63f74948ab81186109d45760043610610f6657600e5460405260206040f35b63b387ef9281186109f35760043610610f665760105460405260206040f35b6313af40358118610a9d5760243610610f66576004358060a01c610f66576040523360105418610f66573360105418610a3e57604051601055600160605260206060610a9b56610a9b565b600d6060527f4e6f7420746865206f776e65720000000000000000000000000000000000000060805260605060605180608001601f826000031636823750506308c379a06020526020604052601f19601f6060510116604401603cfd5bf35b632190dfd08118610b525760043610610f66573360105418610f66574715610f66573360105418610af3576000600060006000476010546000f115610f66576000600d55600160405260206040610b5056610b50565b60166040527f4e6f742074686520636f6e7472616374204f776e65720000000000000000000060605260405060405180606001601f826000031636823750506308c379a06000526020602052601f19601f6040510116604401601cfd5bf35b63476343ee8118610c0b5760043610610f66573360105418610f6657600f5415610f66573360105418610bac576000600060006000600f546010546000f115610f66576000600f55600160405260206040610c0956610c09565b60166040527f4e6f742074686520636f6e7472616374204f776e65720000000000000000000060605260405060405180606001601f826000031636823750506308c379a06000526020602052601f19601f6040510116604401601cfd5bf35b63e21a59cc8118610cb15760243610610f66573360105418610f66573360105418610c5257600a60043511610f6657600435600e55600160405260206040610caf56610caf565b60166040527f4e6f742074686520636f6e7472616374204f776e65720000000000000000000060605260405060405180606001601f826000031636823750506308c379a06000526020602052601f19601f6040510116604401601cfd5bf35b6306fdde038118610d365760043610610f66576020806040528060400160005480825260208201600082601f0160051c60028111610f66578015610d0857905b80600101548160051b840152600101818118610cf1575b505050508051806020830101601f82600003163682375050601f19601f825160200101169050810190506040f35b6395d89b418118610d8e5760043610610f66576020806040528060400160035480825260208201600454815250508051806020830101601f82600003163682375050601f19601f825160200101169050810190506040f35b639358928b8118610dad5760043610610f665760055460405260206040f35b639659867e8118610dcc5760043610610f665760085460405260206040f35b636f37b17f8118610deb5760043610610f6657600c5460405260206040f35b63789ced798118610e0a5760043610610f6657600d5460405260206040f35b639249c5898118610e295760043610610f6657600e5460405260206040f35b637518c9658118610e485760043610610f6657600f5460405260206040f35b638da5cb5b8118610e675760043610610f665760105460405260206040f35b505b60006000fd5b60805160096040516020526000526040600020541015610ee657601460a0527f496e73756666696369656e742062616c616e636500000000000000000000000060c05260a05060a0518060c001601f826000031636823750506308c379a06060526020608052601f19601f60a0510116604401607cfd5b600960405160205260005260406000208054608051808203828111610f665790509050815550600960605160205260005260406000208054608051808201828110610f6657905090508155506060516040517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60805160a052602060a0a3565b600080fda165767970657283000307000b005b600080fd"},"dev_messages":{},"devdoc":{"author":"0xcassini.eth","methods":{"allowance(address,address)":{"params":{"_owner":"The address which owns the funds","_spender":"The address which will spend the funds"},"returns":{"_0":"The amount of tokens still available for the spender"}},"approve(address,uint256)":{"details":"Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729","params":{"_spender":"The address which will spend the funds.","_value":"The amount of tokens to be spent."},"returns":{"_0":"Success boolean"}},"burnFortune()":{"details":"You could add an assert here to make sure the owner of the nft is the one who can burn"},"fortuneBalance(address)":{"params":{"_owner":"Address to query the balance of"},"returns":{"_0":"Token balance"}},"getFortuneChestBalance()":{"details":"This is not yet tested and should be used with caution","returns":{"_0":"ETH balance"}},"getLegendBalance()":{"details":"this is not yet tested and should be used with caution"},"getTributeFee()":{"returns":{"_0":"tribute fee"}},"mintFortune(address)":{"details":"You could add an assert here to make sure the owner of the nft is the one who can mint","params":{"to":"who receives the fortune"},"returns":{"_0":"True if the caller addres is a legend"}},"rugPull()":{"details":"this is not yet tested and should be used with caution","returns":{"_0":"Success boolean"}},"setOwner(address)":{"details":"You could add an assert here to make sure the owner of the nft is the one who can burn","params":{"new_owner":"The address that will be the new owner of the contract"},"returns":{"_0":"Success boolean"}},"setTributeFee(uint256)":{"details":"You could add an assert here to make sure the owner of the nft is the one who can burn","params":{"percentage":"The percentage of the tribute that will be taken"},"returns":{"_0":"Success boolean"}},"transfer(address,uint256)":{"details":"Vyper does not allow underflows, so attempting to transfer more tokens than an account has will revert","params":{"_to":"The address to transfer to","_value":"The amount to be transferred"},"returns":{"_0":"Success boolean"}},"transferFrom(address,address,uint256)":{"details":"Vyper does not allow underflows, so attempting to transfer more tokens than an account has will revert","params":{"_from":"The address which you want to send tokens from","_to":"The address which you want to transfer to","_value":"The amount of tokens to be transferred"},"returns":{"_0":"Success boolean"}},"withdrawFees()":{"details":"this is not yet tested and should be used with caution","returns":{"_0":"Success boolean"}}},"title":"Bare-bones Token implementation of the Fortune cards"},"pcmap":{"1011":[129,39,129,45],"1019":[129,4,129,46],"1021":[129,4,129,46],"1022":[130,11,130,15],"1063":[148,13,148,26],"1065":[148,13,148,26],"1066":[157,19,157,29],"1070":[157,31,157,34],"1076":[157,36,157,42],"1085":[157,4,157,43],"1088":[157,4,157,43],"1089":[157,4,157,43],"1090":[158,11,158,15],"112":[188,43,188,76],"113":[188,43,188,76],"1133":[162,17,162,32],"1135":[162,17,162,32],"1147":[162,34,162,47],"115":[188,4,188,76],"1150":[162,34,162,47],"1151":[174,31,174,37],"1153":[172,11,172,55],"1154":[172,11,172,26],"1156":[172,27,172,32],"1159":[172,11,172,33],"1161":[172,11,172,33],"1162":[172,11,172,33],"1164":[172,11,172,33],"1165":[172,11,172,33],"1167":[172,11,172,33],"1169":[172,11,172,33],"1171":[172,34,172,44],"1183":[172,11,172,45],"1184":[172,11,172,45],"1185":[172,11,172,55],"1187":[172,4,172,81],"1188":[172,4,172,81],"1191":[172,4,172,81],"1197":[172,57,172,81],"1234":[172,57,172,81],"1235":[172,57,172,81],"1238":[172,4,172,81],"1291":[172,4,172,81],"1292":[173,4,173,19],"1294":[173,20,173,25],"1297":[173,4,173,26],"1299":[173,4,173,26],"1300":[173,4,173,26],"1302":[173,4,173,26],"1303":[173,4,173,26],"1305":[173,4,173,26],"1307":[173,4,173,26],"1309":[173,27,173,37],"1321":[173,4,173,38],"1322":[173,4,173,38],"1323":[173,4,173,48],"1324":[173,4,173,48],"1325":[174,31,174,37],"1329":[173,4,173,48],"1331":[173,4,173,48],"1338":[173,4,173,48],"1339":[173,4,173,48],"1340":[173,4,173,48],"1341":[173,4,173,48],"1342":[173,4,173,48],"1344":[173,4,173,48],"1345":[174,19,174,24],"1351":[174,26,174,29],"1358":[174,31,174,37],"1367":[174,4,174,38],"1370":[174,4,174,38],"1371":[174,4,174,38],"1372":[175,11,175,15],"1404":[218,34,218,50],"1406":[218,51,218,61],"1407":[218,34,218,62],"1409":[218,34,218,62],"1410":[218,34,218,62],"1412":[218,34,218,62],"1413":[218,34,218,62],"1415":[218,34,218,62],"1417":[218,34,218,62],"1418":[218,4,218,62],"1425":[218,4,218,62],"1433":[218,4,218,62],"1441":[218,4,218,62],"1447":[218,4,218,62],"1448":[219,40,219,41],"1450":[219,11,219,24],"1452":[219,25,219,35],"1453":[219,11,219,36],"1455":[219,11,219,36],"1456":[219,11,219,36],"1458":[219,11,219,36],"1459":[219,11,219,36],"1461":[219,11,219,36],"1463":[219,11,219,36],"1466":[219,4,219,76],"1467":[219,4,219,76],"1470":[219,4,219,76],"1475":[219,43,219,76],"1511":[219,43,219,76],"1512":[219,43,219,76],"1514":[219,4,219,76],"1563":[219,4,219,76],"1564":[220,29,220,54],"1566":[220,29,220,60],"1567":[220,57,220,60],"1570":[220,29,220,60],"1572":[220,29,220,60],"1579":[220,29,220,60],"1580":[220,29,220,60],"1581":[220,11,220,26],"1582":[220,11,220,60],"1583":[220,4,220,109],"1586":[220,4,220,109],"1591":[220,63,220,109],"1627":[220,63,220,109],"164":[188,4,188,76],"165":[189,7,189,27],"1664":[220,63,220,109],"1665":[220,63,220,109],"1667":[220,4,220,109],"167":[189,7,189,49],"1716":[220,4,220,109],"1717":[221,4,221,26],"1720":[221,30,221,31],"1731":[221,4,221,31],"1732":[221,4,221,31],"1733":[221,4,221,26],"1736":[222,4,222,17],"1738":[222,18,222,28],"1739":[222,4,222,29],"1741":[222,4,222,29],"1742":[222,4,222,29],"1744":[222,4,222,29],"1745":[222,4,222,29],"1747":[222,4,222,29],"1749":[222,4,222,29],"1752":[222,33,222,34],"176":[189,38,189,48],"1763":[222,4,222,34],"1764":[222,4,222,34],"1767":[222,4,222,34],"1768":[231,22,231,50],"1770":[231,22,231,74],"1771":[231,58,231,73],"1775":[231,54,231,57],"1778":[231,54,231,57],"1786":[231,54,231,73],"1787":[231,54,231,73],"1789":[231,22,231,74],"1793":[231,22,231,74],"1804":[231,22,231,74],"1805":[231,22,231,74],"1806":[231,22,231,74],"1807":[231,22,231,74],"1808":[231,77,231,80],"1810":[231,22,231,80],"1812":[231,22,231,80],"1813":[231,22,231,80],"1814":[231,4,231,80],"1816":[231,4,231,80],"1817":[232,10,232,22],"1818":[232,25,232,41],"1831":[232,10,232,41],"1832":[232,10,232,41],"1833":[232,44,232,69],"1837":[232,10,232,69],"1839":[232,10,232,69],"1846":[232,10,232,69],"1847":[232,10,232,69],"1848":[232,10,232,69],"1849":[232,10,232,69],"1850":[232,72,232,97],"1854":[232,10,232,97],"1856":[232,10,232,97],"1863":[232,10,232,97],"1864":[232,10,232,97],"1865":[232,10,232,97],"1866":[232,10,232,97],"1867":[232,100,232,125],"1871":[232,10,232,125],"1873":[232,10,232,125],"188":[189,7,189,49],"1880":[232,10,232,125],"1881":[232,10,232,125],"1882":[232,10,232,125],"1883":[232,10,232,125],"1884":[232,129,232,133],"1887":[232,8,232,133],"1888":[232,8,232,133],"1889":[232,8,232,133],"1890":[232,8,232,133],"1893":[232,7,232,138],"1894":[232,7,232,138],"1895":[232,7,232,138],"1896":[232,7,232,138],"1897":[232,4,235,58],"1900":[232,4,235,58],"1901":[233,24,233,34],"1902":[233,8,233,59],"1946":[233,36,233,42],"1983":[233,36,233,42],"1984":[233,36,233,42],"2079":[233,8,233,59],"2082":[233,8,233,59],"2083":[232,4,235,58],"2086":[232,4,235,58],"2087":[232,4,235,58],"2088":[235,24,235,34],"2089":[235,8,235,58],"2133":[235,36,235,41],"216":[189,7,189,49],"217":[189,7,189,49],"2170":[235,36,235,41],"2171":[235,36,235,41],"218":[189,7,189,53],"219":[189,7,189,53],"220":[189,4,209,28],"223":[189,4,209,28],"224":[190,51,190,66],"225":[190,11,190,26],"2266":[235,8,235,58],"2269":[235,8,235,58],"227":[190,27,190,37],"2270":[232,4,235,58],"2271":[236,4,236,23],"2274":[236,27,236,33],"228":[190,11,190,38],"2289":[236,4,236,33],"2290":[236,4,236,33],"2291":[236,4,236,23],"230":[190,11,190,38],"2302":[237,21,237,27],"2305":[237,9,237,19],"2309":[237,4,237,28],"231":[190,11,190,38],"2310":[237,4,237,28],"2313":[237,4,237,28],"233":[190,11,190,38],"234":[190,11,190,38],"2346":[241,22,241,36],"2348":[241,22,241,36],"2349":[246,11,246,27],"2351":[246,28,246,34],"2354":[246,11,246,35],"2356":[246,11,246,35],"2357":[246,11,246,35],"2359":[246,11,246,35],"236":[190,11,190,38],"2360":[246,11,246,35],"2362":[246,11,246,35],"2364":[246,11,246,35],"238":[190,11,190,38],"2394":[255,31,255,51],"2399":[255,4,255,51],"240":[190,41,190,48],"2402":[256,11,256,18],"2404":[256,11,256,40],"2413":[256,29,256,39],"2425":[256,11,256,40],"2453":[256,11,256,40],"2454":[256,11,256,40],"2476":[266,11,266,23],"2505":[275,11,275,26],"253":[190,11,190,48],"2536":[285,11,285,21],"254":[190,11,190,48],"255":[190,11,190,66],"256":[190,8,207,23],"2578":[288,13,288,30],"2580":[288,13,288,30],"2581":[296,25,296,35],"2582":[296,11,296,21],"2584":[296,11,296,35],"2585":[296,11,296,35],"2586":[296,4,296,35],"2589":[296,4,296,35],"259":[190,8,207,23],"2590":[297,21,297,31],"2591":[297,7,297,17],"2593":[297,7,297,31],"2594":[297,7,297,31],"2595":[297,4,301,29],"2598":[297,4,301,29],"2599":[298,21,298,30],"260":[193,12,193,34],"2602":[298,8,298,18],"2605":[299,15,299,19],"2621":[297,4,301,29],"2622":[297,4,301,29],"2627":[301,14,301,29],"263":[193,38,193,39],"2663":[301,14,301,29],"2664":[301,14,301,29],"2666":[301,8,301,29],"2685":[301,8,301,29],"2693":[301,8,301,29],"2698":[301,8,301,29],"2714":[301,8,301,29],"2737":[311,25,311,35],"2738":[311,11,311,21],"274":[193,12,193,39],"2740":[311,11,311,35],"2741":[311,11,311,35],"2742":[311,4,311,35],"2745":[311,4,311,35],"2746":[312,11,312,23],"2747":[312,11,312,27],"2748":[312,4,312,27],"275":[193,12,193,39],"2751":[312,4,312,27],"2752":[313,21,313,31],"2753":[313,7,313,17],"2755":[313,7,313,31],"2756":[313,7,313,31],"2757":[313,4,318,38],"276":[193,12,193,34],"2760":[313,4,318,38],"2769":[314,25,314,37],"2770":[314,13,314,23],"2776":[314,8,314,38],"2777":[314,8,314,38],"2780":[314,8,314,38],"2781":[315,30,315,31],"2783":[315,8,315,27],"2786":[316,15,316,19],"279":[194,12,194,25],"2802":[313,4,318,38],"2803":[313,4,318,38],"2808":[318,14,318,38],"281":[194,26,194,36],"282":[194,12,194,37],"284":[194,12,194,37],"2844":[318,14,318,38],"2845":[318,14,318,38],"2847":[318,8,318,38],"285":[194,12,194,37],"2866":[318,8,318,38],"287":[194,12,194,37],"2874":[318,8,318,38],"2879":[318,8,318,38],"288":[194,12,194,37],"2895":[318,8,318,38],"290":[194,12,194,37],"2918":[328,25,328,35],"2919":[328,11,328,21],"292":[194,12,194,37],"2921":[328,11,328,35],"2922":[328,11,328,35],"2923":[328,4,328,35],"2926":[328,4,328,35],"2927":[329,11,329,27],"2929":[329,11,329,31],"2930":[329,11,329,31],"2931":[329,4,329,31],"2934":[329,4,329,31],"2935":[330,21,330,31],"2936":[330,7,330,17],"2938":[330,7,330,31],"2939":[330,7,330,31],"2940":[330,4,335,38],"2943":[330,4,335,38],"295":[194,41,194,42],"2952":[331,25,331,41],"2955":[331,13,331,23],"2961":[331,8,331,42],"2962":[331,8,331,42],"2965":[331,8,331,42],"2966":[332,27,332,28],"2968":[332,8,332,24],"2971":[333,15,333,19],"2987":[330,4,335,38],"2988":[330,4,335,38],"2993":[335,14,335,38],"3029":[335,14,335,38],"3030":[335,14,335,38],"3032":[335,8,335,38],"3051":[335,8,335,38],"3059":[335,8,335,38],"306":[194,12,194,42],"3064":[335,8,335,38],"307":[194,12,194,42],"3080":[335,8,335,38],"310":[194,12,194,42],"3103":[346,25,346,35],"3104":[346,11,346,21],"3106":[346,11,346,35],"3107":[346,11,346,35],"3108":[346,4,346,35],"311":[195,42,195,57],"3111":[346,4,346,35],"3112":[347,21,347,31],"3113":[347,7,347,17],"3115":[347,7,347,31],"3116":[347,7,347,31],"3117":[347,4,352,38],"312":[195,12,195,27],"3120":[347,4,352,38],"3121":[348,29,348,31],"3123":[349,26,349,36],"3125":[348,15,348,31],"3127":[348,8,348,31],"3130":[348,8,348,31],"3131":[349,26,349,36],"3134":[349,8,349,23],"3136":[349,8,349,36],"3137":[350,15,350,19],"314":[195,28,195,38],"315":[195,12,195,39],"3153":[347,4,352,38],"3154":[347,4,352,38],"3159":[352,14,352,38],"317":[195,12,195,39],"318":[195,12,195,39],"3195":[352,14,352,38],"3196":[352,14,352,38],"3198":[352,8,352,38],"320":[195,12,195,39],"321":[195,12,195,39],"3217":[352,8,352,38],"3225":[352,8,352,38],"323":[195,12,195,39],"3230":[352,8,352,38],"3246":[352,8,352,38],"325":[195,12,195,39],"327":[196,12,196,31],"329":[196,12,196,74],"330":[196,35,196,44],"331":[196,52,196,67],"335":[196,48,196,51],"338":[196,48,196,51],"346":[196,48,196,67],"347":[196,48,196,67],"366":[196,35,196,68],"367":[196,35,196,68],"368":[196,71,196,74],"3695":[134,0,144,36],"3696":[141,35,141,41],"3699":[141,11,141,24],"370":[196,35,196,74],"3701":[141,25,141,30],"3704":[141,11,141,31],"3706":[141,11,141,31],"3707":[141,11,141,31],"3709":[141,11,141,31],"3710":[141,11,141,31],"3712":[141,11,141,31],"3714":[141,11,141,31],"3717":[141,4,141,65],"3718":[141,4,141,65],"372":[196,35,196,74],"3721":[141,4,141,65],"3726":[141,43,141,65],"373":[196,35,196,74],"375":[196,12,196,74],"3762":[141,43,141,65],"3763":[141,43,141,65],"3765":[141,4,141,65],"377":[196,12,196,74],"3814":[141,4,141,65],"3815":[142,4,142,17],"3817":[142,18,142,23],"3820":[142,4,142,24],"3822":[142,4,142,24],"3823":[142,4,142,24],"3825":[142,4,142,24],"3826":[142,4,142,24],"3828":[142,4,142,24],"3830":[142,4,142,24],"3833":[142,28,142,34],"384":[196,12,196,74],"3848":[142,4,142,34],"3849":[142,4,142,34],"385":[196,12,196,74],"3852":[142,4,142,34],"3853":[143,4,143,17],"3855":[143,18,143,21],"3858":[143,4,143,22],"386":[196,12,196,74],"3860":[143,4,143,22],"3861":[143,4,143,22],"3863":[143,4,143,22],"3864":[143,4,143,22],"3866":[143,4,143,22],"3868":[143,4,143,22],"387":[196,12,196,74],"3871":[143,26,143,32],"388":[196,12,196,31],"3886":[143,4,143,32],"3887":[143,4,143,32],"3890":[143,4,143,32],"3891":[144,24,144,27],"3893":[144,4,144,36],"3894":[144,17,144,22],"3896":[144,4,144,36],"3897":[144,4,144,36],"390":[196,12,196,74],"391":[197,12,197,28],"393":[197,12,197,63],"3930":[144,29,144,35],"3938":[144,4,144,36],"394":[197,32,197,41],"3940":[144,4,144,36],"395":[197,44,197,59],"416":[197,32,197,59],"417":[197,32,197,59],"418":[197,60,197,63],"420":[197,32,197,63],"422":[197,32,197,63],"423":[197,32,197,63],"425":[197,12,197,63],"427":[197,12,197,63],"434":[197,12,197,63],"435":[197,12,197,63],"436":[197,12,197,63],"437":[197,12,197,63],"438":[197,12,197,28],"440":[197,12,197,63],"441":[198,12,198,28],"443":[198,29,198,39],"444":[198,12,198,40],"446":[198,12,198,40],"447":[198,12,198,40],"449":[198,12,198,40],"450":[198,12,198,40],"452":[198,12,198,40],"454":[198,12,198,40],"455":[199,28,199,42],"458":[198,12,204,13],"460":[200,31,200,40],"463":[198,12,204,13],"466":[201,28,201,43],"469":[198,12,204,13],"472":[202,28,202,44],"475":[198,12,204,13],"478":[198,12,204,13],"479":[205,12,205,26],"482":[205,30,205,31],"49":[179,16,179,27],"493":[205,12,205,31],"494":[205,12,205,31],"495":[205,12,205,26],"498":[206,28,206,38],"499":[206,12,206,107],"51":[179,16,179,27],"52":[188,11,188,24],"532":[206,41,206,107],"539":[206,12,206,107],"54":[188,25,188,35],"541":[206,12,206,107],"542":[207,19,207,23],"55":[188,11,188,36],"558":[190,8,207,23],"559":[190,8,207,23],"564":[191,18,191,48],"57":[188,11,188,36],"58":[188,11,188,36],"60":[188,11,188,36],"600":[191,18,191,48],"601":[191,18,191,48],"603":[191,12,191,48],"61":[188,11,188,36],"622":[191,12,191,48],"63":[188,11,188,36],"630":[191,12,191,48],"635":[191,12,191,48],"65":[188,11,188,36],"651":[191,12,191,48],"655":[189,4,209,28],"656":[189,4,209,28],"66":[188,11,188,41],"661":[209,14,209,28],"67":[188,11,188,41],"68":[188,4,188,76],"697":[209,14,209,28],"698":[209,14,209,28],"700":[209,8,209,28],"71":[188,4,188,76],"719":[209,8,209,28],"727":[209,8,209,28],"732":[209,8,209,28],"748":[209,8,209,28],"76":[188,43,188,76],"787":[95,19,95,34],"789":[95,19,95,34],"790":[101,11,101,24],"792":[101,25,101,31],"795":[101,11,101,32],"797":[101,11,101,32],"798":[101,11,101,32],"800":[101,11,101,32],"801":[101,11,101,32],"803":[101,11,101,32],"805":[101,11,101,32],"846":[106,14,106,30],"848":[106,14,106,30],"860":[106,32,106,50],"862":[106,32,106,50],"863":[113,11,113,26],"865":[113,27,113,33],"868":[113,11,113,34],"870":[113,11,113,34],"871":[113,11,113,34],"873":[113,11,113,34],"874":[113,11,113,34],"876":[113,11,113,34],"878":[113,11,113,34],"880":[113,35,113,43],"894":[113,11,113,44],"895":[113,11,113,44],"936":[117,12,117,30],"938":[117,12,117,30],"939":[129,39,129,45],"942":[128,4,128,19],"944":[128,20,128,30],"945":[128,4,128,31],"947":[128,4,128,31],"948":[128,4,128,31],"950":[128,4,128,31],"951":[128,4,128,31],"953":[128,4,128,31],"955":[128,4,128,31],"957":[128,32,128,40],"971":[128,4,128,41],"972":[128,4,128,41],"973":[128,4,128,50],"974":[129,29,129,37],"976":[129,4,129,46],"977":[129,17,129,27],"978":[129,4,129,46]},"runtimeBytecode":{"bytecode":"0x6003361161000c57610e69565b60003560e01c634a92d6ca81186102ef5760243610610f66576004358060a01c610f6657604052600933602052600052604060002054156100a457601f6060527f4669727374206275726e20796f75722063757272656e7420666f7274756e650060805260605060605180608001601f826000031636823750506308c379a06020526020604052601f19601f6060510116604401603cfd5b6006546370a0823160605233608052602060606024607c845afa6100cd573d600060003e3d6000fd5b60203d10610f66576060905051156102905742600b33602052600052604060002054620151808101818110610f665790501161022f5760055460018101818110610f665790506005556009336020526000526040600020805460018101818110610f6657905081555042600b33602052600052604060002055600d5434600e548060640360648111610f66579050808202811583838304141715610f665790509050606481049050808201828110610f665790509050600d55600f5434600e54808202811583838304141715610f665790509050606481049050808201828110610f665790509050600f55600733602052600052604060002060085481553460018201554260028201554460038201555060085460018101818110610f66579050600855337f1e5a50cc96c9a55d13bed3550c9d90f8c7deeebe51c827f15123e3bd592649d1600160a052602060a0a2600160a052602060a06102ed566102ed565b601c60a0527f596f752063616e206f6e6c79206d696e74206f6e63652061206461790000000060c05260a05060a0518060c001601f826000031636823750506308c379a06060526020608052601f19601f60a0510116604401607cfd6102ed565b600c6060527f4e6f742061204c6567656e64000000000000000000000000000000000000000060805260605060605180608001601f826000031636823750506308c379a06020526020604052601f19601f6060510116604401603cfd5bf35b34610f665763503f21cc811861032f5760243610610f66576004358060a01c610f6657604052600960405160205260005260406000205460605260206060f35b63dd62ed3e81186103895760443610610f66576004358060a01c610f66576040526024358060a01c610f6657606052600a604051602052600052604060002080606051602052600052604060002090505460805260206080f35b63095ea7b381186104085760443610610f66576004358060a01c610f6657604052602435600a336020526000526040600020806040516020526000526040600020905055604051337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560243560605260206060a3600160605260206060f35b63a9059cbb811861044e5760443610610f66576004358060a01c610f665760e0523360405260e051606052602435608052610441610e6f565b6001610100526020610100f35b6323b872dd81186105685760643610610f66576004358060a01c610f665760e0526024358060a01c610f665761010052604435600a60e051602052600052604060002080336020526000526040600020905054101561050b576016610120527f496e73756666696369656e7420616c6c6f77616e6365000000000000000000006101405261012050610120518061014001601f826000031636823750506308c379a060e052602061010052601f19601f61012051011660440160fcfd5b600a60e05160205260005260406000208033602052600052604060002090508054604435808203828111610f66579050905081555060e0516040526101005160605260443560805261055b610e6f565b6001610120526020610120f35b6391601563811861090b5760043610610f66576007336020526000526040600020805460405260018101546060526002810154608052600381015460a052506001600933602052600052604060002054101561061b57601f60c0527f596f7520646f6e742068617665206120666f7274756e6520746f206275726e0060e05260c05060c0518060e001601f826000031636823750506308c379a0608052602060a052601f19601f60c0510116604401609cfd5b60805161012c8101818110610f6657905042116106b457602c60c0527f57616974206174206c656173742035206d696e7574657320746f206275726e2060e0527f796f757220666f7274756e6500000000000000000000000000000000000000006101005260c05060c0518060e001601f826000031636823750506308c379a0608052602060a052601f19601f60c0510116604401609cfd5b60055460018103818111610f665790506005556009336020526000526040600020805460018103818111610f66579050815550606051600e548060640360648111610f66579050808202811583838304141715610f66579050905060648104905060c0524744808201828110610f665790509050608051808201828110610f66579050905060a051808201828110610f665790509050604051808201828110610f6657905090506108278106905060018116905061082757337ffa59690ecd4b2307ff53436b582c8720d94cb29c78f067f99af89bfab290b51560a08061012052600460e0527f474f4f44000000000000000000000000000000000000000000000000000000006101005260e0816101200181518082526020830160208301815181525050508051806020830101601f82600003163682375050601f19601f82516020010116905090508101905060405161014052606051610160526080516101805260a0516101a052610120a26108de565b337ffa59690ecd4b2307ff53436b582c8720d94cb29c78f067f99af89bfab290b51560a08061012052600360e0527f42414400000000000000000000000000000000000000000000000000000000006101005260e0816101200181518082526020830160208301815181525050508051806020830101601f82600003163682375050601f19601f82516020010116905090508101905060405161014052606051610160526080516101805260a0516101a052610120a25b600d5460c051808203828111610f665790509050600d55600060006000600060c051336000f115610f6657005b63cba7426f81186109465760243610610f66576004358060a01c610f6657604052600760405160205260005260406000205460605260206060f35b63bc97b0f081186109985760043610610f665760065460405260206040516370a0823160605233608052602060606024607c845afa61098a573d600060003e3d6000fd5b60203d10610f665760609050f35b63261f563981186109b55760043610610f66574760405260206040f35b63f74948ab81186109d45760043610610f6657600e5460405260206040f35b63b387ef9281186109f35760043610610f665760105460405260206040f35b6313af40358118610a9d5760243610610f66576004358060a01c610f66576040523360105418610f66573360105418610a3e57604051601055600160605260206060610a9b56610a9b565b600d6060527f4e6f7420746865206f776e65720000000000000000000000000000000000000060805260605060605180608001601f826000031636823750506308c379a06020526020604052601f19601f6060510116604401603cfd5bf35b632190dfd08118610b525760043610610f66573360105418610f66574715610f66573360105418610af3576000600060006000476010546000f115610f66576000600d55600160405260206040610b5056610b50565b60166040527f4e6f742074686520636f6e7472616374204f776e65720000000000000000000060605260405060405180606001601f826000031636823750506308c379a06000526020602052601f19601f6040510116604401601cfd5bf35b63476343ee8118610c0b5760043610610f66573360105418610f6657600f5415610f66573360105418610bac576000600060006000600f546010546000f115610f66576000600f55600160405260206040610c0956610c09565b60166040527f4e6f742074686520636f6e7472616374204f776e65720000000000000000000060605260405060405180606001601f826000031636823750506308c379a06000526020602052601f19601f6040510116604401601cfd5bf35b63e21a59cc8118610cb15760243610610f66573360105418610f66573360105418610c5257600a60043511610f6657600435600e55600160405260206040610caf56610caf565b60166040527f4e6f742074686520636f6e7472616374204f776e65720000000000000000000060605260405060405180606001601f826000031636823750506308c379a06000526020602052601f19601f6040510116604401601cfd5bf35b6306fdde038118610d365760043610610f66576020806040528060400160005480825260208201600082601f0160051c60028111610f66578015610d0857905b80600101548160051b840152600101818118610cf1575b505050508051806020830101601f82600003163682375050601f19601f825160200101169050810190506040f35b6395d89b418118610d8e5760043610610f66576020806040528060400160035480825260208201600454815250508051806020830101601f82600003163682375050601f19601f825160200101169050810190506040f35b639358928b8118610dad5760043610610f665760055460405260206040f35b639659867e8118610dcc5760043610610f665760085460405260206040f35b636f37b17f8118610deb5760043610610f6657600c5460405260206040f35b63789ced798118610e0a5760043610610f6657600d5460405260206040f35b639249c5898118610e295760043610610f6657600e5460405260206040f35b637518c9658118610e485760043610610f6657600f5460405260206040f35b638da5cb5b8118610e675760043610610f665760105460405260206040f35b505b60006000fd5b60805160096040516020526000526040600020541015610ee657601460a0527f496e73756666696369656e742062616c616e636500000000000000000000000060c05260a05060a0518060c001601f826000031636823750506308c379a06060526020608052601f19601f60a0510116604401607cfd5b600960405160205260005260406000208054608051808203828111610f665790509050815550600960605160205260005260406000208054608051808201828110610f6657905090508155506060516040517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60805160a052602060a0a3565b600080fda165767970657283000307000b"},"sourceId":"fortune.vy","sourcemap":"-1:-1:0:-;;;;:::-;;:::-;:::-;;;;;;;;;:::-;;;;;:::-;;;;;;;:::-;6029:11;;6462:13;6476:10;6462:25;;;;;;;:30;;6455:72;:::-;-1:-1;;6494:33;-1:-1;;6494:33;;6455:72;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6455:72::-;6535:20;:42;-1:-1;;;6566:10;-1:-1;;;;;;6535:42;-1:-1;;;:::-;;;;;;;;:::-;;;;;:::-;;6535:42;;:46;;6532:1974;:::-;6676:15;6636;6652:10;6636:27;;;;;;;-1:-1;6666:7;-1:-1;;;;;;:::-;6636:37;;:55;6633:1770;:::-;6940:22;-1:-1;6966:1;-1:-1;;;;;;:::-;6940:27;;:22;-1:-1;7044:13;7058:10;7044:25;;;;;;;-1:-1;;7073:1;-1:-1;;;;;;:::-;7044:30;;-1:-1;;7044:30;7184:15;7154;7170:10;7154:27;;;;;;;-1:-1;7271:19;:62;7294:9;7311:15;-1:-1;;7307:3;-1:-1;7307:3;-1:-1;;;:::-;7307:19;;-1:-1;;;;;;;;;;;;;:::-;;;7294:33;;7330:3;7294:39;-1:-1;7294:39;;-1:-1;7271:62;-1:-1;7271:62;-1:-1;;;:::-;7271:62;;;;:19;:62;7391:16;:51;7411:9;7423:15;-1:-1;;;;;;;;;;;;;;:::-;;;7411:27;;7439:3;7411:31;-1:-1;7411:31;;-1:-1;7391:51;-1:-1;7391:51;-1:-1;;;:::-;7391:51;;;;:16;:51;7496:16;7513:10;7496:28;;;;;;;7623:14;-1:-1;7496:657;-1:-1;7736:9;-1:-1;7496:657;-1:-1;;7873:15;-1:-1;7496:657;-1:-1;;7996:16;-1:-1;7496:657;-1:-1;;7496:657;8166:14;-1:-1;8184:1;-1:-1;;;;;;:::-;8166:19;;:14;-1:-1;8300:10;8284:95;8313:66;-1:-1;;;8284:95;;8399:4;-1:-1;;;;;:::-;;6633:1770::-;:::-;-1:-1;;6758:30;-1:-1;;6758:30;;6752:36;-1:-1;;;;;;;;;;;;;;6752:36;-1:-1;;6752:36;-1:-1;;6752:36;-1:-1;;;;;;;;;;6752:36;-1:-1;6532:1974::-;:::-;-1:-1;;8492:14;-1:-1;;8492:14;;8486:20;-1:-1;;;;;;;;;;;;;;8486:20;-1:-1;;8486:20;-1:-1;;8486:20;-1:-1;;;;;;;;;;8486:20;-1:-1::-;;:::-;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;2859:15;;3054:13;3068:6;-1:-1;3054:21;;;;;;;-1:-1;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;3108:16;;-1:-1;;;;;;:::-;3126:18;;3446:15;3462:6;-1:-1;3446:23;;;;;;;-1:-1;3470:8;-1:-1;;;;;;;;3446:33;;-1:-1;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;3515:18;;4319:6;-1:-1;4233:15;4249:10;4233:27;;;;;;;-1:-1;4261:8;-1:-1;;;;;;;;4233:37;;:46;4309:8;4284:42;4297:10;4284:42;4319:6;-1:-1;;;;4284:42;;4338:4;-1:-1;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;4885:13;;5259:10;-1:-1;;5271:3;-1:-1;;;5276:6;-1:-1;;;;5244:39;:::i;:::-;5295:4;-1:-1;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;5340:15;;-1:-1;;;;;;:::-;5357:13;;5969:6;5818:44;:15;5834:5;-1:-1;5818:22;;;;;;;-1:-1;5841:10;-1:-1;;;;;;;5818:34;;:44;-1:-1;5811:77;;:::-;-1:-1;;5864:24;-1:-1;;5864:24;;5811:77;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5811:77::-;5893:15;5909:5;-1:-1;5893:22;;;;;;;-1:-1;5916:10;-1:-1;;;;;;;5893:34;;:44;;5969:6;-1:-1;;5893:44;-1:-1;5893:44;-1:-1;;;:::-;5893:44;;;;;-1:-1;5893:44;5957:5;-1:-1;;;5964:3;-1:-1;;;5969:6;-1:-1;;;;5942:34;:::i;:::-;5988:4;-1:-1;;;;;:::-;;;;;:::-;;;;;:::-;8906:16;8923:10;8906:28;;;;;;;8876:58;-1:-1;;;;8876:58;-1:-1;;;;;8876:58;-1:-1;;;;;8876:58;-1:-1;;;;8876:58;8975:1;8946:13;8960:10;8946:25;;;;;;;-1:-1;;8939:72;;:::-;-1:-1;;8978:33;-1:-1;;8978:33;;8939:72;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8939:72::-;9041:25;:31;9069:3;9041:31;-1:-1;9041:31;-1:-1;;;:::-;9041:31;;9023:15;:49;9016:105;:::-;-1:-1;;9075:46;-1:-1;;9075:46;-1:-1;;9075:46;;9016:105;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9016:105::-;9126:22;-1:-1;9152:1;-1:-1;;;;;;:::-;9126:27;;:22;-1:-1;9158:13;9172:10;9158:25;;;;;;;-1:-1;;9187:1;-1:-1;;;;;;:::-;9158:30;;-1:-1;;9158:30;9754:28;:52;9790:15;-1:-1;;9786:3;-1:-1;9786:3;-1:-1;;;:::-;9786:19;;-1:-1;9754:52;-1:-1;;;9754:52;-1:-1;;;;;;;:::-;9754:52;;;;9809:3;9754:58;-1:-1;9754:58;;9736:76;;9823:12;9838:16;-1:-1;;;;;;;:::-;;;9823:31;;9857:25;-1:-1;;9823:59;-1:-1;9823:59;-1:-1;;;:::-;9823:59;;;;9885:25;-1:-1;;9823:87;-1:-1;9823:87;-1:-1;;;:::-;9823:87;;;;9913:25;-1:-1;;9823:115;-1:-1;9823:115;-1:-1;;;:::-;9823:115;;;;9942:4;9821:125;;;;-1:-1;9820:131;;;;9817:324;:::-;9982:10;9966:51;-1:-1;;;;;;9994:6;-1:-1;;9994:6;;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9966:51;;9817:324;:::-;:::-;10107:10;10091:50;-1:-1;;;;;;10119:5;-1:-1;;10119:5;;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10091:50;;9817:324::-;10203:19;-1:-1;10226:6;-1:-1;;;;;;;;:::-;;;10203:29;;:19;-1:-1;;;;;10337:6;-1:-1;10325:10;-1:-1;;10320:24;;:::-;-1:-1;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;10455:14;;10653:16;10670:6;-1:-1;10653:24;;;;;;;-1:-1;;;;;;:::-;;;;;:::-;;;;;:::-;10917:20;-1:-1;;10890:47;-1:-1;10949:7;:29;-1:-1;;;10967:10;-1:-1;;;;;;10949:29;-1:-1;;;:::-;;;;;;;;:::-;;;;;:::-;;10949:29;;-1:-1;:::-;;;;;:::-;;;;;:::-;11228:12;-1:-1;;;;;:::-;;;;;:::-;;;;;:::-;11392:15;-1:-1;;;;;;:::-;;;;;:::-;;;;;:::-;11569:10;-1:-1;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;11609:17;;12006:10;11992;:24;;11985:31;:::-;12078:10;12064;:24;;12061:156;:::-;12119:9;-1:-1;12106:10;-1:-1;12173:4;-1:-1;;;;;:::-;;12061:156::-;:::-;-1:-1;;12202:15;-1:-1;;12202:15;;12196:21;-1:-1;;;;;;;;;;;;;;12196:21;-1:-1;;12196:21;-1:-1;;12196:21;-1:-1;;;;;;;;;;12196:21;-1:-1::-;;:::-;;;;;:::-;;;;;:::-;12501:10;12487;:24;;12480:31;:::-;12523:12;:16;12516:23;:::-;12561:10;12547;:24;;12544:168;:::-;-1:-1;;;;12598:12;12586:10;-1:-1;;;12581:30;;:::-;12642:1;12620:19;-1:-1;12659:4;-1:-1;;;;;:::-;;12544:168::-;:::-;-1:-1;;12688:24;-1:-1;;12688:24;;12682:30;-1:-1;;;;;;;;;;;;;;12682:30;-1:-1;;12682:30;-1:-1;;12682:30;-1:-1;;;;;;;;;;12682:30;-1:-1::-;;:::-;;;;;:::-;;;;;:::-;12946:10;12932;:24;;12925:31;:::-;12968:16;:20;;12961:27;:::-;13010:10;12996;:24;;12993:169;:::-;-1:-1;;;;13047:16;-1:-1;13035:10;-1:-1;;;13030:34;;:::-;13092:1;13073:16;-1:-1;13109:4;-1:-1;;;;;:::-;;12993:169::-;:::-;-1:-1;;13138:24;-1:-1;;13138:24;;13132:30;-1:-1;;;;;;;;;;;;;;13132:30;-1:-1;;13132:30;-1:-1;;13132:30;-1:-1;;;;;;;;;;13132:30;-1:-1::-;;:::-;;;;;:::-;;;;;:::-;13570:10;13556;:24;;13549:31;:::-;13637:10;13623;:24;;13620:278;:::-;13730:2;13804:10;13716:16;-1:-1;13709:23;:::-;13804:10;-1:-1;13786:15;:28;13845:4;-1:-1;;;;;:::-;;13620:278::-;:::-;-1:-1;;13874:24;-1:-1;;13874:24;;13868:30;-1:-1;;;;;;;;;;;;;;13868:30;-1:-1;;13868:30;-1:-1;;13868:30;-1:-1;;;;;;;;;;13868:30;-1:-1::-;;:::-;;;;;:::-;;;;;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::-;;;;:::-;;:::-;;;;;;;;;;;;;;;;;:::-;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;:::-;;;;4355:493::-;4713:6;-1:-1;4689:13;4703:5;-1:-1;4689:20;;;;;;;-1:-1;;4682:61;;:::-;-1:-1;;4721:22;-1:-1;;4721:22;;4682:61;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4682:61::-;4748:13;4762:5;-1:-1;4748:20;;;;;;;-1:-1;;4772:6;-1:-1;;;;;;;;:::-;;;4748:30;;-1:-1;;4748:30;4783:13;4797:3;-1:-1;4783:18;;;;;;;-1:-1;;4805:6;-1:-1;;;;;;;;:::-;;;4783:28;;-1:-1;;4783:28;4836:3;4816:32;4829:5;4816:32;;4841:6;-1:-1;;;;4816:32;;-1:-1::-;:::-;;;","userdoc":{"methods":{"allowance(address,address)":{"notice":"Getter to check the amount of tokens that an owner allowed to a spender"},"approve(address,uint256)":{"notice":"Approve an address to spend the specified amount of tokens on behalf of msg.sender"},"burnFortune()":{"notice":"Burn a fortune from an specified address"},"currentCardIdFrom(address)":{"notice":"Getter to check the current cardNumber of an address This is useful because legends can only have one fortune at a time"},"currentOwner()":{"notice":"Getter to check the current owner of the fortune chest"},"fortuneBalance(address)":{"notice":"Getter to check the current balance of an address"},"getFortuneChestBalance()":{"notice":"Getter to check the current ETH balance of the fortune chest"},"getLegendBalance()":{"notice":"Getter to check the current balance of an address"},"getTributeFee()":{"notice":"Getter to check the current tribute fee"},"mintFortune(address)":{"notice":"Mint a fortune to an specified address which holds the nft"},"rugPull()":{"notice":"Withdraw all the ETH from the fortune chest"},"setOwner(address)":{"notice":"Setter to set the owner of the fortune chest"},"setTributeFee(uint256)":{"notice":"Setter to set the tribute fee"},"transfer(address,uint256)":{"notice":"Transfer tokens to a specified address"},"transferFrom(address,address,uint256)":{"notice":"Transfer tokens from one address to another"},"withdrawFees()":{"notice":"Withdraw all the fees from the fortune chest"}},"notice":"This is a bare-bones implementation of the Fortune cards It is not meant to be used in production, but rather as a starting point for the final implementation Owners of the Legends NFT can mint an unrevealed Fortune card as an ERC20 to any address, and pay an upfront tribute. The Fortune cards can be burned to generate an event of GOOD or BAD fortune. The event is a string of 4 characters, which can be used by the frontend to display a message, and for the game to build upon it later. The Fortune cards can be traded, but only the owner of the NFT can mint a new Fortune card. When the FORTUNE card is burnt, the burner can get back their initial tribute minus a fee. There is a withdraw function that can only be called by the owner of the contract. This is to allow the owner to withdraw the ETH tributes."}},"fortune721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":true,"name":"receiver","type":"address"},{"indexed":true,"name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"approved","type":"address"},{"indexed":true,"name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"operator","type":"address"},{"indexed":false,"name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"inputs":[{"name":"_feesRate","type":"uint256"},{"name":"legendsAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"name":"interface_id","type":"bytes4"}],"name":"supportsInterface","outputs":[{"name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"name":"_tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"name":"_tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"name":"_owner","type":"address"},{"name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_tokenId","type":"uint256"},{"name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"name":"_approved","type":"address"},{"name":"_tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"name":"_operator","type":"address"},{"name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_to","type":"address"}],"name":"mintFortune","outputs":[{"name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"name":"_tokenId","type":"uint256"}],"name":"burnFortune","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"name":"_baseURL","type":"string"}],"name":"updateBaseURL","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_newFeesRate","type":"uint256"}],"name":"setFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_newOwner","type":"address"}],"name":"setOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fortunesMinted","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tributesPlaying","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feesRate","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feesBalance","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"contractName":"fortune721","deploymentBytecode":{"bytecode":"0x6020610da86000396000518060a01c610d835760405234610d835733600455601f6060527f68747470733a2f2f6170692e62616262792e78797a2f6d657461646174612f00608052606080518060055560208201805160065550505060006009556020610d88600039600051600d55604051600855610cfc61008661000039610cfc610000f36003361161000c57610adf565b60003560e01c6323b872dd81186100695760643610610cea576004358060a01c610cea576101a0526024358060a01c610cea576101c0526101a051610100526101c05161012052604435610140523361016052610067610c48565b005b6342842e0e81186100935760643610610cea576000610600526106008051806101e05250506100cb565b63b88d4fde81186101f05760a43610610cea57606435600401610400813511610cea578035806101e052602082018181610200375050505b6004358060a01c610cea576101a0526024358060a01c610cea576101c0526101a051610100526101c0516101205260443561014052336101605261010d610c48565b6101c0513b156101ee576101c05163150b7a0261064052608033610660526101a051610680526044356106a052806106c05280610660016101e0518082526020820181818361020060045afa5050508051806020830101601f82600003163682375050601f19601f8251602001011690508101505060206106406104a461065c6000855af16101a1573d600060003e3d6000fd5b60203d10610cea57610640518060201b610cea57610b0052610b00905051610620527f150b7a02000000000000000000000000000000000000000000000000000000006106205118610cea575b005b63095ea7b381186102cd5760443610610cea576004358060a01c610cea57604052600060243560205260005260406000205460605260605115610cea5760605160405114610cea5733600060243560205260005260406000205414608052600360605160205260005260406000208033602052600052604060002090505460a0526080516102805760a051610283565b60015b15610cea5760405160016024356020526000526040600020556024356040516060517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600060c0a4005b634a92d6ca81186104925760243610610cea576004358060a01c610cea5760805234600d54808202811583838304141715610cea579050905060648104905060a05260095460018101818110610cea57905060c0526004543318610cea5742600b33602052600052604060002054620151808101818110610cea579050116104315760805115610cea5760805160405260c05160605261036b610b66565b42600b33602052600052604060002055600a60c05160205260005260406000203481554260018201554360028201554460038201555060095460018101818110610cea579050600955600e5460a051808201828110610cea5790509050600e55600c543460a051808203828111610cea5790509050808201828110610cea5790509050600c5560c05160805160007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600060e0a4600160e052602060e061049056610490565b601c60e0527f596f752063616e206f6e6c79206d696e74206f6e6365206120646179000000006101005260e05060e0518061010001601f826000031636823750506308c379a060a052602060c052601f19601f60e051011660440160bcfd5bf35b34610cea576301ffc9a781186105195760243610610cea576004358060201b610cea576040526040517f01ffc9a70000000000000000000000000000000000000000000000000000000081186104e957600161050e565b7f80ac58cd000000000000000000000000000000000000000000000000000000008118155b905060805260206080f35b6370a08231811861055c5760243610610cea576004358060a01c610cea5760405260405115610cea57600260405160205260005260406000205460605260206060f35b636352211e81186105915760243610610cea57600060043560205260005260406000205460405260405115610cea5760206040f35b63081812fc81186105d45760243610610cea57600060043560205260005260406000205415610cea57600160043560205260005260406000205460405260206040f35b63e985e9c5811861062e5760443610610cea576004358060a01c610cea576040526024358060a01c610cea576060526003604051602052600052604060002080606051602052600052604060002090505460805260206080f35b63a22cb46581186106bb5760443610610cea576004358060a01c610cea576040526024358060011c610cea576060523360405114610cea576060516003336020526000526040600020806040516020526000526040600020905055604051337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160605160805260206080a3005b63e705ecfb81186108075760243610610cea57336040526004356060526106e3610100610ae5565b6101005115610cea5760006004356020526000526040600020546101005242600a60043560205260005260406000206001810190505461012c8101818110610cea5790501015610cea576101005115610cea576101005160405260043560605261074b610c03565b61010051604052600435606052610760610bb3565b600a6004356020526000526040600020546101205261012051600d548060640360648111610cea579050808202811583838304141715610cea579050905060648104905061014052600060006000600061014051336000f115610cea57600c5461014051808203828111610cea5790509050600c556004356000610100517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000610160a4005b63c87b56dd811861092f5760243610610cea576020806101805260006005548160e001600082601f0160051c60028111610cea57801561085a57905b80600601548160051b840152600101818118610843575b5050508082019150506004358061087c576030604152600160405260406108be565b6000604f905b8261089c578081608e035280608e0392506108ba566108af565b600a830660300181608e0352600a830492505b600101818118610882575b5050805b90508051602082018360e0018281848460045afa505050808301925050508060c05260c090508161018001815180825260208301602083018281848460045afa505050508051806020830101601f82600003163682375050601f19601f825160200101169050905081019050610180f35b63870d6f9d81186109a95760443610610cea576004356004016035813511610cea578035806040526020820181816060375050506004543318610cea5760405180600555600081601f0160051c60028111610cea5780156109a457905b8060051b60600151816006015560010181811861098c575b505050005b633d18678e81186109d75760243610610cea57600a60043511610cea576004543318610cea57600435600d55005b63476343ee8118610a105760043610610cea576004543318610cea576000600060006000600e546004546000f115610cea576000600e55005b6313af40358118610a425760243610610cea576004358060a01c610cea576040526004543318610cea57604051600455005b638da5cb5b8118610a615760043610610cea5760045460405260206040f35b631b1528b08118610a805760043610610cea5760095460405260206040f35b637aafcca38118610a9f5760043610610cea57600c5460405260206040f35b63127043c38118610abe5760043610610cea57600d5460405260206040f35b637518c9658118610add5760043610610cea57600e5460405260206040f35b505b60006000fd5b60006060516020526000526040600020546080526040516080511460a05260016060516020526000526040600020546040511460c0526003608051602052600052604060002080604051602052600052604060002090505460e05260a051610b4f5760c051610b52565b60015b610b5e5760e051610b61565b60015b815250565b6000606051602052600052604060002054610cea57604051600060605160205260005260406000205560026040516020526000526040600020805460018101818110610cea579050815550565b604051600060605160205260005260406000205418610cea576000600060605160205260005260406000205560026040516020526000526040600020805460018103818111610cea579050815550565b604051600060605160205260005260406000205418610cea57600160605160205260005260406000205415610c4657600060016060516020526000526040600020555b565b6101605160405261014051606052610c61610180610ae5565b6101805115610cea576101205115610cea576101005160405261014051606052610c89610c03565b6101005160405261014051606052610c9f610bb3565b6101205160405261014051606052610cb5610b66565b6101405161012051610100517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000610180a4565b600080fda165767970657283000307000b005b600080fd"},"dev_messages":{},"devdoc":{"methods":{"__init__(uint256,address)":{"details":"Contract constructor."},"approve(address,uint256)":{"details":"Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner. Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP) Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)","params":{"_approved":"Address to be approved for the given NFT ID.","_tokenId":"ID of the token to be approved."}},"balanceOf(address)":{"details":"Returns the number of NFTs owned by `_owner`. Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.","params":{"_owner":"Address for whom to query the balance."}},"burnFortune(uint256)":{"details":"Burns a specific ERC721 token. Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_tokenId` is not a valid NFT.","params":{"_tokenId":"uint256 id of the ERC721 token to be burned."}},"getApproved(uint256)":{"details":"Get the approved address for a single NFT. Throws if `_tokenId` is not a valid NFT.","params":{"_tokenId":"ID of the NFT to query the approval of."}},"isApprovedForAll(address,address)":{"details":"Checks if `_operator` is an approved operator for `_owner`.","params":{"_operator":"The address that acts on behalf of the owner.","_owner":"The address that owns the NFTs."}},"mintFortune(address)":{"details":"Function to mint tokens Throws if `msg.sender` is not the owner. Throws if `_to` is zero address. Throws if `_tokenId` is owned by someone.","params":{"_to":"The address that will receive the minted tokens."},"returns":{"_0":"A boolean that indicates if the operation was successful."}},"ownerOf(uint256)":{"details":"Returns the address of the owner of the NFT. Throws if `_tokenId` is not a valid NFT.","params":{"_tokenId":"The identifier for an NFT."}},"safeTransferFrom(address,address,uint256)":{"details":"Transfers the ownership of an NFT from one address to another address. Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.","params":{"_data":"Additional data with no specified format, sent in call to `_to`.","_from":"The current owner of the NFT.","_to":"The new owner.","_tokenId":"The NFT to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Transfers the ownership of an NFT from one address to another address. Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.","params":{"_data":"Additional data with no specified format, sent in call to `_to`.","_from":"The current owner of the NFT.","_to":"The new owner.","_tokenId":"The NFT to transfer."}},"setApprovalForAll(address,bool)":{"details":"Enables or disables approval for a third party (\"operator\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event. Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)","params":{"_approved":"True if the operators is approved, false to revoke approval.","_operator":"Address to add to the set of authorized operators."}},"supportsInterface(bytes4)":{"details":"Interface identification is specified in ERC-165.","params":{"interface_id":"Id of the interface"}},"transferFrom(address,address,uint256)":{"details":"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.","params":{"_from":"The current owner of the NFT.","_to":"The new owner.","_tokenId":"The NFT to transfer."}}}},"pcmap":{"1005":[382,8,382,48],"1006":[382,8,382,48],"1007":[382,8,382,28],"1010":[383,42,383,49],"1012":[383,8,383,50],"1013":[383,37,383,40],"1015":[383,8,383,50],"1016":[383,8,383,50],"1018":[383,8,383,50],"102":[277,4,277,56],"1051":[383,8,383,50],"1053":[383,8,383,50],"1055":[383,8,383,50],"1056":[384,15,384,19],"1072":[367,4,384,19],"1073":[367,4,384,19],"1078":[368,14,368,44],"1115":[368,14,368,44],"1116":[368,14,368,44],"1118":[368,8,368,44],"113":[282,0,306,110],"1138":[368,8,368,44],"1146":[368,8,368,44],"1151":[368,8,368,44],"116":[282,0,306,110],"1167":[368,8,368,44],"1206":[116,22,116,42],"1208":[116,22,116,42],"1209":[121,11,121,23],"1211":[121,11,121,47],"1212":[121,27,121,47],"1245":[121,11,121,47],"1247":[121,11,121,47],"1250":[121,11,121,47],"1253":[121,11,121,47],"1256":[121,11,121,47],"1257":[121,11,121,47],"1258":[121,27,121,47],"1291":[121,11,121,47],"1294":[121,11,121,47],"1295":[121,11,121,47],"1296":[121,11,121,47],"1336":[128,14,128,29],"1338":[128,14,128,29],"1339":[134,11,134,17],"1341":[134,11,134,35],"1342":[134,11,134,35],"1343":[134,4,134,35],"1346":[134,4,134,35],"1347":[135,11,135,35],"1349":[135,36,135,42],"1352":[135,11,135,43],"1354":[135,11,135,43],"1355":[135,11,135,43],"1357":[135,11,135,43],"1358":[135,11,135,43],"1360":[135,11,135,43],"1362":[135,11,135,43],"137":[286,8,286,26],"1392":[146,21,146,35],"1394":[146,36,146,44],"1396":[146,21,146,45],"1397":[146,21,146,45],"1399":[146,21,146,45],"1400":[146,21,146,45],"1402":[146,21,146,45],"1403":[146,21,146,45],"1405":[146,21,146,45],"1407":[146,21,146,45],"1408":[146,4,146,45],"1409":[146,4,146,45],"1411":[146,4,146,45],"1412":[148,11,148,16],"1414":[148,11,148,34],"1415":[148,11,148,34],"1416":[148,4,148,34],"1419":[148,4,148,34],"142":[286,8,286,26],"1422":[149,11,149,16],"1445":[161,11,161,25],"1447":[162,30,162,38],"1449":[161,11,161,35],"1450":[161,11,161,35],"1452":[161,11,161,35],"1453":[161,11,161,35],"1455":[161,11,161,35],"1456":[161,11,161,35],"1458":[161,11,161,35],"1460":[161,11,161,35],"1461":[161,11,161,53],"1462":[161,11,161,53],"1463":[161,4,161,53],"1466":[161,4,161,53],"1467":[162,11,162,29],"1469":[162,30,162,38],"147":[282,0,306,110],"1471":[162,11,162,39],"1472":[162,11,162,39],"1474":[162,11,162,39],"1475":[162,11,162,39],"1477":[162,11,162,39],"1478":[162,11,162,39],"1480":[162,11,162,39],"1482":[162,11,162,39],"1523":[167,21,167,36],"1525":[167,21,167,36],"1537":[167,38,167,56],"1539":[167,38,167,56],"1540":[173,12,173,33],"1542":[173,34,173,40],"1545":[173,12,173,41],"1547":[173,12,173,41],"1548":[173,12,173,41],"155":[282,0,306,110],"1550":[173,12,173,41],"1551":[173,12,173,41],"1553":[173,12,173,41],"1555":[173,12,173,41],"1557":[173,43,173,52],"1571":[173,11,173,53],"1572":[173,11,173,53],"158":[282,0,306,110],"1613":[335,22,335,40],"1615":[335,22,335,40],"1627":[335,42,335,57],"1629":[335,42,335,57],"1630":[345,24,345,34],"1631":[345,11,345,20],"1635":[345,4,345,34],"1638":[345,4,345,34],"1639":[346,51,346,60],"1642":[346,4,346,25],"1644":[346,26,346,36],"1645":[346,4,346,37],"1647":[346,4,346,37],"1648":[346,4,346,37],"1650":[346,4,346,37],"1651":[346,4,346,37],"1653":[346,4,346,37],"1655":[346,4,346,37],"1657":[346,38,346,47],"1671":[346,4,346,48],"1672":[346,4,346,48],"1674":[347,35,347,44],"1676":[347,4,347,56],"1677":[347,23,347,33],"1678":[347,4,347,56],"1711":[347,46,347,55],"1719":[347,4,347,56],"172":[286,8,286,26],"1721":[347,4,347,56],"1743":[397,35,397,45],"1747":[411,40,411,48],"1756":[397,11,397,56],"1759":[397,11,397,56],"176":[286,8,286,26],"1762":[397,11,397,56],"1763":[397,11,397,56],"1764":[397,11,397,56],"1767":[397,4,397,56],"1768":[397,4,397,56],"1769":[397,4,397,56],"1772":[397,4,397,56],"1773":[398,21,398,35],"1775":[411,40,411,48],"1777":[398,21,398,45],"1778":[398,21,398,45],"1780":[398,21,398,45],"1781":[398,21,398,45],"1783":[398,21,398,45],"1784":[398,21,398,45],"1786":[398,21,398,45],"1788":[398,21,398,45],"1789":[398,4,398,45],"1790":[398,4,398,45],"1793":[398,4,398,45],"1794":[400,62,400,77],"1795":[400,11,400,32],"1797":[411,40,411,48],"1799":[400,11,400,42],"1800":[400,11,400,42],"1802":[400,11,400,42],"1803":[400,11,400,42],"1805":[400,11,400,42],"1806":[400,11,400,42],"1808":[400,11,400,42],"1810":[400,11,400,42],"1813":[400,11,400,53],"1814":[400,11,400,53],"1815":[400,11,400,53],"1816":[400,11,400,53],"1817":[400,11,400,59],"1818":[400,56,400,59],"1821":[400,11,400,59],"1823":[400,11,400,59],"183":[286,8,286,26],"1830":[400,11,400,59],"1831":[400,11,400,59],"1832":[400,11,400,77],"1833":[400,4,400,77],"1834":[400,4,400,77],"1837":[400,4,400,77],"1838":[402,11,402,16],"1841":[402,11,402,34],"1842":[402,11,402,34],"1843":[402,4,402,34],"1846":[402,4,402,34],"1847":[403,24,403,29],"1854":[411,40,411,48],"1863":[403,4,403,40],"1866":[403,4,403,40],"1867":[403,4,403,40],"1868":[404,26,404,31],"1875":[411,40,411,48],"1884":[404,4,404,42],"1887":[404,4,404,42],"1888":[404,4,404,42],"1889":[407,23,407,44],"1891":[411,40,411,48],"1893":[407,23,407,54],"1894":[407,23,407,54],"1896":[407,23,407,54],"1897":[407,23,407,54],"1899":[407,23,407,54],"1900":[407,23,407,54],"1902":[407,23,407,54],"1904":[407,23,407,54],"1905":[407,4,407,62],"1906":[407,4,407,62],"1909":[407,4,407,62],"1910":[408,30,408,37],"1914":[408,45,408,58],"1918":[408,41,408,44],"192":[286,8,286,26],"1921":[408,41,408,44],"1929":[408,41,408,58],"1930":[408,41,408,58],"1949":[408,30,408,59],"1950":[408,30,408,59],"1951":[408,62,408,65],"1953":[408,30,408,65],"1955":[408,30,408,65],"1956":[408,30,408,65],"1957":[408,4,408,65],"1960":[408,4,408,65],"1969":[409,21,409,35],"1973":[409,9,409,19],"1977":[409,4,409,36],"1978":[409,4,409,36],"1981":[409,4,409,36],"1982":[410,4,410,24],"1985":[410,28,410,42],"2001":[410,4,410,42],"2002":[410,4,410,42],"2003":[410,4,410,24],"2006":[411,40,411,48],"2008":[411,4,411,49],"2009":[411,4,411,49],"2011":[411,17,411,22],"2014":[411,4,411,49],"2015":[411,4,411,49],"202":[286,8,286,26],"2048":[411,4,411,49],"2050":[411,4,411,49],"2053":[411,4,411,49],"2082":[417,11,417,50],"2084":[417,18,417,30],"2148":[417,41,417,48],"215":[283,8,283,22],"2150":[417,32,417,49],"2151":[417,32,417,49],"2152":[417,32,417,49],"2155":[417,32,417,49],"2168":[417,32,417,49],"2171":[417,32,417,49],"2172":[417,32,417,49],"2179":[417,32,417,49],"218":[283,8,283,22],"2207":[417,32,417,49],"2219":[417,32,417,49],"2237":[417,32,417,49],"2238":[417,32,417,49],"2239":[417,32,417,49],"2240":[417,32,417,49],"2275":[417,11,417,50],"2276":[417,11,417,50],"230":[284,8,284,20],"233":[284,8,284,20],"234":[302,23,302,28],"2376":[420,18,420,38],"2379":[420,18,420,38],"2386":[420,18,420,38],"2394":[420,18,420,38],"2403":[420,18,420,38],"2404":[421,25,421,35],"2406":[421,11,421,35],"2407":[421,11,421,21],"2408":[421,11,421,35],"2409":[421,4,421,35],"2412":[421,4,421,35],"2413":[422,19,422,27],"2415":[422,4,422,27],"2416":[422,4,422,27],"2417":[422,4,422,16],"242":[302,30,302,33],"2422":[422,4,422,27],"2471":[422,4,422,27],"2493":[426,27,426,29],"2495":[428,20,428,32],"2497":[426,11,426,29],"2499":[426,4,426,29],"250":[304,86,304,94],"2502":[426,4,426,29],"2503":[427,25,427,35],"2505":[427,11,427,35],"2506":[427,11,427,21],"2507":[427,11,427,35],"2508":[427,4,427,35],"2511":[427,4,427,35],"2512":[428,20,428,32],"2515":[428,4,428,17],"2517":[428,4,428,32],"2539":[432,25,432,35],"2541":[432,11,432,35],"2542":[432,11,432,21],"2543":[432,11,432,35],"2544":[432,4,432,35],"2547":[432,4,432,35],"2556":[433,21,433,37],"2559":[433,9,433,19],"2565":[433,4,433,38],"2566":[433,4,433,38],"2569":[433,4,433,38],"257":[302,45,302,55],"2570":[434,23,434,24],"2572":[434,4,434,20],"2607":[437,13,437,31],"2609":[437,13,437,31],"2610":[438,25,438,35],"2612":[438,11,438,35],"2613":[438,11,438,21],"2614":[438,11,438,35],"2615":[438,4,438,35],"2618":[438,4,438,35],"2619":[439,17,439,26],"2622":[439,4,439,14],"265":[302,4,302,56],"268":[302,4,302,56],"269":[302,4,302,56],"270":[303,7,303,10],"274":[303,7,303,22],"275":[303,7,303,22],"2789":[180,0,192,75],"279":[303,4,306,110],"2790":[188,21,188,35],"2792":[188,36,188,44],"2795":[188,21,188,45],"2797":[188,21,188,45],"2798":[188,21,188,45],"280":[304,30,304,49],"2800":[188,21,188,45],"2801":[188,21,188,45],"2803":[188,21,188,45],"2805":[188,21,188,45],"2809":[188,4,188,45],"2810":[189,36,189,44],"2813":[189,27,189,32],"2816":[189,27,189,44],"2819":[189,4,189,44],"2820":[190,42,190,60],"2822":[190,61,190,69],"2825":[190,42,190,70],"2827":[190,42,190,70],"2828":[190,42,190,70],"283":[304,30,304,102],"2830":[190,42,190,70],"2831":[190,42,190,70],"2833":[190,42,190,70],"2835":[190,42,190,70],"2837":[190,30,190,38],"2840":[190,30,190,70],"2843":[190,4,190,70],"2844":[191,37,191,58],"2846":[191,59,191,64],"2849":[191,37,191,65],"2851":[191,37,191,65],"2852":[191,37,191,65],"2854":[191,37,191,65],"2855":[191,37,191,65],"2857":[191,37,191,65],"2859":[191,37,191,65],"2861":[191,67,191,75],"2875":[191,36,191,76],"2876":[191,36,191,76],"2880":[191,4,191,76],"2881":[192,12,192,26],"2884":[192,12,192,47],"2887":[192,12,192,47],"2888":[192,30,192,47],"2890":[192,12,192,47],"2891":[192,12,192,47],"2894":[192,12,192,47],"2895":[192,12,192,47],"2896":[192,12,192,47],"2898":[192,12,192,47],"2899":[192,11,192,75],"2902":[192,11,192,75],"2903":[192,52,192,75],"2905":[192,11,192,75],"2906":[192,11,192,75],"2909":[192,11,192,75],"2910":[192,11,192,75],"2911":[192,11,192,75],"2913":[192,11,192,75],"2915":[192,4,192,75],"2916":[192,4,192,75],"2918":[196,0,206,38],"2919":[202,11,202,25],"2921":[202,26,202,34],"2924":[202,11,202,35],"2926":[202,11,202,35],"2927":[202,11,202,35],"2929":[202,11,202,35],"2930":[202,11,202,35],"2932":[202,11,202,35],"2934":[202,11,202,35],"2935":[202,11,202,53],"2936":[202,4,202,53],"2939":[202,4,202,53],"2940":[204,31,204,34],"2943":[204,4,204,18],"2945":[204,19,204,27],"2948":[204,4,204,28],"295":[304,67,304,77],"2950":[204,4,204,28],"2951":[204,4,204,28],"2953":[204,4,204,28],"2954":[204,4,204,28],"2956":[204,4,204,28],"2958":[204,4,204,28],"2960":[206,4,206,28],"2962":[206,29,206,32],"2965":[206,4,206,33],"2967":[206,4,206,33],"2968":[206,4,206,33],"2970":[206,4,206,33],"2971":[206,4,206,33],"2973":[206,4,206,33],"2975":[206,4,206,33],"2978":[206,37,206,38],"2989":[206,4,206,38],"2990":[206,4,206,38],"2993":[206,4,206,38],"2995":[210,0,220,40],"2996":[216,39,216,44],"2998":[216,11,216,44],"2999":[216,11,216,25],"300":[304,79,304,84],"3001":[216,26,216,34],"3004":[216,11,216,35],"3006":[216,11,216,35],"3007":[216,11,216,35],"3009":[216,11,216,35],"3010":[216,11,216,35],"3012":[216,11,216,35],"3014":[216,11,216,35],"3015":[216,11,216,44],"3016":[216,11,216,44],"3017":[216,4,216,44],"3020":[216,4,216,44],"3023":[218,4,218,18],"3025":[218,19,218,27],"3028":[218,4,218,28],"3030":[218,4,218,28],"3031":[218,4,218,28],"3033":[218,4,218,28],"3034":[218,4,218,28],"3036":[218,4,218,28],"3038":[218,4,218,28],"3040":[220,4,220,28],"3042":[220,29,220,34],"3045":[220,4,220,35],"3047":[220,4,220,35],"3048":[220,4,220,35],"3050":[220,4,220,35],"3051":[220,4,220,35],"3053":[220,4,220,35],"3055":[220,4,220,35],"3058":[220,39,220,40],"3069":[220,4,220,40],"3070":[220,4,220,40],"3073":[220,4,220,40],"3075":[224,0,233,53],"3076":[230,39,230,45],"3078":[230,11,230,45],"3079":[230,11,230,25],"308":[304,86,304,94],"3081":[230,26,230,34],"3084":[230,11,230,35],"3086":[230,11,230,35],"3087":[230,11,230,35],"3089":[230,11,230,35],"3090":[230,11,230,35],"3092":[230,11,230,35],"3094":[230,11,230,35],"3095":[230,11,230,45],"3096":[230,11,230,45],"3097":[230,4,230,45],"3100":[230,4,230,45],"3101":[231,7,231,25],"3103":[231,26,231,34],"3106":[231,7,231,35],"3108":[231,7,231,35],"3109":[231,7,231,35],"3111":[231,7,231,35],"3112":[231,7,231,35],"3114":[231,7,231,35],"3116":[231,7,231,35],"3117":[231,7,231,53],"3118":[231,7,231,53],"3122":[231,4,233,53],"3125":[233,8,233,26],"3127":[233,27,233,35],"3130":[233,8,233,36],"3132":[233,8,233,36],"3133":[233,8,233,36],"3135":[233,8,233,36],"3136":[233,8,233,36],"3138":[233,8,233,36],"3140":[233,8,233,36],"3142":[224,0,233,53],"3144":[237,0,257,38],"3145":[247,35,247,42],"3152":[247,44,247,52],"3162":[247,11,247,53],"3165":[247,11,247,53],"3168":[247,11,247,53],"3169":[247,11,247,53],"3170":[247,11,247,53],"3173":[247,4,247,53],"3174":[247,4,247,53],"3175":[247,4,247,53],"3178":[247,4,247,53],"3179":[249,11,249,14],"3182":[249,11,249,32],"3183":[249,11,249,32],"3184":[249,4,249,32],"3187":[249,4,249,32],"3188":[251,24,251,29],"3195":[251,31,251,39],"3205":[251,4,251,40],"3208":[251,4,251,40],"3209":[251,4,251,40],"3210":[253,26,253,31],"3217":[253,33,253,41],"3227":[253,4,253,42],"3230":[253,4,253,42],"3231":[253,4,253,42],"3232":[255,21,255,24],"3239":[255,26,255,34],"3249":[255,4,255,35],"325":[304,96,304,101],"3252":[255,4,255,35],"3253":[255,4,255,35],"3254":[257,29,257,37],"3257":[257,4,257,38],"3258":[257,24,257,27],"3261":[257,4,257,38],"3262":[257,17,257,22],"3265":[257,4,257,38],"3266":[257,4,257,38],"3299":[257,4,257,38],"3301":[257,4,257,38],"3304":[257,4,257,38],"400":[304,30,304,102],"445":[304,30,304,102],"446":[304,30,304,102],"447":[304,8,304,102],"448":[304,8,304,102],"451":[304,8,304,102],"452":[306,30,306,110],"485":[306,15,306,26],"488":[306,15,306,110],"489":[306,15,306,110],"49":[264,17,264,31],"490":[306,8,306,110],"493":[306,8,306,110],"496":[282,0,306,110],"52":[264,17,264,31],"527":[311,12,311,30],"529":[311,12,311,30],"530":[320,21,320,35],"532":[331,35,331,43],"534":[320,21,320,45],"535":[320,21,320,45],"537":[320,21,320,45],"538":[320,21,320,45],"540":[320,21,320,45],"541":[320,21,320,45],"543":[320,21,320,45],"545":[320,21,320,45],"546":[320,4,320,45],"547":[320,4,320,45],"549":[320,4,320,45],"550":[322,11,322,16],"552":[322,11,322,34],"553":[322,11,322,34],"554":[322,4,322,34],"557":[322,4,322,34],"558":[324,24,324,29],"561":[324,11,324,20],"565":[324,4,324,29],"568":[324,4,324,29],"569":[326,54,326,64],"570":[326,26,326,40],"572":[331,35,331,43],"574":[326,26,326,50],"575":[326,26,326,50],"577":[326,26,326,50],"578":[326,26,326,50],"580":[326,26,326,50],"581":[326,26,326,50],"583":[326,26,326,50],"585":[326,26,326,50],"586":[326,26,326,64],"587":[326,26,326,64],"588":[326,4,326,64],"590":[326,4,326,64],"591":[327,36,327,57],"593":[327,58,327,63],"596":[327,36,327,64],"598":[327,36,327,64],"599":[327,36,327,64],"601":[327,36,327,64],"602":[327,36,327,64],"604":[327,36,327,64],"606":[327,36,327,64],"608":[327,66,327,76],"620":[327,35,327,77],"621":[327,35,327,77],"625":[327,4,327,77],"626":[328,12,328,25],"629":[328,12,328,51],"632":[328,12,328,51],"633":[328,29,328,51],"635":[328,12,328,51],"636":[328,12,328,51],"639":[328,12,328,51],"64":[264,33,264,45],"640":[328,12,328,51],"641":[328,12,328,51],"643":[328,12,328,51],"644":[328,4,328,52],"645":[328,4,328,52],"648":[328,4,328,52],"649":[330,35,330,44],"652":[330,4,330,22],"654":[331,35,331,43],"656":[330,4,330,32],"657":[330,4,330,32],"659":[330,4,330,32],"660":[330,4,330,32],"662":[330,4,330,32],"663":[330,4,330,32],"665":[330,4,330,32],"667":[330,4,330,32],"668":[330,4,330,44],"669":[331,35,331,43],"67":[264,33,264,45],"671":[331,4,331,44],"672":[331,24,331,33],"674":[331,4,331,44],"675":[331,17,331,22],"677":[331,4,331,44],"678":[331,4,331,44],"68":[277,23,277,28],"711":[331,4,331,44],"713":[331,4,331,44],"715":[331,4,331,44],"748":[354,16,354,28],"750":[354,16,354,28],"751":[363,20,363,29],"752":[363,32,363,45],"76":[277,30,277,33],"773":[363,20,363,45],"774":[363,20,363,45],"775":[363,48,363,51],"777":[363,20,363,51],"779":[363,20,363,51],"780":[363,20,363,51],"781":[363,4,363,51],"783":[363,4,363,51],"784":[364,22,364,41],"787":[364,44,364,45],"798":[364,22,364,45],"799":[364,22,364,45],"802":[364,4,364,45],"803":[366,25,366,35],"805":[366,11,366,35],"806":[366,11,366,21],"807":[366,11,366,35],"808":[366,4,366,35],"811":[366,4,366,35],"812":[367,51,367,66],"813":[367,7,367,26],"815":[367,27,367,37],"816":[367,7,367,38],"818":[367,7,367,38],"819":[367,7,367,38],"821":[367,7,367,38],"822":[367,7,367,38],"824":[367,7,367,38],"826":[367,7,367,38],"828":[367,41,367,48],"84":[277,35,277,43],"841":[367,7,367,48],"842":[367,7,367,48],"843":[367,7,367,66],"844":[367,4,384,19],"847":[367,4,384,19],"848":[370,15,370,18],"850":[370,15,370,36],"851":[370,15,370,36],"852":[370,8,370,36],"855":[370,8,370,36],"856":[372,25,372,28],"862":[372,30,372,37],"871":[372,8,372,38],"874":[372,8,372,38],"875":[372,8,372,38],"876":[373,42,373,57],"877":[373,8,373,27],"879":[373,28,373,38],"880":[373,8,373,39],"882":[373,8,373,39],"883":[373,8,373,39],"885":[373,8,373,39],"886":[373,8,373,39],"888":[373,8,373,39],"890":[373,8,373,39],"892":[374,8,374,29],"894":[374,30,374,37],"897":[374,8,374,38],"899":[374,8,374,38],"900":[374,8,374,38],"902":[374,8,374,38],"903":[374,8,374,38],"905":[374,8,374,38],"907":[374,8,374,38],"908":[375,21,375,30],"909":[374,8,379,10],"91":[277,45,277,55],"911":[376,24,376,39],"914":[374,8,379,10],"917":[377,25,377,37],"920":[374,8,379,10],"923":[378,24,378,40],"926":[374,8,379,10],"929":[374,8,379,10],"930":[380,8,380,27],"933":[380,31,380,32],"944":[380,8,380,32],"945":[380,8,380,32],"946":[380,8,380,27],"949":[381,8,381,24],"952":[381,28,381,32],"967":[381,8,381,32],"968":[381,8,381,32],"969":[381,8,381,24],"972":[382,8,382,28],"975":[382,32,382,41],"976":[382,44,382,48],"99":[277,4,277,56],"991":[382,32,382,48],"992":[382,32,382,48]},"runtimeBytecode":{"bytecode":"0x6003361161000c57610adf565b60003560e01c6323b872dd81186100695760643610610cea576004358060a01c610cea576101a0526024358060a01c610cea576101c0526101a051610100526101c05161012052604435610140523361016052610067610c48565b005b6342842e0e81186100935760643610610cea576000610600526106008051806101e05250506100cb565b63b88d4fde81186101f05760a43610610cea57606435600401610400813511610cea578035806101e052602082018181610200375050505b6004358060a01c610cea576101a0526024358060a01c610cea576101c0526101a051610100526101c0516101205260443561014052336101605261010d610c48565b6101c0513b156101ee576101c05163150b7a0261064052608033610660526101a051610680526044356106a052806106c05280610660016101e0518082526020820181818361020060045afa5050508051806020830101601f82600003163682375050601f19601f8251602001011690508101505060206106406104a461065c6000855af16101a1573d600060003e3d6000fd5b60203d10610cea57610640518060201b610cea57610b0052610b00905051610620527f150b7a02000000000000000000000000000000000000000000000000000000006106205118610cea575b005b63095ea7b381186102cd5760443610610cea576004358060a01c610cea57604052600060243560205260005260406000205460605260605115610cea5760605160405114610cea5733600060243560205260005260406000205414608052600360605160205260005260406000208033602052600052604060002090505460a0526080516102805760a051610283565b60015b15610cea5760405160016024356020526000526040600020556024356040516060517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600060c0a4005b634a92d6ca81186104925760243610610cea576004358060a01c610cea5760805234600d54808202811583838304141715610cea579050905060648104905060a05260095460018101818110610cea57905060c0526004543318610cea5742600b33602052600052604060002054620151808101818110610cea579050116104315760805115610cea5760805160405260c05160605261036b610b66565b42600b33602052600052604060002055600a60c05160205260005260406000203481554260018201554360028201554460038201555060095460018101818110610cea579050600955600e5460a051808201828110610cea5790509050600e55600c543460a051808203828111610cea5790509050808201828110610cea5790509050600c5560c05160805160007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600060e0a4600160e052602060e061049056610490565b601c60e0527f596f752063616e206f6e6c79206d696e74206f6e6365206120646179000000006101005260e05060e0518061010001601f826000031636823750506308c379a060a052602060c052601f19601f60e051011660440160bcfd5bf35b34610cea576301ffc9a781186105195760243610610cea576004358060201b610cea576040526040517f01ffc9a70000000000000000000000000000000000000000000000000000000081186104e957600161050e565b7f80ac58cd000000000000000000000000000000000000000000000000000000008118155b905060805260206080f35b6370a08231811861055c5760243610610cea576004358060a01c610cea5760405260405115610cea57600260405160205260005260406000205460605260206060f35b636352211e81186105915760243610610cea57600060043560205260005260406000205460405260405115610cea5760206040f35b63081812fc81186105d45760243610610cea57600060043560205260005260406000205415610cea57600160043560205260005260406000205460405260206040f35b63e985e9c5811861062e5760443610610cea576004358060a01c610cea576040526024358060a01c610cea576060526003604051602052600052604060002080606051602052600052604060002090505460805260206080f35b63a22cb46581186106bb5760443610610cea576004358060a01c610cea576040526024358060011c610cea576060523360405114610cea576060516003336020526000526040600020806040516020526000526040600020905055604051337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160605160805260206080a3005b63e705ecfb81186108075760243610610cea57336040526004356060526106e3610100610ae5565b6101005115610cea5760006004356020526000526040600020546101005242600a60043560205260005260406000206001810190505461012c8101818110610cea5790501015610cea576101005115610cea576101005160405260043560605261074b610c03565b61010051604052600435606052610760610bb3565b600a6004356020526000526040600020546101205261012051600d548060640360648111610cea579050808202811583838304141715610cea579050905060648104905061014052600060006000600061014051336000f115610cea57600c5461014051808203828111610cea5790509050600c556004356000610100517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000610160a4005b63c87b56dd811861092f5760243610610cea576020806101805260006005548160e001600082601f0160051c60028111610cea57801561085a57905b80600601548160051b840152600101818118610843575b5050508082019150506004358061087c576030604152600160405260406108be565b6000604f905b8261089c578081608e035280608e0392506108ba566108af565b600a830660300181608e0352600a830492505b600101818118610882575b5050805b90508051602082018360e0018281848460045afa505050808301925050508060c05260c090508161018001815180825260208301602083018281848460045afa505050508051806020830101601f82600003163682375050601f19601f825160200101169050905081019050610180f35b63870d6f9d81186109a95760443610610cea576004356004016035813511610cea578035806040526020820181816060375050506004543318610cea5760405180600555600081601f0160051c60028111610cea5780156109a457905b8060051b60600151816006015560010181811861098c575b505050005b633d18678e81186109d75760243610610cea57600a60043511610cea576004543318610cea57600435600d55005b63476343ee8118610a105760043610610cea576004543318610cea576000600060006000600e546004546000f115610cea576000600e55005b6313af40358118610a425760243610610cea576004358060a01c610cea576040526004543318610cea57604051600455005b638da5cb5b8118610a615760043610610cea5760045460405260206040f35b631b1528b08118610a805760043610610cea5760095460405260206040f35b637aafcca38118610a9f5760043610610cea57600c5460405260206040f35b63127043c38118610abe5760043610610cea57600d5460405260206040f35b637518c9658118610add5760043610610cea57600e5460405260206040f35b505b60006000fd5b60006060516020526000526040600020546080526040516080511460a05260016060516020526000526040600020546040511460c0526003608051602052600052604060002080604051602052600052604060002090505460e05260a051610b4f5760c051610b52565b60015b610b5e5760e051610b61565b60015b815250565b6000606051602052600052604060002054610cea57604051600060605160205260005260406000205560026040516020526000526040600020805460018101818110610cea579050815550565b604051600060605160205260005260406000205418610cea576000600060605160205260005260406000205560026040516020526000526040600020805460018103818111610cea579050815550565b604051600060605160205260005260406000205418610cea57600160605160205260005260406000205415610c4657600060016060516020526000526040600020555b565b6101605160405261014051606052610c61610180610ae5565b6101805115610cea576101205115610cea576101005160405261014051606052610c89610c03565b6101005160405261014051606052610c9f610bb3565b6101205160405261014051606052610cb5610b66565b6101405161012051610100517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000610180a4565b600080fda165767970657283000307000b"},"sourceId":"fortune721.vy","sourcemap":"-1:-1:0:-;;;;:::-;;:::-;:::-;;;;;;;;;:::-;;;;;:::-;;;;;;;:::-;8497:14;;-1:-1;;;;;;:::-;8513:12;;9123:5;-1:-1;;;9130:3;-1:-1;;;9135:8;-1:-1;;;9145:10;-1:-1;;;9104:52;:::i;-1:-1::-;;:::-;;;;9178:1334;:::-;-1:-1;;;;:::-;;;;;;;;9281:18;-1:-1;;9281:18;-1:-1;:::-;9178:1334::-;-1:-1;;;9178:1334;:::-;-1:-1;;;;:::-;;;;9281:18;-1:-1;9281:18;-1:-1;;;:::-;9281:18;-1:-1;;;;;9281:18;-1:-1;;;;;;;9281:18;-1:-1::-;;;;;;;:::-;9208:14;;-1:-1;;;;;;:::-;9232:12;;10103:5;-1:-1;;;10110:3;-1:-1;;;10286:8;-1:-1;;;10125:10;-1:-1;;;10084:52;:::i;:::-;10144:3;-1:-1;10144:15;;-1:-1;10141:371::-;10230:19;:72;-1:-1;;;;10267:10;-1:-1;;10279:5;-1:-1;;;10286:8;-1:-1;;;;;;;;;10296:5;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10230:72;-1:-1;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;;;:::-;;;;10230:72;;10208:94;;;10432:80;10417:11;:95;;10410:102;:::-;-1:-1::-;;9178:1334::-;-1:-1;;;;:::-;;;;;:::-;;;;;;;:::-;10546:18;;11141:14;11650:8;11141:24;;;;;;;;11124:41;;;11223:5;:23;;11216:30;:::-;11320:5;-1:-1;11307:9;-1:-1;;11300:25;:::-;11405:10;11377:14;11650:8;11377:24;;;;;;;;:38;;11355:60;;11452:21;11474:5;-1:-1;11452:28;;;;;;;-1:-1;11482:10;-1:-1;;;;;;;11451:42;;-1:-1;;11420:73;11506:13;-1:-1;11506:39;:::-;11523:22;11506:39;;:::-;:::-;;:::-;11498:48;;:::-;11605:9;-1:-1;11574:18;11650:8;11574:28;;;;;;;;:40;11650:8;11619:40;11639:9;11619:40;11632:5;11619:40;;;;;-1:-1;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;12491:12;;12860:9;12872:13;-1:-1;;;;;;;;;;;;;;:::-;;;12860:25;;12888:3;12860:31;-1:-1;12860:31;;12844:47;;12914:19;-1:-1;12936:1;-1:-1;;;;;;:::-;12914:23;;-1:-1;12896:41;13009:10;12995:24;:10;:24;12988:31;:::-;13071:15;13027:19;13047:10;13027:31;;;;;;;-1:-1;13061:7;-1:-1;;;;;;:::-;13027:41;;:59;13024:843;:::-;13284:3;:21;;13277:28;:::-;13391:3;-1:-1;;;13396:7;-1:-1;;;;13374:30;:::i;:::-;13447:15;13413:19;13433:10;13413:31;;;;;;;-1:-1;13471:21;13493:7;-1:-1;13471:30;;;;;;;13539:9;13471:210;-1:-1;13574:15;-1:-1;13471:210;-1:-1;;13616:12;-1:-1;13471:210;-1:-1;;13654:16;-1:-1;13471:210;-1:-1;;13471:210;13690:19;-1:-1;13713:1;-1:-1;;;;;;:::-;13690:24;;:19;-1:-1;13723:16;-1:-1;13743:4;-1:-1;;;;;;;;:::-;;;13723:24;;:16;-1:-1;13756:20;-1:-1;13780:9;13792:4;-1:-1;;;;;;;;:::-;;;13780:16;;-1:-1;;;;;;;:::-;;;13756:40;;:20;-1:-1;13839:7;13805:42;13834:3;13805:42;;;;;;13863:4;-1:-1;;;;;:::-;;13024:843::-;:::-;-1:-1;;13149:30;-1:-1;;13149:30;;13143:36;-1:-1;;;;;;;;;;;;;;13143:36;-1:-1;;13143:36;-1:-1;;13143:36;-1:-1;;;;;;;;;;13143:36;-1:-1::-;;:::-;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;3763:20;;3924:12;:36;3940:20;3924:36;-1:-1;3924:36;:::-;-1:-1;3924:36;:::-;:::-;3940:20;3924:36;-1:-1;;3924:36::-;;;-1:-1;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;4017:15;;4292:6;:24;;4285:31;:::-;4328:24;4353:6;-1:-1;4328:32;;;;;;;-1:-1;;;;;;:::-;;;;;:::-;;;;;:::-;4610:14;4625:8;4610:24;;;;;;;;4593:41;;;4692:5;:23;;4685:30;:::-;-1:-1;4727:5;-1:-1;:::-;;;;;:::-;;;;;:::-;5033:14;5106:8;5033:24;;;;;;;;:42;;5026:49;:::-;5087:18;5106:8;5087:28;;;;;;;;-1:-1;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;5155:15;;-1:-1;;;;;;:::-;5172:18;;5415:21;5437:6;-1:-1;5415:29;;;;;;;-1:-1;5446:9;-1:-1;;;;;;;;5414:42;;-1:-1;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;11694:18;;-1:-1;;;;;;:::-;11714:15;;12294:10;12281:9;-1:-1;;12274:30;:::-;12356:9;-1:-1;12309:21;12331:10;12309:33;;;;;;;-1:-1;12343:9;-1:-1;;;;;;;;12309:44;;-1:-1;12401:9;12370:52;12389:10;12370:52;12412:9;-1:-1;;;;12370:52;;-1:-1;:::-;;;;;:::-;;;;;:::-;14276:10;-1:-1;;14907:8;-1:-1;;;;14252:45;;:::i;:::-;;14245:52;;;:::-;14319:14;14907:8;14319:24;;;;;;;;14302:41;;;14451:15;14400:21;14907:8;14400:31;;;;;;;;-1:-1;14400:42;;;;:48;14445:3;14400:48;-1:-1;14400:48;-1:-1;;;:::-;14400:48;;:66;14393:73;;:::-;14524:5;:23;;14517:30;:::-;14572:5;-1:-1;;;14907:8;-1:-1;;;;14552:36;:::i;:::-;14615:5;-1:-1;;;14907:8;-1:-1;;;;14593:38;:::i;:::-;14681:21;14907:8;14681:31;;;;;;;;14662:58;;;14751:7;-1:-1;14766:13;-1:-1;;14762:3;-1:-1;14762:3;-1:-1;;;:::-;14762:17;;-1:-1;;;;;;;;;;;;;:::-;;;14751:29;;14783:3;14751:35;-1:-1;14751:35;;14725:61;;-1:-1;;;;14808:14;-1:-1;14796:10;-1:-1;;14791:32;;:::-;14828:20;-1:-1;14852:14;-1:-1;;;;;;;;:::-;;;14828:38;;:20;-1:-1;14907:8;14871:45;;14884:5;14871:45;;;;;-1:-1;:::-;;;;;:::-;;;;;:::-;;;;;14993:39;15000:12;-1:-1;;;;;;;;;;;;;;:::-;;;;:::-;;:::-;;;;;;;;;;;;;;;;;:::-;:::-;;;;;;;;;;15023:7;15014:17;;;:::-;-1:-1;;;;;;;15014:17;:::-;:::-;-1:-1;;;:::-;15014:17;-1:-1;:::-;;;;;;;;;;;;:::-;;:::-;:::-;;15014:17;-1:-1;;;;;;;;15014:17;-1:-1;;;:::-;;;;;;;:::-;:::-;;;15014:17;:::-;;;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14993:39;;-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;15065:20;-1:-1;15065:20;-1:-1;;;:::-;15065:20;-1:-1;;;;;15065:20;-1:-1;;;;;;;15065:20;15113:10;15099:24;:10;:24;15092:31;:::-;15143:8;15128:23;;:12;-1:-1;;15128:23;-1:-1;;;;;;;;:::-;;;;:::-;;:::-;;;;;;;;;;;;;;;;;:::-;:::-;;;15128:23;-1:-1;:::-;;;;;:::-;;;;;:::-;15226:2;15285:12;15210:18;-1:-1;15203:25;:::-;15254:10;15240:24;:10;:24;15233:31;:::-;15285:12;-1:-1;15269:13;:28;-1:-1;:::-;;;;;:::-;;;;;:::-;15354:10;15340:24;:10;:24;15333:31;:::-;-1:-1;;;;15386:16;-1:-1;15374:10;-1:-1;;;15369:34;;:::-;15427:1;15408:16;-1:-1;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;15453:18;;15499:10;15485:24;:10;:24;15478:31;:::-;15527:9;-1:-1;15514:10;-1:-1;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;:::-;;;;5510:727::-;5944:14;5959:8;-1:-1;5944:24;;;;;;;-1:-1;;5927:41;6005:8;-1:-1;5996:5;-1:-1;5996:17;-1:-1;5973:40;6056:18;6075:8;-1:-1;6056:28;;;;;;;-1:-1;6044:8;-1:-1;6044:40;-1:-1;6018:66;6122:21;6144:5;-1:-1;6122:28;;;;;;;-1:-1;6152:8;-1:-1;;;;;;;;6121:40;;-1:-1;;6089:72;6174:14;-1:-1;6174:35;:::-;6192:17;6174:35;;:::-;:::-;;:::-;6173:64;:::-;6214:23;6173:64;;:::-;:::-;;:::-;-1:-1;6166:71;;-1:-1::-;6250:380::-;6463:14;6478:8;-1:-1;6463:24;;;;;;;:42;6456:49;:::-;6560:3;-1:-1;6533:14;6548:8;-1:-1;6533:24;;;;;;;-1:-1;6596:24;6621:3;-1:-1;6596:29;;;;;;;-1:-1;;6629:1;-1:-1;;;;;;:::-;6596:34;;-1:-1;;6596:34;-1:-1::-;6643:400::-;6900:5;6872:33;:14;6887:8;-1:-1;6872:24;;;;;;;:33;;6865:40;:::-;-1:-1;6933:14;6948:8;-1:-1;6933:24;;;;;;;-1:-1;7007:24;7032:5;-1:-1;7007:31;;;;;;;-1:-1;;7042:1;-1:-1;;;;;;:::-;7007:36;;-1:-1;;7007:36;-1:-1::-;7056:402::-;7317:6;7289:34;:14;7304:8;-1:-1;7289:24;;;;;;;:34;;7282:41;:::-;7331:18;7350:8;-1:-1;7331:28;;;;;;;:46;;-1:-1;7328:130::-;-1:-1;7413:18;7432:8;-1:-1;7413:28;;;;;;;-1:-1;7056:402::-;-1:-1::-;7471:959::-;8018:7;-1:-1;;;8027:8;-1:-1;;;;7994:42;;:::i;:::-;;7987:49;;;:::-;8090:3;:21;;8083:28;:::-;8201:5;-1:-1;;;8208:8;-1:-1;;;;8181:36;:::i;:::-;8302:5;-1:-1;;;8309:8;-1:-1;;;;8280:38;:::i;:::-;8354:3;-1:-1;;;8359:8;-1:-1;;;;8337:31;:::i;:::-;8421:8;8396:34;8416:3;8396:34;8409:5;8396:34;;;;;-1:-1::-;:::-;;;","userdoc":{"methods":{"setApprovalForAll(address,bool)":{"notice":"This works even if sender doesn't own any tokens at the time."},"transferFrom(address,address,uint256)":{"notice":"The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they maybe be permanently lost."}}}},"nft_mocked_contract":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"}],"name":"Burn","type":"event"},{"inputs":[{"name":"name","type":"string"},{"name":"symbol","type":"string"},{"name":"initialSupply","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"name":"to","type":"address"}],"name":"mintNFT","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"name":"cardOwner","type":"address"}],"name":"burnNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"legend","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"initialSupply","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"name":"arg0","type":"address"}],"name":"balances","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"supply","outputs":[{"name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"contractName":"nft_mocked_contract","deploymentBytecode":{"bytecode":"0x60206103be60003960005160406020826103be01600039600051116103b9576020816103be01600039600051806040526020820181816103be0160603950505060206103de60003960005160206020826103be01600039600051116103b9576020816103be016000396000518060a052602082016020816103be0160003960005160c052505050346103b95760405180600055600081601f0160051c600281116103b95780156100c357905b8060051b6060015181600101556001018181186100ab575b50505060a0518060035560c0516004555060206103fe6000396000516007556102c46100f4610000396102c4610000f36003361161000c576102ac565b60003560e01c6354ba0f27811861009357602436106102b2576004358060a01c6102b257604052600754600181018181106102b2579050600755600660405160205260005260406000208054600181018181106102b25790508155506040517f3c3284d117c92d0b1699230960384e794dcba184cc48ff114fe4fed20c9b056560006060a2005b346102b25763f83efec8811861011957602436106102b2576004358060a01c6102b257604052600754600181038181116102b2579050600755600660405160205260005260406000208054600181038181116102b25790508155506040517fe22de1457cb61fb61b60176bc4235a9abd19466126b46692bc14fc573f09924960006060a2005b6370a08231811861015457602436106102b2576004358060a01c6102b257604052600660405160205260005260406000205460605260206060f35b6306fdde0381186101d957600436106102b2576020806040528060400160005480825260208201600082601f0160051c600281116102b25780156101ab57905b80600101548160051b840152600101818118610194575b505050508051806020830101601f82600003163682375050601f19601f825160200101169050810190506040f35b6395d89b41811861023157600436106102b2576020806040528060400160035480825260208201600454815250508051806020830101601f82600003163682375050601f19601f825160200101169050810190506040f35b63378dc3dc811861025057600436106102b25760055460405260206040f35b6327e235e3811861028b57602436106102b2576004358060a01c6102b257604052600660405160205260005260406000205460605260206060f35b63047fc9aa81186102aa57600436106102b25760075460405260206040f35b505b60006000fd5b600080fda165767970657283000307000b005b600080fd"},"dev_messages":{},"devdoc":{"author":"0xcassini.eth","details":"This contract replicates the functionality of the ERC721 standard, but with a few differences. It is intended to be used for testing purposes only.","methods":{"__init__(string,string,uint256)":{"params":{"initialSupply":"The initial supply of the token","name":"The name of the token","symbol":"The symbol of the token"}},"balanceOf(address)":{"params":{"legend":"The address to get the balance of"}},"burnNFT(address)":{"params":{"cardOwner":"The address to burn the token from"}},"mintNFT(address)":{"params":{"to":"The address to mint the token to"}}},"title":"Mock Saturn Series ERC721 Token"},"pcmap":{"100":[44,4,44,26],"101":[44,4,44,26],"104":[44,4,44,26],"105":[45,15,45,16],"107":[45,4,45,16],"108":[45,4,45,16],"141":[45,4,45,16],"143":[45,4,45,16],"145":[45,4,45,16],"183":[48,12,48,30],"185":[48,12,48,30],"186":[53,4,53,15],"189":[53,19,53,20],"200":[53,4,53,20],"201":[53,4,53,20],"202":[53,4,53,15],"205":[54,4,54,17],"207":[54,18,54,27],"210":[54,4,54,28],"212":[54,4,54,28],"213":[54,4,54,28],"215":[54,4,54,28],"216":[54,4,54,28],"218":[54,4,54,28],"220":[54,4,54,28],"223":[54,32,54,33],"234":[54,4,54,33],"235":[54,4,54,33],"238":[54,4,54,33],"239":[55,13,55,22],"241":[55,4,55,23],"242":[55,4,55,23],"275":[55,4,55,23],"277":[55,4,55,23],"279":[55,4,55,23],"312":[59,14,59,29],"314":[59,14,59,29],"315":[64,11,64,24],"317":[64,25,64,31],"320":[64,11,64,32],"322":[64,11,64,32],"323":[64,11,64,32],"325":[64,11,64,32],"326":[64,11,64,32],"328":[64,11,64,32],"330":[64,11,64,32],"49":[38,12,38,23],"51":[38,12,38,23],"52":[43,4,43,15],"55":[43,19,43,20],"66":[43,4,43,20],"67":[43,4,43,20],"68":[43,4,43,15],"71":[44,4,44,17],"73":[44,18,44,20],"76":[44,4,44,21],"78":[44,4,44,21],"79":[44,4,44,21],"81":[44,4,44,21],"82":[44,4,44,21],"84":[44,4,44,21],"86":[44,4,44,21],"89":[44,25,44,26]},"runtimeBytecode":{"bytecode":"0x6003361161000c576102ac565b60003560e01c6354ba0f27811861009357602436106102b2576004358060a01c6102b257604052600754600181018181106102b2579050600755600660405160205260005260406000208054600181018181106102b25790508155506040517f3c3284d117c92d0b1699230960384e794dcba184cc48ff114fe4fed20c9b056560006060a2005b346102b25763f83efec8811861011957602436106102b2576004358060a01c6102b257604052600754600181038181116102b2579050600755600660405160205260005260406000208054600181038181116102b25790508155506040517fe22de1457cb61fb61b60176bc4235a9abd19466126b46692bc14fc573f09924960006060a2005b6370a08231811861015457602436106102b2576004358060a01c6102b257604052600660405160205260005260406000205460605260206060f35b6306fdde0381186101d957600436106102b2576020806040528060400160005480825260208201600082601f0160051c600281116102b25780156101ab57905b80600101548160051b840152600101818118610194575b505050508051806020830101601f82600003163682375050601f19601f825160200101169050810190506040f35b6395d89b41811861023157600436106102b2576020806040528060400160035480825260208201600454815250508051806020830101601f82600003163682375050601f19601f825160200101169050810190506040f35b63378dc3dc811861025057600436106102b25760055460405260206040f35b6327e235e3811861028b57602436106102b2576004358060a01c6102b257604052600660405160205260005260406000205460605260206060f35b63047fc9aa81186102aa57600436106102b25760075460405260206040f35b505b60006000fd5b600080fda165767970657283000307000b"},"sourceId":"nft_mocked_contract.vy","sourcemap":"-1:-1:0:-;;;;:::-;;:::-;:::-;;;;;;;;;:::-;;;;;:::-;;;;;;;:::-;866:11;;981;-1:-1;996:1;-1:-1;;;;;;:::-;981:16;;:11;-1:-1;1002:13;1016:2;-1:-1;1002:17;;;;;;;-1:-1;;1023:1;-1:-1;;;;;;:::-;1002:22;;-1:-1;;1002:22;1040:1;1029:12;;;;;-1:-1;:::-;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;1065:18;;1192:11;-1:-1;1207:1;-1:-1;;;;;;:::-;1192:16;;:11;-1:-1;1213:13;1227:9;-1:-1;1213:24;;;;;;;-1:-1;;1241:1;-1:-1;;;;;;:::-;1213:29;;-1:-1;;1213:29;1256:9;1247:19;;;;;-1:-1;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;1298:15;;1450:13;1464:6;-1:-1;1450:21;;;;;;;-1:-1;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::-;;;;:::-;;:::-;;;;;;;;;;;;;;;;;:::-;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;:::-;;;;;;;;;;;;;;;;;;;:::-;;;;;:::-;;;;;:::-;;;;;;;;:::-;;:::-;;;;:::-;;;","userdoc":{"methods":{"__init__(string,string,uint256)":{"notice":"Initialize the contract"},"balanceOf(address)":{"notice":"Get the balance of a mocked NFT"},"burnNFT(address)":{"notice":"Burn a mocked NFT"},"mintNFT(address)":{"notice":"Mint a new mocked NFT"}}}}},"manifest":"ethpm/3","sources":{"fortune.vy":{"checksum":{"algorithm":"md5","hash":"0x5c8e8782316a421fee8ef20f12ff4752"},"content":"# @version ^0.3.7\n\n\"\"\"\n@title Bare-bones Token implementation of the Fortune cards\n@notice This is a bare-bones implementation of the Fortune cards\n        It is not meant to be used in production, but rather as a\n        starting point for the final implementation\n        \n        Owners of the Legends NFT can mint an unrevealed Fortune\n        card as an ERC20 to any address, and pay an upfront tribute.\n\n        The Fortune cards can be burned to generate an event of GOOD or BAD\n        fortune. The event is a string of 4 characters, which can be used\n        by the frontend to display a message, and for the game to build upon it later.\n    \n        The Fortune cards can be traded, but only the owner of the NFT can mint\n        a new Fortune card.\n\n        When the FORTUNE card is burnt, the burner can get back their initial tribute minus a fee.\n\n        There is a withdraw function that can only be called by the owner of the contract.\n        This is to allow the owner to withdraw the ETH tributes.\n\n@author 0xcassini.eth\n\"\"\"\n\n\ninterface LegendsContract:\n    def balanceOf(_owner: address) -> uint256: view\n\nevent Approval:\n    owner: indexed(address)\n    spender: indexed(address)\n    value: uint256\n\nevent Transfer:\n    sender: indexed(address)\n    receiver: indexed(address)\n    value: uint256\n\nevent MintFortune:\n    receiver: indexed(address)\n    value: uint256\n\nevent BurnFortune:\n    legend: indexed(address)\n    value: String[4]\n    fortune: FortuneCard\n\n# The Fortune card is an ERC20 token that is tied to the value of the tribute it was minted with\nstruct FortuneCard:\n    cardNumber: uint256\n    tributeAmount: uint256\n    dateMinted: uint256\n    randomness: uint256\n\nname: public(String[64])\nsymbol: public(String[32])\ncirculatingSupply: public(uint256)\nlegendsContract: LegendsContract\n\n# The mapping of the Fortune cards\n# The key is the address of the minter of the token\n# The value is the Fortune card's msg.value\nfortunesLog: HashMap[address, FortuneCard]\n\n# Used to keep track of the number of Fortune cards minted\nmintCount: public(uint256)\n\nbalances: HashMap[address, uint256]\nallowances: HashMap[address, HashMap[address, uint256]]\nlastMinted: HashMap[address, uint256]\n\nfortuneContract: public(address)\ntributeBalance: public(uint256)\ntributeFee: public(uint256)\nfeesBalance: public(uint256)\n\nowner: public(address)\n\n@external\ndef __init__(_name: String[64], _symbol: String[32], _initial_supply: uint256, legendsAddress: address, tributeFee: uint256):\n    self.name = _name\n    self.symbol = _symbol\n    self.balances[msg.sender] = _initial_supply\n    self.circulatingSupply = _initial_supply\n    self.legendsContract = LegendsContract(legendsAddress)\n    self.owner = msg.sender\n    self.tributeFee = tributeFee\n    log Transfer(empty(address), msg.sender, _initial_supply)\n    \n\n@view\n@external\ndef fortuneBalance(_owner: address) -> uint256:\n    \"\"\"\n    @notice Getter to check the current balance of an address\n    @param  _owner Address to query the balance of\n    @return Token balance\n    \"\"\"\n    return self.balances[_owner]\n\n\n@view\n@external\ndef allowance(_owner : address, _spender : address) -> uint256:\n    \"\"\"\n    @notice Getter to check the amount of tokens that an owner allowed to a spender\n    @param  _owner The address which owns the funds\n    @param  _spender The address which will spend the funds\n    @return The amount of tokens still available for the spender\n    \"\"\"\n    return self.allowances[_owner][_spender]\n\n@nonpayable\n@external\ndef approve(_spender : address, _value : uint256) -> bool:\n    \"\"\"\n    @notice Approve an address to spend the specified amount of tokens on behalf of msg.sender\n    @dev    Beware that changing an allowance with this method brings the risk that someone may use both the old\n            and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n            race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n            https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    @param  _spender The address which will spend the funds.\n    @param  _value The amount of tokens to be spent.\n    @return Success boolean\n    \"\"\"\n    self.allowances[msg.sender][_spender] = _value\n    log Approval(msg.sender, _spender, _value)\n    return True\n\n\n@internal\ndef _transfer(_from: address, _to: address, _value: uint256):\n    \"\"\"\n    @dev    Internal shared logic for transfer and transferFrom\n    @param  _from The address which you want to send tokens from\n    @param  _to The address which you want to transfer to\n    @param  _value The amount of tokens to be transferred\n    \"\"\"\n    assert self.balances[_from] >= _value, \"Insufficient balance\"\n    self.balances[_from] -= _value\n    self.balances[_to] += _value\n    log Transfer(_from, _to, _value)\n\n@nonpayable\n@external\ndef transfer(_to : address, _value : uint256) -> bool:\n    \"\"\"\n    @notice Transfer tokens to a specified address\n    @dev    Vyper does not allow underflows, so attempting to transfer more\n            tokens than an account has will revert\n    @param  _to The address to transfer to\n    @param  _value The amount to be transferred\n    @return Success boolean\n    \"\"\"\n    self._transfer(msg.sender, _to, _value)\n    return True\n\n@nonpayable\n@external\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:\n    \"\"\"\n    @notice Transfer tokens from one address to another\n    @dev    Vyper does not allow underflows, so attempting to transfer more\n            tokens than an account has will revert\n    @param  _from The address which you want to send tokens from\n    @param  _to The address which you want to transfer to\n    @param  _value The amount of tokens to be transferred\n    @return Success boolean\n    \"\"\"\n    assert self.allowances[_from][msg.sender] >= _value, \"Insufficient allowance\"\n    self.allowances[_from][msg.sender] -= _value\n    self._transfer(_from, _to, _value)\n    return True\n\n@payable\n@external\ndef mintFortune(to: address) -> bool:\n    \"\"\"\n    @notice Mint a fortune to an specified address which holds the nft\n    @dev    this is not yet tested and should be used with caution\n    @dev    You could add an assert here to make sure the owner of the nft is the one who can mint\n    @param  to who receives the fortune\n    @return True if the caller addres is a legend\n    \"\"\"\n    # Make sure the minter doesnt have a fortune already\n    assert self.balances[msg.sender] == 0, \"First burn your current fortune\"\n    if self.legendsContract.balanceOf(msg.sender) > 0:               # if the caller is a legend\n        if self.lastMinted[msg.sender] + 3600*24 > block.timestamp:  # and if less 24 hours passed since last mint\n            raise \"You can only mint once a day\"                     #     then raise error\n        else:                                                        # else mint the fortune...\n            self.circulatingSupply += 1                              #      increase circulating supply\n            self.balances[msg.sender] += 1                           #      add fortune to the minter hashmap\n            self.lastMinted[msg.sender] = block.timestamp            #      update last minted of the minter hashmap\n            self.tributeBalance += msg.value * (100-self.tributeFee) / 100  # add the tribute to the tribute balance   \n            self.feesBalance += msg.value * self.tributeFee/100     #      add the fees to feesBalance  \n            self.fortunesLog[msg.sender] = FortuneCard({             #      add the fortune to the log hashmap\n                cardNumber: self.mintCount,                          #      the mint count is the card number\n                tributeAmount: msg.value,                            #      the tribute is in ehter, equal to the amount in the msg.value  \n                dateMinted: block.timestamp,                         #      the date minted is the current block timestamp\n                randomness: block.prevrandao,                        #      <--- ! The randomness is the previous block randao, this helps MEV protection\n                }\n            )\n            self.mintCount += 1                                      #      increase the mint count                  \n            log MintFortune(msg.sender, 1)                           #      emit the event and log the mint\n            return True                                              #      return true\n    else:\n        raise \"Not a Legend\"                                         # if the caller is not a legend, raise error               \n\n@external\ndef burnFortune():\n    \"\"\"\n    @notice Burn a fortune from an specified address\n    @dev    this is not yet tested and should be used with caution\n    @dev    You could add an assert here to make sure the owner of the nft is the one who can burn\n    \"\"\"\n    currentFortune: FortuneCard = self.fortunesLog[msg.sender]\n    assert self.balances[msg.sender] >= 1, \"You dont have a fortune to burn\"\n    assert block.timestamp > currentFortune.dateMinted + 300 , \"Wait at least 5 minutes to burn your fortune\"\n    self.circulatingSupply -= 1\n    self.balances[msg.sender] -= 1\n\n    # Check if the fortune is good or bad\n    \n    # This is the randomness function that will decide if the fortune is good or bad\n    # It takes various internal properties of the contract and the block and adds them together to generate a random seed\n    # This seed also includes the block's prevrandao (see: -> https://eips.ethereum.org/EIPS/eip-4399#security-considerations)\n    # Then it divides by 2087 which is a prime number, and checks if the remainder is even or odd\n    # If even, the fortune is good, if odd, the fortune is bad\n    reward: uint256 = currentFortune.tributeAmount * (100-self.tributeFee) / 100\n    if (( self.balance + block.prevrandao + currentFortune.dateMinted + currentFortune.randomness + currentFortune.cardNumber) % 2087) % 2 == 0:\n        log BurnFortune(msg.sender, 'GOOD', currentFortune)         # emit the event and log the good fortune burn\n    else:\n        log BurnFortune(msg.sender, 'BAD', currentFortune)          # emit the event and log the bad fortune burn  \n    self.tributeBalance -= reward                                   # remove the reward from the tribute balance    \n    send(msg.sender, reward)                                        # send the reward to the caller\n\n@view\n@external\ndef currentCardIdFrom(legend:address)-> uint256:\n    \"\"\"\n    @notice Getter to check the current cardNumber of an address\n            This is useful because legends can only have one fortune at a time\n    \"\"\"\n    return self.fortunesLog[legend].cardNumber\n\n@view\n@external\ndef getLegendBalance() -> uint256:\n    \"\"\"\n    @notice Getter to check the current balance of an address\n    @dev    this is not yet tested and should be used with caution\n    \"\"\"\n    legends: LegendsContract = self.legendsContract\n    return legends.balanceOf(msg.sender)\n\n@view\n@external\ndef getFortuneChestBalance() -> uint256:\n    \"\"\"\n    @notice Getter to check the current ETH balance of the fortune chest\n    @dev    This is not yet tested and should be used with caution\n    @return ETH balance\n    \"\"\"\n    return self.balance\n\n@view\n@external\ndef getTributeFee()-> uint256:\n    \"\"\"\n    @notice Getter to check the current tribute fee\n    @return tribute fee\n    \"\"\"\n    return self.tributeFee\n\n# Admin functions\n\n@view\n@external\ndef currentOwner() -> address:\n    \"\"\"\n    @notice Getter to check the current owner of the fortune chest\n    \"\"\"\n    return self.owner \n    \n@external\ndef setOwner(new_owner:address) -> bool:\n    \"\"\"\n    @notice Setter to set the owner of the fortune chest\n    @dev    this is not yet tested and should be used with caution\n    @dev    You could add an assert here to make sure the owner of the nft is the one who can burn\n    @param  new_owner The address that will be the new owner of the contract\n    @return Success boolean\n    \"\"\"\n    assert self.owner == msg.sender     # make sure the caller is the owner\n    if self.owner == msg.sender:        \n        self.owner = new_owner          # set the new owner\n        return True\n    else:\n        raise \"Not the owner\"           # if the caller is not the owner, raise error\n\n\n@external\ndef rugPull() -> bool:\n    \"\"\"\n    @notice Withdraw all the ETH from the fortune chest\n    @dev    this is not yet tested and should be used with caution\n    @return Success boolean\n    \"\"\"\n    assert self.owner == msg.sender\n    assert self.balance > 0\n    if self.owner == msg.sender:\n        send(self.owner, self.balance)\n        self.tributeBalance = 0\n        return True\n    else:\n        raise \"Not the contract Owner\"\n\n\n@external\ndef withdrawFees() -> bool:\n    \"\"\"\n    @notice Withdraw all the fees from the fortune chest\n    @dev    this is not yet tested and should be used with caution\n    @return Success boolean\n    \"\"\"\n    assert self.owner == msg.sender\n    assert self.feesBalance > 0\n    if self.owner == msg.sender:\n        send(self.owner, self.feesBalance)\n        self.feesBalance = 0\n        return True\n    else:\n        raise \"Not the contract Owner\"\n\n@external\ndef setTributeFee(percentage: uint256)-> bool:\n    \"\"\"\n    @notice Setter to set the tribute fee\n    @dev    this is not yet tested and should be used with caution\n    @dev    You could add an assert here to make sure the owner of the nft is the one who can burn\n    @param  percentage The percentage of the tribute that will be taken\n    @return Success boolean\n    \"\"\"\n    assert self.owner == msg.sender   # only the owner can set the fee\n    if self.owner == msg.sender:      # double check, only the owner can set the fee\n        assert percentage <= 10       # the fee cannot be more than 10% ever\n        self.tributeFee = percentage  # set the fee\n        return True\n    else:\n        raise \"Not the contract Owner\" # if somehow the caller is not the owner, raise error","imports":[],"references":[],"urls":[]},"fortune721.vy":{"checksum":{"algorithm":"md5","hash":"0xe64926bb5e72be448fd5a985a1a194b0"},"content":"# @dev Implementation of ERC-721 non-fungible token standard.\n# @author Ryuya Nakamura (@nrryuya)\n# Modified from: https://github.com/vyperlang/vyper/blob/de74722bf2d8718cca46902be165f9fe0e3641dd/examples/tokens/ERC721.vy\n\nfrom vyper.interfaces import ERC165\nfrom vyper.interfaces import ERC721\n\nimplements: ERC721\nimplements: ERC165\n\n# Interface for the contract called by safeTransferFrom()\ninterface ERC721Receiver:\n    def onERC721Received(\n            _operator: address,\n            _from: address,\n            _tokenId: uint256,\n            _data: Bytes[1024]\n        ) -> bytes4: nonpayable\n\n\n# @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\n#      created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\n#      number of NFTs may be created and assigned without emitting Transfer. At the time of any\n#      transfer, the approved address for that NFT (if any) is reset to none.\n# @param _from Sender of NFT (if address is zero address it indicates token creation).\n# @param _to Receiver of NFT (if address is zero address it indicates token destruction).\n# @param _tokenId The NFT that got transfered.\nevent Transfer:\n    sender: indexed(address)\n    receiver: indexed(address)\n    tokenId: indexed(uint256)\n\n# @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\n#      address indicates there is no approved address. When a Transfer event emits, this also\n#      indicates that the approved address for that NFT (if any) is reset to none.\n# @param _owner Owner of NFT.\n# @param _approved Address that we are approving.\n# @param _tokenId NFT which we are approving.\nevent Approval:\n    owner: indexed(address)\n    approved: indexed(address)\n    tokenId: indexed(uint256)\n\n# @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\n#      all NFTs of the owner.\n# @param _owner Owner of NFT.\n# @param _operator Address to which we are setting operator rights.\n# @param _approved Status of operator rights(true if operator rights are given and false if\n# revoked).\nevent ApprovalForAll:\n    owner: indexed(address)\n    operator: indexed(address)\n    approved: bool\n\n\n# @dev Mapping from NFT ID to the address that owns it.\nidToOwner: HashMap[uint256, address]\n\n# @dev Mapping from NFT ID to approved address.\nidToApprovals: HashMap[uint256, address]\n\n# @dev Mapping from owner address to count of his tokens.\nownerToNFTokenCount: HashMap[address, uint256]\n\n# @dev Mapping from owner address to mapping of operator addresses.\nownerToOperators: HashMap[address, HashMap[address, bool]]\n\n# @dev Address of minter, who can mint a token\nowner: public(address)\n\nbaseURL: String[53]\n\n# @dev Static list of supported ERC165 interface ids\nSUPPORTED_INTERFACES: constant(bytes4[2]) = [\n    # ERC165 interface ID of ERC165\n    0x01ffc9a7,\n    # ERC165 interface ID of ERC721\n    0x80ac58cd,\n]\n\n# Custom functionality \ninterface LegendsContract:\n    def balanceOf(_owner: address) -> uint256: view\n\nstruct FortuneCard:\n    tribute: uint256\n    mintedDate: uint256\n    mintedBlock: uint256\n    randomness: uint256\n\nlegendsContract: LegendsContract\n\nfortunesMinted: public(uint256)\nfortunesRegistry: HashMap[uint256, FortuneCard]\n\nlastMintedDate: HashMap[address, uint256]\ntributesPlaying: public(uint256)\n\nfeesRate: public(uint256)\nfeesBalance: public(uint256)\n\n@external\ndef __init__(_feesRate: uint256, legendsAddress:address):\n    \"\"\"\n    @dev Contract constructor.\n    \"\"\"\n    self.owner = msg.sender\n    self.baseURL = \"https://api.babby.xyz/metadata/\"\n    self.fortunesMinted = 0\n    self.feesRate = _feesRate\n    self.legendsContract = LegendsContract(legendsAddress)\n\n\n@pure\n@external\ndef supportsInterface(interface_id: bytes4) -> bool:\n    \"\"\"\n    @dev Interface identification is specified in ERC-165.\n    @param interface_id Id of the interface\n    \"\"\"\n    return interface_id in SUPPORTED_INTERFACES\n\n\n### VIEW FUNCTIONS ###\n\n@view\n@external\ndef balanceOf(_owner: address) -> uint256:\n    \"\"\"\n    @dev Returns the number of NFTs owned by `_owner`.\n         Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\n    @param _owner Address for whom to query the balance.\n    \"\"\"\n    assert _owner != empty(address)\n    return self.ownerToNFTokenCount[_owner]\n\n\n@view\n@external\ndef ownerOf(_tokenId: uint256) -> address:\n    \"\"\"\n    @dev Returns the address of the owner of the NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId The identifier for an NFT.\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != empty(address)\n    return owner\n\n\n@view\n@external\ndef getApproved(_tokenId: uint256) -> address:\n    \"\"\"\n    @dev Get the approved address for a single NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId ID of the NFT to query the approval of.\n    \"\"\"\n    # Throws if `_tokenId` is not a valid NFT\n    assert self.idToOwner[_tokenId] != empty(address)\n    return self.idToApprovals[_tokenId]\n\n\n@view\n@external\ndef isApprovedForAll(_owner: address, _operator: address) -> bool:\n    \"\"\"\n    @dev Checks if `_operator` is an approved operator for `_owner`.\n    @param _owner The address that owns the NFTs.\n    @param _operator The address that acts on behalf of the owner.\n    \"\"\"\n    return (self.ownerToOperators[_owner])[_operator]\n\n\n### TRANSFER FUNCTION HELPERS ###\n\n@view\n@internal\ndef _isApprovedOrOwner(_spender: address, _tokenId: uint256) -> bool:\n    \"\"\"\n    @dev Returns whether the given spender can transfer a given token ID\n    @param spender address of the spender to query\n    @param tokenId uint256 ID of the token to be transferred\n    @return bool whether the msg.sender is approved for the given token ID,\n        is an operator of the owner, or is the owner of the token\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    spenderIsOwner: bool = owner == _spender\n    spenderIsApproved: bool = _spender == self.idToApprovals[_tokenId]\n    spenderIsApprovedForAll: bool = (self.ownerToOperators[owner])[_spender]\n    return (spenderIsOwner or spenderIsApproved) or spenderIsApprovedForAll\n\n\n@internal\ndef _addTokenTo(_to: address, _tokenId: uint256):\n    \"\"\"\n    @dev Add a NFT to a given address\n         Throws if `_tokenId` is owned by someone.\n    \"\"\"\n    # Throws if `_tokenId` is owned by someone\n    assert self.idToOwner[_tokenId] == empty(address)\n    # Change the owner\n    self.idToOwner[_tokenId] = _to\n    # Change count tracking\n    self.ownerToNFTokenCount[_to] += 1\n\n\n@internal\ndef _removeTokenFrom(_from: address, _tokenId: uint256):\n    \"\"\"\n    @dev Remove a NFT from a given address\n         Throws if `_from` is not the current owner.\n    \"\"\"\n    # Throws if `_from` is not the current owner\n    assert self.idToOwner[_tokenId] == _from\n    # Change the owner\n    self.idToOwner[_tokenId] = empty(address)\n    # Change count tracking\n    self.ownerToNFTokenCount[_from] -= 1\n\n\n@internal\ndef _clearApproval(_owner: address, _tokenId: uint256):\n    \"\"\"\n    @dev Clear an approval of a given address\n         Throws if `_owner` is not the current owner.\n    \"\"\"\n    # Throws if `_owner` is not the current owner\n    assert self.idToOwner[_tokenId] == _owner\n    if self.idToApprovals[_tokenId] != empty(address):\n        # Reset approvals\n        self.idToApprovals[_tokenId] = empty(address)\n\n\n@internal\ndef _transferFrom(_from: address, _to: address, _tokenId: uint256, _sender: address):\n    \"\"\"\n    @dev Exeute transfer of a NFT.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT. (NOTE: `msg.sender` not allowed in private function so pass `_sender`.)\n         Throws if `_to` is the zero address.\n         Throws if `_from` is not the current owner.\n         Throws if `_tokenId` is not a valid NFT.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(_sender, _tokenId)\n    # Throws if `_to` is the zero address\n    assert _to != empty(address)\n    # Clear approval. Throws if `_from` is not the current owner\n    self._clearApproval(_from, _tokenId)\n    # Remove NFT. Throws if `_tokenId` is not a valid NFT\n    self._removeTokenFrom(_from, _tokenId)\n    # Add NFT\n    self._addTokenTo(_to, _tokenId)\n    # Log the transfer\n    log Transfer(_from, _to, _tokenId)\n\n\n### TRANSFER FUNCTIONS ###\n\n@external\n@payable\ndef transferFrom(_from: address, _to: address, _tokenId: uint256):\n    \"\"\"\n    @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n    @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\n            they maybe be permanently lost.\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n\n\n@external\n@payable\ndef safeTransferFrom(\n        _from: address,\n        _to: address,\n        _tokenId: uint256,\n        _data: Bytes[1024]=b\"\"\n    ):\n    \"\"\"\n    @dev Transfers the ownership of an NFT from one address to another address.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the\n         approved address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n         If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\n         the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    @param _data Additional data with no specified format, sent in call to `_to`.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n    if _to.is_contract: # check if `_to` is a contract address\n        returnValue: bytes4 = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data)\n        # Throws if transfer destination is a contract which does not implement 'onERC721Received'\n        assert returnValue == method_id(\"onERC721Received(address,address,uint256,bytes)\", output_type=bytes4)\n\n\n@external\n@payable\ndef approve(_approved: address, _tokenId: uint256):\n    \"\"\"\n    @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\n         Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\n         Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\n         Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\n    @param _approved Address to be approved for the given NFT ID.\n    @param _tokenId ID of the token to be approved.\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != empty(address)\n    # Throws if `_approved` is the current owner\n    assert _approved != owner\n    # Check requirements\n    senderIsOwner: bool = self.idToOwner[_tokenId] == msg.sender\n    senderIsApprovedForAll: bool = (self.ownerToOperators[owner])[msg.sender]\n    assert (senderIsOwner or senderIsApprovedForAll)\n    # Set the approval\n    self.idToApprovals[_tokenId] = _approved\n    log Approval(owner, _approved, _tokenId)\n\n\n@external\ndef setApprovalForAll(_operator: address, _approved: bool):\n    \"\"\"\n    @dev Enables or disables approval for a third party (\"operator\") to manage all of\n         `msg.sender`'s assets. It also emits the ApprovalForAll event.\n         Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\n    @notice This works even if sender doesn't own any tokens at the time.\n    @param _operator Address to add to the set of authorized operators.\n    @param _approved True if the operators is approved, false to revoke approval.\n    \"\"\"\n    # Throws if `_operator` is the `msg.sender`\n    assert _operator != msg.sender\n    self.ownerToOperators[msg.sender][_operator] = _approved\n    log ApprovalForAll(msg.sender, _operator, _approved)\n\n\n### MINT & BURN FUNCTIONS ###\n\n@payable\n@external\ndef mintFortune(_to: address) -> bool:\n    \"\"\"\n    @dev Function to mint tokens\n         Throws if `msg.sender` is not the owner.\n         Throws if `_to` is zero address.\n         Throws if `_tokenId` is owned by someone.\n    @param _to The address that will receive the minted tokens.\n    @return A boolean that indicates if the operation was successful.\n    \"\"\"\n    fees: uint256 = msg.value * self.feesRate / 100\n    tokenId:uint256 = self.fortunesMinted + 1\n    # Throws if `msg.sender` is not the owner\n    assert msg.sender == self.owner\n    if self.lastMintedDate[msg.sender] + 3600*24 > block.timestamp:  # and if less 24 hours passed since last mint\n        raise \"You can only mint once a day\"                     #     then raise error\n    else:   # Throws if `_to` is zero address\n        assert _to != empty(address)\n        # Add NFT. Throws if `_tokenId` is owned by someone\n        self._addTokenTo(_to, tokenId)\n        self.lastMintedDate[msg.sender] = block.timestamp\n        self.fortunesRegistry[tokenId] = FortuneCard({\n            tribute: msg.value,\n            mintedDate: block.timestamp,\n            mintedBlock: block.number,\n            randomness: block.prevrandao\n        })\n        self.fortunesMinted += 1\n        self.feesBalance += fees\n        self.tributesPlaying += msg.value - fees\n        log Transfer(empty(address), _to, tokenId)\n        return True\n\n\n@external\ndef burnFortune(_tokenId: uint256):\n    \"\"\"\n    @dev Burns a specific ERC721 token.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId uint256 id of the ERC721 token to be burned.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\n    owner: address = self.idToOwner[_tokenId]\n    # Check 5 minutes have passed since mint\n    assert self.fortunesRegistry[_tokenId].mintedDate + 300 < block.timestamp\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != empty(address)\n    self._clearApproval(owner, _tokenId)\n    self._removeTokenFrom(owner, _tokenId)\n\n    # Return the tribute\n    tribute: uint256 = self.fortunesRegistry[_tokenId].tribute\n    amountToReturn: uint256 = tribute * (100-self.feesRate) / 100\n    send(msg.sender, amountToReturn)\n    self.tributesPlaying -= amountToReturn\n    log Transfer(owner, empty(address), _tokenId)\n\n\n@view\n@external\ndef tokenURI(tokenId: uint256) -> String[132]:\n    return concat(self.baseURL, uint2str(tokenId))\n\n@external   \ndef updateBaseURL(_baseURL: String[53]):\n    assert msg.sender == self.owner\n    self.baseURL = _baseURL\n\n@external\ndef setFees(_newFeesRate: uint256):\n    assert _newFeesRate <= 10\n    assert msg.sender == self.owner\n    self.feesRate = _newFeesRate\n\n@external\ndef withdrawFees():\n    assert msg.sender == self.owner\n    send(self.owner, self.feesBalance)\n    self.feesBalance = 0\n\n@external\ndef setOwner(_newOwner: address):\n    assert msg.sender == self.owner\n    self.owner = _newOwner\n","imports":[],"references":[],"urls":[]},"nft_mocked_contract.vy":{"checksum":{"algorithm":"md5","hash":"0x449ae26f06f2d2a85dace74193f13ca1"},"content":"# @version ^0.3.7\n\"\"\"\n@title Mock Saturn Series ERC721 Token\n@dev This contract replicates the functionality of the ERC721 standard, but\n     with a few differences. It is intended to be used for testing purposes\n     only.\n@author 0xcassini.eth\n\"\"\"\n\nevent Mint:\n    to: indexed(address)\n\nevent Burn:\n    to: indexed(address)\n\nname: public(String[64])\nsymbol: public(String[32])\ninitialSupply: public(uint256)\nbalances: public(HashMap[address, uint256])\nsupply: public(uint256)\n\n@external\ndef __init__(name: String[64], symbol: String[32], initialSupply: uint256):\n    \"\"\"\n    @notice Initialize the contract\n    @param name The name of the token\n    @param symbol The symbol of the token\n    @param initialSupply The initial supply of the token\n    \"\"\"\n    self.name = name\n    self.symbol = symbol\n    self.supply = initialSupply\n\n\n\n@payable\n@external\ndef mintNFT(to: address):\n    \"\"\"\n    @notice Mint a new mocked NFT\n    @param to The address to mint the token to\n    \"\"\"\n    self.supply += 1\n    self.balances[to] += 1\n    log Mint(to)\n\n@external\ndef burnNFT(cardOwner: address):\n    \"\"\"\n    @notice Burn a mocked NFT\n    @param cardOwner The address to burn the token from\n    \"\"\"\n    self.supply -= 1\n    self.balances[cardOwner] -= 1\n    log Burn(cardOwner)\n\n@view\n@external\ndef balanceOf(legend: address) -> uint256:\n    \"\"\"\n    @notice Get the balance of a mocked NFT\n    @param legend The address to get the balance of\n    \"\"\"\n    return self.balances[legend]\n\n","imports":[],"references":[],"urls":[]}}}