Metadata-Version: 2.1
Name: eth-brownie
Version: 1.19.2
Summary: A Python framework for Ethereum smart contract deployment, testing and interaction.
Home-page: https://github.com/eth-brownie/brownie
Author: Ben Hauser
Author-email: ben@hauser.id
License: MIT
Keywords: brownie
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Python: >=3.7,<4
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohttp (==3.8.3)
Requires-Dist: aiosignal (==1.2.0)
Requires-Dist: asttokens (==2.0.5)
Requires-Dist: async-timeout (==4.0.2)
Requires-Dist: attrs (==22.1.0)
Requires-Dist: base58 (==2.1.1)
Requires-Dist: bitarray (==2.6.0)
Requires-Dist: black (==22.10.0)
Requires-Dist: certifi (==2022.9.24)
Requires-Dist: charset-normalizer (==2.1.1)
Requires-Dist: click (==8.1.3)
Requires-Dist: cytoolz (==0.12.0)
Requires-Dist: dataclassy (==0.11.1)
Requires-Dist: eip712 (==0.1.0)
Requires-Dist: eth-abi (==2.2.0)
Requires-Dist: eth-account (==0.5.9)
Requires-Dist: eth-event (==1.2.3)
Requires-Dist: eth-hash[pycryptodome] (==0.3.3)
Requires-Dist: eth-keyfile (==0.5.1)
Requires-Dist: eth-keys (==0.3.4)
Requires-Dist: eth-rlp (==0.2.1)
Requires-Dist: eth-typing (==2.3.0)
Requires-Dist: eth-utils (==1.10.0)
Requires-Dist: execnet (==1.9.0)
Requires-Dist: frozenlist (==1.3.1)
Requires-Dist: hexbytes (==0.2.3)
Requires-Dist: hypothesis (==6.27.3)
Requires-Dist: idna (==3.4)
Requires-Dist: inflection (==0.5.0)
Requires-Dist: iniconfig (==1.1.1)
Requires-Dist: ipfshttpclient (==0.8.0a2)
Requires-Dist: jsonschema (==3.2.0)
Requires-Dist: lazy-object-proxy (==1.7.1)
Requires-Dist: lru-dict (==1.1.8)
Requires-Dist: multiaddr (==0.0.9)
Requires-Dist: multidict (==6.0.2)
Requires-Dist: mypy-extensions (==0.4.3)
Requires-Dist: mythx-models (==1.9.1)
Requires-Dist: netaddr (==0.8.0)
Requires-Dist: packaging (==21.3)
Requires-Dist: parsimonious (==0.8.1)
Requires-Dist: pathspec (==0.10.1)
Requires-Dist: platformdirs (==2.5.2)
Requires-Dist: pluggy (==1.0.0)
Requires-Dist: prompt-toolkit (==3.0.31)
Requires-Dist: protobuf (==3.19.5)
Requires-Dist: psutil (==5.9.2)
Requires-Dist: py (==1.11.0)
Requires-Dist: py-solc-ast (==1.2.9)
Requires-Dist: py-solc-x (==1.1.1)
Requires-Dist: pycryptodome (==3.15.0)
Requires-Dist: pygments (==2.13.0)
Requires-Dist: pygments-lexer-solidity (==0.7.0)
Requires-Dist: pyjwt (==1.7.1)
Requires-Dist: pyparsing (==3.0.9)
Requires-Dist: pyrsistent (==0.18.1)
Requires-Dist: pytest (==6.2.5)
Requires-Dist: pytest-forked (==1.4.0)
Requires-Dist: pytest-xdist (==1.34.0)
Requires-Dist: python-dateutil (==2.8.1)
Requires-Dist: python-dotenv (==0.16.0)
Requires-Dist: pythx (==1.6.1)
Requires-Dist: pyyaml (==5.4.1)
Requires-Dist: requests (==2.28.1)
Requires-Dist: rlp (==2.0.1)
Requires-Dist: semantic-version (==2.10.0)
Requires-Dist: six (==1.16.0)
Requires-Dist: sortedcontainers (==2.4.0)
Requires-Dist: toml (==0.10.2)
Requires-Dist: tomli (==2.0.1)
Requires-Dist: toolz (==0.12.0)
Requires-Dist: tqdm (==4.64.1)
Requires-Dist: urllib3 (==1.26.12)
Requires-Dist: varint (==1.0.2)
Requires-Dist: vvm (==0.1.0)
Requires-Dist: vyper (==0.3.7)
Requires-Dist: wcwidth (==0.2.5)
Requires-Dist: web3 (==5.31.1)
Requires-Dist: websockets (==9.1)
Requires-Dist: wheel (==0.37.1)
Requires-Dist: wrapt (==1.14.1)
Requires-Dist: yarl (==1.8.1)

# Brownie

[![Pypi Status](https://img.shields.io/pypi/v/eth-brownie.svg)](https://pypi.org/project/eth-brownie/) [![Build Status](https://img.shields.io/github/workflow/status/eth-brownie/brownie/brownie%20workflow)](https://github.com/eth-brownie/brownie/actions) [![Docs Status](https://readthedocs.org/projects/eth-brownie/badge/?version=latest)](https://eth-brownie.readthedocs.io/en/stable/) [![Coverage Status](https://img.shields.io/codecov/c/github/eth-brownie/brownie)](https://codecov.io/gh/eth-brownie/brownie)

Brownie is a Python-based development and testing framework for smart contracts targeting the [Ethereum Virtual Machine](https://solidity.readthedocs.io/en/v0.6.0/introduction-to-smart-contracts.html#the-ethereum-virtual-machine).

## Features

* Full support for [Solidity](https://github.com/ethereum/solidity) (`>=0.4.22`) and [Vyper](https://github.com/vyperlang/vyper) (`>=0.1.0-beta.16`)
* Contract testing via [`pytest`](https://github.com/pytest-dev/pytest), including trace-based coverage evaluation
* Property-based and stateful testing via [`hypothesis`](https://github.com/HypothesisWorks/hypothesis/tree/master/hypothesis-python)
* Powerful debugging tools, including python-style tracebacks and custom error strings
* Built-in console for quick project interaction

## Dependencies

* [python3](https://www.python.org/downloads/release/python-3910/) version 3.7 or greater, python3-dev
* [ganache](https://github.com/trufflesuite/ganache) - tested with version [7.0.2](https://github.com/trufflesuite/ganache/releases/tag/v7.0.2)

## Installation

### via `pipx`

The recommended way to install Brownie is via [`pipx`](https://github.com/pipxproject/pipx). pipx installs Brownie into a virtual environment and makes it available directly from the commandline. Once installed, you will never have to activate a virtual environment prior to using Brownie.

To install `pipx`:

```bash
python3 -m pip install --user pipx
python3 -m pipx ensurepath
```

To install Brownie using `pipx`:

```bash
pipx install eth-brownie
```

To upgrade to the latest version:

```bash
pipx upgrade eth-brownie
```

To use lastest master or another branch as version:
```bash
pipx install git+https://github.com/eth-brownie/brownie.git@master
```

### via `pip`

You can install the latest release via [`pip`](https://pypi.org/project/pip/):

```bash
pip install eth-brownie
```

### via `setuptools`

You can clone the repository and use [`setuptools`](https://github.com/pypa/setuptools) for the most up-to-date version:

```bash
git clone https://github.com/eth-brownie/brownie.git
cd brownie
python3 setup.py install
```

### as a library

If you want to install brownie inside your own project (rather than as a standalone cli tool):

```bash
export BROWNIE_LIB=1
pip install eth-brownie
```

This loosens the pins on all dependencies. You'll want to make sure you have your own `requirements.txt` to make sure upgrades upstream don't surprise anyone.

### for development

There are extra tools that are helpful when developing:

```bash
git clone https://github.com/eth-brownie/brownie.git
cd brownie
python3 -m venv venv
./venv/bin/pip install wheel
./venv/bin/pip install -e . -r requirements-dev.txt
```

Upgrading the pinned versions of dependencies is easy:
```
./venv/bin/pip-compile --upgrade
./venv/bin/pip-compile --upgrade requirements-dev.in
./venv/bin/pip-compile --upgrade requirements-windows.in
```

Even small upgrades of patch versions have broken things in the past, so be sure to run all tests after upgrading things!

## Quick Usage

To initialize a new Brownie project, start by creating a new folder. From within that folder, type:

```bash
brownie init
```

Next, type `brownie --help` for basic usage information.

## Documentation and Support

Brownie documentation is hosted at [Read the Docs](https://eth-brownie.readthedocs.io/en/latest/).

If you have any questions about how to use Brownie, feel free to ask on [Ethereum StackExchange](https://ethereum.stackexchange.com/) or join us on [Gitter](https://gitter.im/eth-brownie/community).

## Testing

To run the tests, first install the developer dependencies:

```bash
pip install -e . -r requirements-dev.txt
```

Then use [`tox`](https://github.com/tox-dev/tox) to run the complete suite against the full set of build targets, or [`pytest`](https://github.com/pytest-dev/pytest) to run tests against a specific version of Python. If you are using [`pytest`](https://github.com/pytest-dev/pytest) you must include the `-p no:pytest-brownie` flag to prevent it from loading the Brownie plugin.

### Using Docker

You can use a sandbox container provided in the [`docker-compose.yml`](docker-compose.yml) file for testing inside a Docker environment.

This container provides everything you need to test using a Python 3.6 interpreter.

Start the test environment:

```bash
docker-compose up -d
```

To open a session to the container:

```bash
docker-compose exec sandbox bash
```

To run arbitrary commands, use the `bash -c` prefix.

```bash
docker-compose exec sandbox bash -c ''
```

For example, to run the tests in `brownie/tests/test_format_input.py`:

```bash
docker-compose exec sandbox bash -c 'python -m pytest tests/convert/test_format_input.py'
```

#### Attaching to dockerized RPC clients

You can also attach to a RPC client already running inside a docker container.

For example for running ganache-cli you could just startup the official ganache-cli docker image:

```bash
docker run -p 8545:8545 trufflesuite/ganache-cli
```

Then in another terminal on your host you could connect to it:

```bash
brownie console
```

If you have your RPC client bound to a specific hostname e.g. `ganache` you could create a separate brownie network for it:

```bash
brownie networks add Development dev cmd=ganache-cli host=http://ganache:8545
```

Then connect to it with:

```bash
brownie console --network dev
```

## Contributing

Help is always appreciated! Feel free to open an issue if you find a problem, or a pull request if you've solved an issue.

Please check out our [Contribution Guide](CONTRIBUTING.md) prior to opening a pull request, and join the Brownie [Gitter channel](https://gitter.im/eth-brownie/community) if you have any questions.

## License

This project is licensed under the [MIT license](LICENSE).


